{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.4", "generated_at": "2022-05-19T09:39:42.861436Z", "invocation_id": "84e16af1-4e79-4118-af07-497aa709aeb2", "env": {}, "project_id": "3b7a3dc330177ae851ef292c7d9f8432", "user_id": "02177afb-dac7-4277-80b5-56b6536b8993", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.perekrestokvprok.my_first_dbt_model": {"raw_sql": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n{{ config(materialized='table') }}\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "example", "my_first_dbt_model"], "unique_id": "model.perekrestokvprok.my_first_dbt_model", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "example/my_first_dbt_model.sql", "original_file_path": "models/example/my_first_dbt_model.sql", "name": "my_first_dbt_model", "alias": "my_first_dbt_model", "checksum": {"name": "sha256", "checksum": "842251f5ed1d97920d3748d9686b8c05a3a0071ec7990f948f36796491788aed"}, "tags": [], "refs": [], "sources": [], "description": "A starter dbt model", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/example/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1652814262.671625}, "model.perekrestokvprok.my_second_dbt_model": {"raw_sql": "-- Use the `ref` function to select from other models\n\nselect *\nfrom {{ ref('my_first_dbt_model') }}\nwhere id = 1", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.perekrestokvprok.my_first_dbt_model"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "example", "my_second_dbt_model"], "unique_id": "model.perekrestokvprok.my_second_dbt_model", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "example/my_second_dbt_model.sql", "original_file_path": "models/example/my_second_dbt_model.sql", "name": "my_second_dbt_model", "alias": "my_second_dbt_model", "checksum": {"name": "sha256", "checksum": "b3aa346f283f3c9c9a75936f3b80d2572ca9ab39aee4c02b30553d3fe2ba5692"}, "tags": [], "refs": [["my_first_dbt_model"]], "sources": [], "description": "A starter dbt model", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/example/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652814262.6728287}, "model.perekrestokvprok.dim_client_promo": {"raw_sql": "---\u043a\u043e\u0441\u0442\u043e\u0432 \u0437\u0434\u0435\u0441\u044c \u043d\u0435\u0442, \u0434\u043e\u0431\u0430\u0432\u044c \u0432 PBI---\nWITH promo_client_data AS (\n    SELECT\n        order_date,\n        region,\n        promo_name,\n        promo_name_full,\n        LOWER(promo_code) AS promo_code,\n        order_id,\n        platform,\n        revenue,\n        order_count\n    FROM {{ ref('stg_promocode_client_data') }}\n),\n\npromo_dict AS (\n    SELECT\n        LOWER(promocode) AS promo_code,\n        type,\n        channel\n    FROM {{ ref('stg_promo_sheets') }}\n)\n\nSELECT\n    DATE(order_date) AS date,\n    channel,\n    type,\n    UPPER(promo_code) AS promo_code,\n    promo_name,\n    region,\n    revenue,\n    order_count\nFROM promo_client_data\nLEFT JOIN promo_dict\nUSING(promo_code)\nWHERE type IS NOT NULL", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.perekrestokvprok.stg_promocode_client_data", "model.perekrestokvprok.stg_promo_sheets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_client_promo"], "unique_id": "model.perekrestokvprok.dim_client_promo", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "marts/dim_client_promo.sql", "original_file_path": "models/marts/dim_client_promo.sql", "name": "dim_client_promo", "alias": "dim_client_promo", "checksum": {"name": "sha256", "checksum": "b6804c648b7663cf7765ebc86702529a4be7cab200ad744e7ca396f08556e3ab"}, "tags": [], "refs": [["stg_promocode_client_data"], ["stg_promo_sheets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652814262.2185793}, "model.perekrestokvprok.dim_media": {"raw_sql": "WITH clicks_table AS (\n    SELECT\n        date,\n        insertion_order,\n        insertion_order_id,\n        impressions,\n        clicks,\n        revenue_adv_currency,\n        profit_advertiser_currency\n    FROM {{ ref('int_google_dbm_impressions_clicks_revenue_meta') }}\n),\n\naf AS (\n    SELECT\n        date,\n        campaign_name,\n        media_source,\n        SUM(IF(event_name = 'af_purchase' AND is_retargeting = FALSE, event_count, 0)) AS af_ua_purchase,\n        SUM(IF(event_name = 'af_purchase' AND is_retargeting = TRUE, event_count, 0)) AS af_rtg_purchase,\n        SUM(IF(event_name = 'install', event_count, 0)) AS af_install,\n        SUM(IF(event_name IN ('re-attribution','re-engagement'), event_count, 0)) AS af_re_engagement\n    FROM {{ ref('stg_af_for_media') }}\n    GROUP BY 1,2,3\n),\n\nplacement_dict AS (\n        SELECT\n        placement_id,\n        placement,\n        insertion_order_id\n    FROM {{ ref('stg_placement_dict') }}\n),\n\nactivity AS (\n    SELECT\n        interaction_date,\n        placement_id,\n        placement,\n        purchase,\n        retarget,\n        installs\n    FROM {{ ref('int_google_dcm_activity_meta') }}\n),\n\nreach AS (\n    SELECT\n        date,\n        insertion_order,\n        insertion_order_id,\n        impression_reach\n    FROM  {{ ref('int_google_dcm_reach') }}\n),\n\nfinal AS (\n    SELECT\n        clicks_table.date,\n        clicks_table.insertion_order,\n        clicks_table.insertion_order_id,\n        clicks_table.impressions,\n        clicks_table.clicks,\n        reach.impression_reach,\n        clicks_table.revenue_adv_currency,\n        clicks_table.profit_advertiser_currency,\n        SUM(activity.purchase) AS purchase,\n        SUM(activity.retarget) AS retarget,\n        SUM(activity.installs) AS installs,\n        SUM(af.af_ua_purchase) AS af_ua_purchase,\n        SUM(af.af_rtg_purchase) AS af_rtg_purchase,\n        SUM(af.af_install) AS af_install,\n        SUM(af.af_re_engagement) AS af_re_engagement\n    FROM clicks_table\n    LEFT JOIN reach ON reach.date = clicks_table.date \n        AND reach.insertion_order_id = clicks_table.insertion_order_id\n    LEFT JOIN placement_dict ON placement_dict.insertion_order_id = clicks_table.insertion_order_id\n    LEFT JOIN activity ON activity.interaction_date = clicks_table.date\n        AND placement_dict.placement_id = activity.placement_id\n    LEFT JOIN af ON af.date = clicks_table.date AND placement_dict.placement_id = af.campaign_name\n    GROUP BY 1,2,3,4,5,6,7,8\n    ORDER BY 1,2\n)\n\nSELECT\n    date,\n    insertion_order,\n    insertion_order_id,\n    impressions,\n    clicks,\n    impression_reach,\n    revenue_adv_currency,\n    profit_advertiser_currency,\n    purchase,\n    retarget,\n    installs,\n    af_ua_purchase,\n    af_rtg_purchase,\n    af_install,\n    af_re_engagement\nFROM final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta", "model.perekrestokvprok.stg_af_for_media", "model.perekrestokvprok.stg_placement_dict", "model.perekrestokvprok.int_google_dcm_activity_meta", "model.perekrestokvprok.int_google_dcm_reach"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_media"], "unique_id": "model.perekrestokvprok.dim_media", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "marts/dim_media.sql", "original_file_path": "models/marts/dim_media.sql", "name": "dim_media", "alias": "dim_media", "checksum": {"name": "sha256", "checksum": "e852daa45d78e536a23b907c4f5d34dfc9550646004ffb8f846949914873817c"}, "tags": [], "refs": [["int_google_dbm_impressions_clicks_revenue_meta"], ["stg_af_for_media"], ["stg_placement_dict"], ["int_google_dcm_activity_meta"], ["int_google_dcm_reach"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652814262.2225392}, "model.perekrestokvprok.dim_plan_budget": {"raw_sql": "WITH source AS (\n    SELECT\n        start_date,\n        end_date,\n        plan_budget,\n        plan_type,\n        plan_order\n    FROM {{ ref('stg_budget_and_plan') }}\n),\n\narray_table AS (\n    SELECT \n        GENERATE_DATE_ARRAY(start_date,end_date) AS date, \n        plan_budget, \n        plan_type, \n        plan_order \n    FROM source\n),\n\nplans AS (\n    SELECT\n        date,\n        plan_budget,\n        plan_order,\n        CASE\n            WHEN plan_type = \"UA\" THEN \"uac\"\n            WHEN plan_type = \"PROMO\" THEN \"promo\"\n            WHEN plan_type = \"RTG\" THEN \"rtg\"\n            ELSE '-' END AS plan_type\n    FROM array_table, UNNEST(date) AS date\n)\n\nSELECT\n    date,\n    plan_budget,\n    plan_order,\n    plan_type\nFROM plans", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.perekrestokvprok.stg_budget_and_plan"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_plan_budget"], "unique_id": "model.perekrestokvprok.dim_plan_budget", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "marts/dim_plan_budget.sql", "original_file_path": "models/marts/dim_plan_budget.sql", "name": "dim_plan_budget", "alias": "dim_plan_budget", "checksum": {"name": "sha256", "checksum": "b93793f2d35fc1de2735bd70e03b8dfbed844c924525c74247a475fba9953d86"}, "tags": [], "refs": [["stg_budget_and_plan"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652814262.227275}, "model.perekrestokvprok.dim_ret": {"raw_sql": "/* \n\u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043b\u0443\u0447\u0448\u0435 \u0437\u0430\u0433\u043b\u044f\u043d\u0443\u0442\u044c \u0441\u044e\u0434\u0430: https://github.com/realweb-msk/perekrestokvprok-dbt\n\u0438\u043b\u0438 \u0441\u044e\u0434\u0430: https://brave-hermann-395dc3.netlify.app/#!/model/model.perekrestokvprok.dim_ret\n*/\n\nWITH af_conversions AS (\n    SELECT\n        date,\n        is_retargeting,\n        --af_cid,\n        --adset_name,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\n        mediasource,\n        platform,\n        CASE\n            WHEN event_name IN ('re-attribution','re-engagement')\n            THEN 're-engagement' \n            WHEN event_name = \"af_purchase\"\n            THEN \"af_purchase\"\n            ELSE 'no' END AS event_name,\n        uniq_event_count,\n        event_revenue,\n        event_count,\n        campaign_name\n    FROM  {{ ref('stg_af_client_data') }}\n    WHERE event_name IN('re-attribution','re-engagement',\"af_purchase\")\n    -- WHERE is_retargeting = TRUE\n    -- AND REGEXP_CONTAINS(campaign_name, 'realweb')\n),\n\n----------------------- facebook -------------------------\n\nfacebook AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type, \n        {{ promo_search('campaign_name', 'adset_name', 'ad_name') }} as promo_search,\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\n        SUM(installs) AS re_engagement,\n        SUM(revenue) AS revenue,\n        SUM(purchase) AS purchase,\n        SUM(spend) AS spend,\n        'Facebook' AS source\n    FROM {{ ref('stg_facebook_cab_sheets') }}\n    --{{ ref('stg_facebook_cab_meta') }}\n    WHERE campaign_type = 'retargeting'\n    GROUP BY 1,2,3,4,5,6\n),\n\n----------------------- yandex -------------------------\n\nyandex_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type, \n        {{ platform('campaign_name') }} as platform,\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\n        -- SUM(impressions),\n        -- SUM(clicks),\n        SUM(spend) AS spend\n    FROM {{ ref('int_yandex_cab_meta') }}\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nyandex_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        promo_search,\n        auditory,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\n    FROM af_conversions\n    WHERE mediasource ='yandexdirect_int'\n    AND is_retargeting = TRUE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n    GROUP BY 1,2,3,4,5,6\n),\n\nyandex AS (\n    SELECT\n        COALESCE(yandex_convs.date, yandex_cost.date) AS date,\n        COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) AS campaign_name,\n        COALESCE(yandex_convs.platform, yandex_cost.platform) AS platform,\n        COALESCE(yandex_convs.promo_type, yandex_cost.promo_type) AS promo_type,\n        COALESCE(yandex_convs.promo_search, yandex_cost.promo_search) AS promo_search,\n        COALESCE(yandex_convs.auditory, yandex_cost.auditory) AS auditory,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        '\u042f\u043d\u0434\u0435\u043a\u0441.\u0414\u0438\u0440\u0435\u043a\u0442' AS source,\n    FROM yandex_convs\n    FULL OUTER JOIN yandex_cost\n    ON yandex_convs.date = yandex_cost.date \n    AND yandex_convs.campaign_name = yandex_cost.campaign_name\n    AND yandex_convs.promo_type = yandex_cost.promo_type\n    AND yandex_convs.promo_search = yandex_cost.promo_search\n    AND yandex_convs.auditory = yandex_cost.auditory\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\n    AND COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) != 'None'\n),\n\n----------------------- vk -------------------------\n\nvk_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\n        -- SUM(impressions),\n        -- SUM(clicks),\n        SUM(spend) AS spend\n    FROM {{ ref('int_vk_cab_meta') }}\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nvk_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        promo_search,\n        auditory,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\n    FROM af_conversions\n    WHERE mediasource ='vk_int'\n    AND is_retargeting = TRUE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n    GROUP BY 1,2,3,4,5,6\n),\n\nvk AS (\n    SELECT\n        COALESCE(vk_convs.date, vk_cost.date) AS date,\n        COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) AS campaign_name,\n        COALESCE(vk_convs.platform, vk_cost.platform) AS platform,\n        COALESCE(vk_convs.promo_type, vk_cost.promo_type) AS promo_type,\n        COALESCE(vk_convs.promo_search, vk_cost.promo_search) AS promo_search,\n        COALESCE(vk_convs.auditory, vk_cost.auditory) AS auditory,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        '\u0412\u041a' AS source,\n    FROM vk_convs\n    FULL OUTER JOIN vk_cost\n    ON vk_convs.date = vk_cost.date \n    AND vk_convs.campaign_name = vk_cost.campaign_name\n    AND vk_convs.promo_type = vk_cost.promo_type\n    AND vk_convs.promo_search = vk_cost.promo_search\n    AND vk_convs.auditory = vk_cost.auditory\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\n    AND COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) != 'None'\n),\n\n----------------------- mytarget -------------------------\n\nmt_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\n        -- SUM(impressions),\n        -- SUM(clicks),\n        SUM(spend) AS spend\n    FROM {{ ref('int_mytarget_cab_meta') }}\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nmt_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        promo_search,\n        auditory,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\n    FROM af_conversions\n    WHERE mediasource = 'mail.ru_int'\n    AND is_retargeting = TRUE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n    GROUP BY 1,2,3,4,5,6\n),\n\nmt AS (\n    SELECT\n        COALESCE(mt_convs.date, mt_cost.date) AS date,\n        COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) AS campaign_name,\n        COALESCE(mt_convs.platform, mt_cost.platform) AS platform,\n        COALESCE(mt_convs.promo_type, mt_cost.promo_type) AS promo_type,\n        COALESCE(mt_convs.promo_search, mt_cost.promo_search) AS promo_search,\n        COALESCE(mt_convs.auditory, mt_cost.auditory) AS auditory,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        'MyTarget' AS source,\n    FROM mt_convs\n    FULL OUTER JOIN mt_cost\n    ON mt_convs.date = mt_cost.date \n    AND mt_convs.campaign_name = mt_cost.campaign_name\n    AND mt_convs.promo_type = mt_cost.promo_type\n    AND mt_convs.promo_search = mt_cost.promo_search\n    AND mt_convs.auditory = mt_cost.auditory\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\n    AND COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) != 'None'\n),\n\n----------------------- twitter -------------------------\n\ntw_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ promo_type('campaign_name', '\"-\"') }} as promo_type,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_search('campaign_name') }} as promo_search,\n        {{ aud('campaign_name') }} AS auditory,\n        -- SUM(impressions),\n        -- SUM(clicks),\n        SUM(spend) AS spend\n    FROM {{ ref('stg_twitter_cab_sheets') }}\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_tw')\n    GROUP BY 1,2,3,4,5,6\n),\n\ntw_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        promo_search,\n        auditory,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\n    FROM af_conversions\n    WHERE is_retargeting = TRUE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_tw')\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n    GROUP BY 1,2,3,4,5,6\n),\n\ntw AS (\n    SELECT\n        COALESCE(tw_convs.date, tw_cost.date) AS date,\n        COALESCE(tw_convs.campaign_name, tw_cost.campaign_name) AS campaign_name,\n        COALESCE(tw_convs.platform, tw_cost.platform) AS platform,\n        COALESCE(tw_convs.promo_type, tw_cost.promo_type) AS promo_type,\n        COALESCE(tw_convs.promo_search, tw_cost.promo_search) AS promo_search,\n        COALESCE(tw_convs.auditory, tw_cost.auditory) AS auditory,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        'Twitter' AS source,\n    FROM tw_convs\n    FULL OUTER JOIN tw_cost\n    ON tw_convs.date = tw_cost.date \n    AND tw_convs.campaign_name = tw_cost.campaign_name\n    AND tw_convs.promo_type = tw_cost.promo_type\n    AND tw_convs.promo_search = tw_cost.promo_search\n    AND tw_convs.auditory = tw_cost.auditory\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\n    AND COALESCE(tw_convs.campaign_name, tw_cost.campaign_name) != 'None'\n),\n\n----------------------- tiktok -------------------------\n\ntiktok_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\n        -- SUM(impressions),\n        -- SUM(clicks),\n        SUM(spend) AS spend,\n        -- \u0434\u043b\u044f \u0442\u0438\u043a\u0442\u043e\u043a\u0430 \u0438\u0437 \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430:--\n        SUM(purchase) AS purchase\n    FROM {{ ref('stg_tiktok_cab_meta') }}\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\ntiktok_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        promo_search,\n        auditory,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        --SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\n    FROM af_conversions\n    WHERE  is_retargeting = TRUE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_tiktok')\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n    GROUP BY 1,2,3,4,5,6\n),\n\ntiktok AS (\n    SELECT\n        COALESCE(tiktok_convs.date, tiktok_cost.date) AS date,\n        COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) AS campaign_name,\n        COALESCE(tiktok_convs.platform, tiktok_cost.platform) AS platform,\n        COALESCE(tiktok_convs.promo_type, tiktok_cost.promo_type) AS promo_type,\n        COALESCE(tiktok_convs.promo_search, tiktok_cost.promo_search) AS promo_search,\n        COALESCE(tiktok_convs.auditory, tiktok_cost.auditory) AS auditory,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        'TikTok' AS source,\n    FROM tiktok_convs\n    FULL OUTER JOIN tiktok_cost\n    ON tiktok_convs.date = tiktok_cost.date \n    AND tiktok_convs.campaign_name = tiktok_cost.campaign_name\n    AND tiktok_convs.promo_type = tiktok_cost.promo_type\n    AND tiktok_convs.promo_search = tiktok_cost.promo_search\n    AND tiktok_convs.auditory = tiktok_cost.auditory\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\n    AND COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) != 'None'\n),\n\n----------------------- apple search ads -------------------------\n\nasa_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\n        'ios' as platform,\n        -- SUM(impressions),\n        -- SUM(clicks),\n        SUM(spend) AS spend\n    FROM {{ ref('stg_asa_cab_sheets') }}\n    --{{ ref('int_asa_cab_meta') }}\n    WHERE campaign_type = 'retargeting'\n    GROUP BY 1,2,3,4,5,6\n),\n\nasa_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        promo_search,\n        auditory,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'\\(r\\)')\n    GROUP BY 1,2,3,4,5,6\n),\n\nasa AS (\n    SELECT\n        COALESCE(asa_convs.date, asa_cost.date) AS date,\n        COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) AS campaign_name,\n        COALESCE(asa_convs.platform, asa_cost.platform) AS platform,\n        COALESCE(asa_convs.promo_type, asa_cost.promo_type) AS promo_type,\n        COALESCE(asa_convs.promo_search, asa_cost.promo_search) AS promo_search,\n        COALESCE(asa_convs.auditory, asa_cost.auditory) AS auditory,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        'Apple Search Ads' AS source,\n    FROM asa_convs\n    FULL OUTER JOIN asa_cost\n    ON asa_convs.date = asa_cost.date \n    AND asa_convs.campaign_name = asa_cost.campaign_name\n    AND asa_convs.promo_type = asa_cost.promo_type\n    AND asa_convs.promo_search = asa_cost.promo_search\n    AND asa_convs.auditory = asa_cost.auditory\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\n    AND COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) != 'None'\n),\n\n----------------------- Google Ads -------------------------\n\ngoogle_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\n        -- SUM(impressions),\n        -- SUM(clicks),\n        SUM(spend) AS spend,\n        SUM(installs) AS re_engagement\n    FROM {{ ref('stg_google_cab_sheets') }}\n    WHERE (campaign_type = 'retargeting'\n    --- \u043a\u043e\u0441\u0442\u044b\u043b\u044c 10.02.2022 X5RGPEREK-272 ---\n    OR campaign_name IN (\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]'))\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_|ohm')\n    GROUP BY 1,2,3,4,5,6\n),\n\ngoogle_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        promo_search,\n        auditory,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n    FROM af_conversions\n    WHERE mediasource ='googleadwords_int'\n    AND is_retargeting = TRUE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb|ohm')\n    AND (REGEXP_CONTAINS(campaign_name,  r'[_\\[]old[\\]_]')\n    OR campaign_name IN (\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]'))\n    GROUP BY 1,2,3,4,5,6\n),\n\ngoogle AS (\n    SELECT\n        COALESCE(google_convs.date, google_cost.date) AS date,\n        COALESCE(google_convs.campaign_name, google_cost.campaign_name) AS campaign_name,\n        COALESCE(google_convs.platform, google_cost.platform) AS platform,\n        COALESCE(google_convs.promo_type, google_cost.promo_type) AS promo_type,\n        COALESCE(google_convs.promo_search, google_cost.promo_search) AS promo_search,\n        COALESCE(google_convs.auditory, google_cost.auditory) AS auditory,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        'Google Ads' AS source,\n    FROM google_convs\n    FULL OUTER JOIN google_cost\n    ON google_convs.date = google_cost.date \n    AND google_convs.campaign_name = google_cost.campaign_name\n    AND google_convs.promo_type = google_cost.promo_type\n    AND google_convs.promo_search = google_cost.promo_search\n    AND google_convs.auditory = google_cost.auditory\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\n    AND COALESCE(google_convs.campaign_name, google_cost.campaign_name) != 'None'\n),\n\n----------------------- inapp -------------------------\n\nrate AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        platform,\n        rate_for_us\nFROM {{ ref('stg_rate_info') }}\nWHERE type = 'RTG'\n),\n\nlimits_table AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        limits\n    FROM {{ ref('stg_partner_limits') }}\n    WHERE type = 'RTG'\n),\n\ninapp_events_without_cumulation AS (\n    SELECT DISTINCT\n        date,\n        campaign_name,\n        platform,\n        {{ partner('campaign_name') }} AS partner,\n        promo_type,\n        promo_search,\n        auditory,\n        event_name,\n        event_revenue,\n        event_count,\n        SUM(event_count) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), event_name ORDER BY date, event_revenue)\n            AS cum_event_count\n        FROM af_conversions\n        WHERE REGEXP_CONTAINS(campaign_name, r'realweb_inapp')\n        AND is_retargeting = TRUE\n),\n\ninapp_events AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        partner,\n        promo_type,\n        promo_search,\n        auditory,\n        event_name,\n        event_revenue,\n        event_count,\n        cum_event_count,\n        SUM(event_count) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), event_name, partner ORDER BY date, event_revenue)\n            AS cum_event_count_by_prt\n    FROM inapp_events_without_cumulation\n),\n\ninapp AS (\n    SELECT\n        date,\n        campaign_name,\n        inapp_events.platform,\n        promo_type,\n        promo_search,\n        auditory,\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement,\n        SUM(IF(event_name = \"af_purchase\" and cum_event_count_by_prt <= COALESCE(limits, 1000000), event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\" and cum_event_count_by_prt <= COALESCE(limits, 1000000), event_count, 0)) AS purchase,\n        SUM(\n            CASE\n                WHEN event_name = 'af_purchase' \n                    AND date BETWEEN '2021-10-01' AND '2021-10-31'\n                    AND cum_event_count >= 3000 THEN event_count * 140\n                WHEN event_name = 'af_purchase' \n                    AND date BETWEEN '2021-10-01' AND '2021-10-31'\n                    AND cum_event_count < 3000 THEN event_count * rate_for_us\n                WHEN event_name = 'af_purchase' \n                    AND date NOT BETWEEN '2021-10-01' AND '2021-10-31'\n                    AND cum_event_count_by_prt <= COALESCE(limits, 1000000)\n                    THEN event_count * rate_for_us\n                ELSE 0 END\n            ) AS spend,\n        'inapp' AS source\n    FROM inapp_events\n    LEFT JOIN rate\n    ON inapp_events.partner = rate.partner \n    AND inapp_events.date BETWEEN rate.start_date AND rate.end_date\n    AND inapp_events.platform = rate.platform\n    LEFT JOIN limits_table\n    ON inapp_events.partner = limits_table.partner \n    AND inapp_events.date BETWEEN limits_table.start_date AND limits_table.end_date\n    GROUP BY 1,2,3,4,5,6\n),\n\nfinal AS (\n    SELECT * FROM yandex\n    UNION ALL \n    SELECT * FROM vk\n    UNION ALL \n    SELECT * FROM mt\n    UNION ALL \n    SELECT * FROM tw\n    UNION ALL \n    SELECT * FROM tiktok\n    UNION ALL\n    SELECT * FROM asa\n    UNION ALL\n    SELECT * FROM facebook\n    UNION ALL\n    SELECT * FROM inapp\n    UNION ALL\n    SELECT * FROM google\n)\n\nSELECT \n    date,\n    campaign_name,\n    platform,\n    promo_type,\n    promo_search,\n    auditory,\n    re_engagement,\n    revenue,\n    purchase,\n    spend,\n    source,\n    {{ geo('campaign_name') }} AS geo\nFROM final", "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.promo_type", "macro.perekrestokvprok.promo_search", "macro.perekrestokvprok.aud", "macro.perekrestokvprok.platform", "macro.perekrestokvprok.partner", "macro.perekrestokvprok.geo"], "nodes": ["model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_facebook_cab_sheets", "model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.int_yandex_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.int_vk_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_twitter_cab_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_tiktok_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_asa_cab_sheets", "model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_google_cab_sheets", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_partner_limits"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_ret"], "unique_id": "model.perekrestokvprok.dim_ret", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "marts/dim_ret.sql", "original_file_path": "models/marts/dim_ret.sql", "name": "dim_ret", "alias": "dim_ret", "checksum": {"name": "sha256", "checksum": "7c2fad66b6c69b59a9e2138987212d3171ffbbc20cb1cb56801e3fad49907b4f"}, "tags": [], "refs": [["stg_promo_dict_sheets"], ["stg_af_client_data"], ["stg_promo_dict_sheets"], ["stg_facebook_cab_sheets"], ["stg_facebook_cab_meta"], ["stg_promo_dict_sheets"], ["int_yandex_cab_meta"], ["stg_promo_dict_sheets"], ["int_vk_cab_meta"], ["stg_promo_dict_sheets"], ["int_mytarget_cab_meta"], ["stg_promo_dict_sheets"], ["stg_twitter_cab_sheets"], ["stg_promo_dict_sheets"], ["stg_tiktok_cab_meta"], ["stg_promo_dict_sheets"], ["stg_asa_cab_sheets"], ["int_asa_cab_meta"], ["stg_promo_dict_sheets"], ["stg_google_cab_sheets"], ["stg_rate_info"], ["stg_partner_limits"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652814262.2302465}, "model.perekrestokvprok.dim_ret_crm": {"raw_sql": "WITH af_orders AS (\n    SELECT\n        REGEXP_EXTRACT(REGEXP_REPLACE(event_value,'\"',''), 'af_order_id:(.*?),') AS order_id\n    FROM  {{ ref('stg_af_client_data') }}\n    WHERE event_name = \"af_purchase\"\n),\n\nclient_data AS (\n    SELECT\n        order_date,\n        promo_name,\n        promo_code,\n        order_id,\n        platform,\n        revenue,\n        order_count\n    FROM {{ ref('stg_promocode_client_data') }}\n),\n\npromo_data AS (\n    SELECT\n        date_start,\n        date_end,\n        promocode,\n        type,\n        channel\n    FROM {{ ref('stg_promo_sheets') }}\n),\n\nfinal AS (\n    SELECT\n        order_date AS date,\n        promo_name AS campaign_name,\n        platform,\n        CASE\n            WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name],'')), r'promo.*regular') THEN 'promo regular'\n            WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name],'')), r'promo.*global') THEN 'promo global'\n            WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name],'')), r'promo.*feed') THEN 'promo feed'\n        ELSE '-' END as promo_type,\n        0 AS re_engagement,\n        SUM(revenue) AS revenue,\n        SUM(order_count) AS purchase,\n        0 AS spend,\n        channel AS source,\n        'CRM' AS conversion_source_type\n    FROM client_data\n    LEFT JOIN promo_data\n    ON LOWER(client_data.promo_code) = LOWER(promo_data.promocode)\n    AND DATE(client_data.order_date) BETWEEN promo_data.date_start AND promo_data.date_end\n    WHERE type is not null\n    AND order_id NOT IN (\n        SELECT DISTINCT order_id\n        FROM af_orders\n    )\n    GROUP BY 1,2,3,4,9\n)\n\nSELECT\n    date,\n    campaign_name,\n    platform,\n    promo_type,\n    re_engagement,\n    revenue,\n    purchase,\n    spend,\n    source,\n    conversion_source_type\nFROM final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_promocode_client_data", "model.perekrestokvprok.stg_promo_sheets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_ret_crm"], "unique_id": "model.perekrestokvprok.dim_ret_crm", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "marts/dim_ret_crm.sql", "original_file_path": "models/marts/dim_ret_crm.sql", "name": "dim_ret_crm", "alias": "dim_ret_crm", "checksum": {"name": "sha256", "checksum": "d4ce32a35efdf72b303041beea2073f58762fe73ff0fcc3daabb05e68ae21801"}, "tags": [], "refs": [["stg_af_client_data"], ["stg_promocode_client_data"], ["stg_promo_sheets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652814262.2852526}, "model.perekrestokvprok.dim_rtg_agg": {"raw_sql": "/* \n\u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043b\u0443\u0447\u0448\u0435 \u0437\u0430\u0433\u043b\u044f\u043d\u0443\u0442\u044c \u0441\u044e\u0434\u0430: https://github.com/realweb-msk/perekrestokvprok-dbt\n\u0438\u043b\u0438 \u0441\u044e\u0434\u0430: https://brave-hermann-395dc3.netlify.app/#!/model/model.perekrestokvprok.dim_rtg_agg\n*/\n\nWITH af_conversions AS (\n    SELECT\n        date,\n        media_source AS mediasource,\n        campaign_name,\n        report_type AS campaign_type,\n        platform,\n        {{ promo_type('campaign_name') }} as promo_type,\n        {{ aud('campaign_name') }} AS auditory,\n        purchase,\n        revenue,\n        conversions AS re_engagement,\n    FROM  {{ ref('stg_af_rtg_partners_by_date') }}\n),\n\n----------------------- facebook -------------------------\n\nfacebook_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM {{ ref('stg_facebook_cab_sheets') }}\n    --{{ ref('stg_facebook_cab_meta') }}\n    WHERE campaign_type = 'retargeting'\n    GROUP BY 1,2,3,4,5,6\n),\n\nfacebook_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_fb')\n),\n\nfacebook AS (\n    SELECT\n        COALESCE(facebook_convs.date, facebook_cost.date) AS date,\n        COALESCE(facebook_convs.campaign_name, facebook_cost.campaign_name) AS campaign_name,\n        COALESCE(facebook_convs.platform, facebook_cost.platform) AS platform,\n        COALESCE(facebook_convs.promo_type, facebook_cost.promo_type) AS promo_type,\n        COALESCE(facebook_convs.auditory, facebook_cost.auditory) AS auditory,\n        COALESCE(facebook_convs.campaign_type, facebook_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        'Facebook' AS source,\n    FROM facebook_convs\n    FULL OUTER JOIN facebook_cost\n    ON facebook_convs.date = facebook_cost.date \n    AND facebook_convs.campaign_name = facebook_cost.campaign_name\n    AND facebook_convs.promo_type = facebook_cost.promo_type\n    AND facebook_convs.auditory = facebook_cost.auditory\n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(spend,0) > 0\n    AND COALESCE(facebook_convs.campaign_name, facebook_cost.campaign_name) != 'None'\n),\n\n----------------------- yandex -------------------------\n\nyandex_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM {{ ref('int_yandex_cab_meta') }}\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nyandex_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_ya')\n),\n\nyandex AS (\n    SELECT\n        COALESCE(yandex_convs.date, yandex_cost.date) AS date,\n        COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) AS campaign_name,\n        COALESCE(yandex_convs.platform, yandex_cost.platform) AS platform,\n        COALESCE(yandex_convs.promo_type, yandex_cost.promo_type) AS promo_type,\n        COALESCE(yandex_convs.auditory, yandex_cost.auditory) AS auditory,\n        COALESCE(yandex_convs.campaign_type, yandex_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        '\u042f\u043d\u0434\u0435\u043a\u0441.\u0414\u0438\u0440\u0435\u043a\u0442' AS source,\n    FROM yandex_convs\n    FULL OUTER JOIN yandex_cost\n    ON yandex_convs.date = yandex_cost.date \n    AND yandex_convs.campaign_name = yandex_cost.campaign_name\n    AND yandex_convs.promo_type = yandex_cost.promo_type\n    AND yandex_convs.auditory = yandex_cost.auditory\n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(spend,0) > 0\n    AND COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) != 'None'\n),\n\n----------------------- vk -------------------------\n\nvk_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM {{ ref('int_vk_cab_meta') }}\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nvk_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_vk')\n),\n\nvk AS (\n    SELECT\n        COALESCE(vk_convs.date, vk_cost.date) AS date,\n        COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) AS campaign_name,\n        COALESCE(vk_convs.platform, vk_cost.platform) AS platform,\n        COALESCE(vk_convs.promo_type, vk_cost.promo_type) AS promo_type,\n        COALESCE(vk_convs.auditory, vk_cost.auditory) AS auditory,\n        COALESCE(vk_convs.campaign_type, vk_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        '\u0412\u041a' AS source,\n    FROM vk_convs\n    FULL OUTER JOIN vk_cost\n    ON vk_convs.date = vk_cost.date \n    AND vk_convs.campaign_name = vk_cost.campaign_name\n    AND vk_convs.promo_type = vk_cost.promo_type\n    AND vk_convs.auditory = vk_cost.auditory\n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(spend,0) > 0\n    AND COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) != 'None'\n),\n\n----------------------- mytarget -------------------------\n\nmt_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM {{ ref('int_mytarget_cab_meta') }}\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nmt_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_mt')\n),\n\nmt AS (\n    SELECT\n        COALESCE(mt_convs.date, mt_cost.date) AS date,\n        COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) AS campaign_name,\n        COALESCE(mt_convs.platform, mt_cost.platform) AS platform,\n        COALESCE(mt_convs.promo_type, mt_cost.promo_type) AS promo_type,\n        COALESCE(mt_convs.auditory, mt_cost.auditory) AS auditory,\n        COALESCE(mt_convs.campaign_type, mt_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        'MyTarget' AS source,\n    FROM mt_convs\n    FULL OUTER JOIN mt_cost\n    ON mt_convs.date = mt_cost.date \n    AND mt_convs.campaign_name = mt_cost.campaign_name\n    AND mt_convs.promo_type = mt_cost.promo_type\n    AND mt_convs.auditory = mt_cost.auditory\n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(spend,0) > 0\n    AND COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) != 'None'\n),\n\n----------------------- tiktok -------------------------\n\ntiktok_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM {{ ref('stg_tiktok_cab_meta') }}\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb')\n    AND campaign_type = 'retargeting'\n    GROUP BY 1,2,3,4,5,6\n),\n\ntiktok_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_tiktok')\n),\n\ntiktok AS (\n    SELECT\n        COALESCE(tiktok_convs.date, tiktok_cost.date) AS date,\n        COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) AS campaign_name,\n        COALESCE(tiktok_convs.platform, tiktok_cost.platform) AS platform,\n        COALESCE(tiktok_convs.promo_type, tiktok_cost.promo_type) AS promo_type,\n        COALESCE(tiktok_convs.auditory, tiktok_cost.auditory) AS auditory,\n        COALESCE(tiktok_convs.campaign_type, tiktok_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        'TikTok' AS source,\n    FROM tiktok_convs\n    FULL OUTER JOIN tiktok_cost\n    ON tiktok_convs.date = tiktok_cost.date \n    AND tiktok_convs.campaign_name = tiktok_cost.campaign_name\n    AND tiktok_convs.promo_type = tiktok_cost.promo_type\n    AND tiktok_convs.auditory = tiktok_cost.auditory\n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(spend,0) > 0\n    AND COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) != 'None'\n),\n\n----------------------- apple search ads -------------------------\n\nasa_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        'ios' as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\n        campaign_type,\n        SUM(meta.impressions) AS impressions,\n        SUM(sheet.clicks) AS clicks,\n        SUM(sheet.spend) AS spend\n    FROM {{ ref('stg_asa_cab_sheets') }} sheet\n    LEFT JOIN {{ ref('int_asa_cab_meta') }} meta\n    USING(date, campaign_name, campaign_type, adset_name)\n    WHERE campaign_type = 'retargeting'\n    GROUP BY 1,2,3,4,5,6\n),\n\nasa_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE \n    --REGEXP_CONTAINS(campaign_name, r'\\(r\\)') AND\n    (\n        REGEXP_CONTAINS(campaign_name, r'\\(exact\\)|\u0437\u043e\u043e') OR\n        mediasource = 'Apple Search Ads'\n    )\n),\n\nasa AS (\n    SELECT\n        COALESCE(asa_convs.date, asa_cost.date) AS date,\n        COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) AS campaign_name,\n        COALESCE(asa_convs.platform, asa_cost.platform) AS platform,\n        COALESCE(asa_convs.promo_type, asa_cost.promo_type) AS promo_type,\n        COALESCE(asa_convs.auditory, asa_cost.auditory) AS auditory,\n        COALESCE(asa_convs.campaign_type, asa_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        'Apple Search Ads' AS source,\n    FROM asa_convs\n    FULL OUTER JOIN asa_cost\n    ON asa_convs.date = asa_cost.date \n    AND asa_convs.campaign_name = asa_cost.campaign_name\n    AND asa_convs.promo_type = asa_cost.promo_type\n    AND asa_convs.auditory = asa_cost.auditory\n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(spend,0) > 0\n    AND COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) != 'None'\n),\n\n----------------------- google -------------------------\n\ngoogle_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM {{ ref('stg_google_cab_sheets') }}\n    WHERE (campaign_type = 'retargeting'\n    OR campaign_name IN (\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]'\n            ))\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\ngoogle_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_uac')\n),\n\ngoogle AS (\n    SELECT\n        COALESCE(google_convs.date, google_cost.date) AS date,\n        COALESCE(google_convs.campaign_name, google_cost.campaign_name) AS campaign_name,\n        COALESCE(google_convs.platform, google_cost.platform) AS platform,\n        COALESCE(google_convs.promo_type, google_cost.promo_type) AS promo_type,\n        COALESCE(google_convs.auditory, google_cost.auditory) AS auditory,\n        COALESCE(google_convs.campaign_type, google_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        'Google Ads' AS source,\n    FROM google_convs\n    FULL OUTER JOIN google_cost\n    ON google_convs.date = google_cost.date \n    AND google_convs.campaign_name = google_cost.campaign_name\n    AND google_convs.promo_type = google_cost.promo_type\n    AND google_convs.auditory = google_cost.auditory\n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(spend,0) > 0\n    AND COALESCE(google_convs.campaign_name, google_cost.campaign_name) != 'None'\n),\n\n----------------------- Twitter -------------------------\n\ntw_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name') }} as promo_type,\n        {{ aud('campaign_name') }} AS auditory,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        0 AS clicks,\n        SUM(spend) AS spend\n    FROM {{ ref('stg_twitter_cab_sheets') }}\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_tw')\n    GROUP BY 1,2,3,4,5,6\n),\n\ntw_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_tw')\n),\n\ntw AS (\n    SELECT\n        COALESCE(tw_convs.date, tw_cost.date) AS date,\n        COALESCE(tw_convs.campaign_name, tw_cost.campaign_name) AS campaign_name,\n        COALESCE(tw_convs.platform, tw_cost.platform) AS platform,\n        COALESCE(tw_convs.promo_type, tw_cost.promo_type) AS promo_type,\n        COALESCE(tw_convs.auditory, tw_cost.auditory) AS auditory,\n        COALESCE(tw_convs.campaign_type, tw_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        'Twitter' AS source,\n    FROM tw_convs\n    FULL OUTER JOIN tw_cost\n    ON tw_convs.date = tw_cost.date \n    AND tw_convs.campaign_name = tw_cost.campaign_name\n    AND tw_convs.promo_type = tw_cost.promo_type\n    AND tw_convs.auditory = tw_cost.auditory\n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(spend,0) > 0\n    AND COALESCE(tw_convs.campaign_name, tw_cost.campaign_name) != 'None'\n),\n\n----------------------inapp----------------------------\n\nrate AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        platform,\n        rate_for_us\nFROM {{ ref('stg_rate_info') }}\nWHERE type = 'RTG'\n),\n\nlimits_table AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        limits\n    FROM {{ ref('stg_partner_limits') }}\n    WHERE type = 'RTG'\n),\n\ninapp_convs_without_cumulation AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        {{ partner('campaign_name') }} AS partner,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_inapp')\n),\n\ninapp_convs_with_cumulation AS (\n    SELECT\n        date,\n        campaign_name,\n        partner,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement,\n        SUM(purchase) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH) ORDER BY date, revenue)\n            AS cum_event_count,\n        SUM(purchase) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, revenue)\n            AS cum_event_count_by_prt\n    FROM inapp_convs_without_cumulation\n),\n\ninapp_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        inapp_convs_with_cumulation.partner,\n        platform,\n        promo_type,\n        auditory,\n        campaign_type,\n        re_engagement,\n        cum_event_count,\n        cum_event_count_by_prt,\n        limits,\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), purchase, 0) AS purchase,\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), revenue, 0) AS revenue,\n    FROM inapp_convs_with_cumulation\n    LEFT JOIN limits_table\n    ON inapp_convs_with_cumulation.partner = limits_table.partner \n    AND inapp_convs_with_cumulation.date BETWEEN limits_table.start_date AND limits_table.end_date\n),\n\ninapp AS (\n    SELECT\n        date,\n        campaign_name,\n        inapp_convs.platform AS platform,\n        promo_type,\n        auditory,\n        campaign_type,\n        0 AS impressions,\n        0 AS clicks,\n        SUM(COALESCE(re_engagement,0)) AS re_engagement,\n        SUM(COALESCE(revenue,0)) AS revenue,\n        SUM(COALESCE(purchase,0)) AS purchase,\n        SUM(\n            CASE\n                WHEN date BETWEEN '2021-10-01' AND '2021-10-31'\n                    AND cum_event_count >= 3000 THEN purchase * 140\n                WHEN date BETWEEN '2021-10-01' AND '2021-10-31'\n                    AND cum_event_count < 3000 THEN purchase * rate_for_us\n                WHEN date NOT BETWEEN '2021-10-01' AND '2021-10-31'\n                    AND cum_event_count_by_prt <= COALESCE(limits, 1000000)\n                    THEN purchase * rate_for_us\n                ELSE 0 END\n            ) AS spend,\n        'inapp' AS source,\n    FROM inapp_convs\n    LEFT JOIN rate\n    ON inapp_convs.partner = rate.partner \n    AND inapp_convs.date BETWEEN rate.start_date AND rate.end_date\n    AND inapp_convs.platform = rate.platform \n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) > 0\n    AND campaign_name != 'None'\n    GROUP BY 1,2,3,4,5,6,7,8\n),\n\n----------------------final----------------------------\n\nunions AS (\n    SELECT * FROM yandex\n    UNION ALL \n    SELECT * FROM vk\n    UNION ALL \n    SELECT * FROM mt\n    UNION ALL  \n    SELECT * FROM tiktok\n    UNION ALL\n    SELECT * FROM asa\n    UNION ALL\n    SELECT * FROM facebook\n    UNION ALL\n    SELECT * FROM google\n    UNION ALL\n    SELECT * FROM tw\n    UNION ALL\n    SELECT * FROM inapp\n),\n\nfinal AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        auditory,\n        impressions,\n        clicks,\n        re_engagement,\n        revenue,\n        purchase,\n        spend,\n        source,\n        {{ geo('campaign_name') }} AS geo\n    FROM unions\n)\n\nSELECT \n    date,\n    campaign_name,\n    platform,\n    promo_type,\n    auditory,\n    impressions,\n    clicks,\n    re_engagement,\n    revenue,\n    purchase,\n    spend,\n    source,\n    geo\nFROM final", "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.promo_type", "macro.perekrestokvprok.aud", "macro.perekrestokvprok.platform", "macro.perekrestokvprok.partner", "macro.perekrestokvprok.geo"], "nodes": ["model.perekrestokvprok.stg_af_rtg_partners_by_date", "model.perekrestokvprok.stg_facebook_cab_sheets", "model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.int_yandex_cab_meta", "model.perekrestokvprok.int_vk_cab_meta", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.stg_tiktok_cab_meta", "model.perekrestokvprok.stg_asa_cab_sheets", "model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.stg_google_cab_sheets", "model.perekrestokvprok.stg_twitter_cab_sheets", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_partner_limits"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_rtg_agg"], "unique_id": "model.perekrestokvprok.dim_rtg_agg", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "marts/dim_rtg_agg.sql", "original_file_path": "models/marts/dim_rtg_agg.sql", "name": "dim_rtg_agg", "alias": "dim_rtg_agg", "checksum": {"name": "sha256", "checksum": "b5e4a452c5ebba92bda9dcaaf96230ca0d8d9807f2017e9573139e7d349d640f"}, "tags": [], "refs": [["stg_af_rtg_partners_by_date"], ["stg_facebook_cab_sheets"], ["stg_facebook_cab_meta"], ["int_yandex_cab_meta"], ["int_vk_cab_meta"], ["int_mytarget_cab_meta"], ["stg_tiktok_cab_meta"], ["stg_asa_cab_sheets"], ["int_asa_cab_meta"], ["stg_google_cab_sheets"], ["stg_twitter_cab_sheets"], ["stg_rate_info"], ["stg_partner_limits"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652814262.2891934}, "model.perekrestokvprok.dim_ua": {"raw_sql": "/* \n\u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043b\u0443\u0447\u0448\u0435 \u0437\u0430\u0433\u043b\u044f\u043d\u0443\u0442\u044c \u0441\u044e\u0434\u0430: https://github.com/realweb-msk/perekrestokvprok-dbt\n\u0438\u043b\u0438 \u0441\u044e\u0434\u0430: https://brave-hermann-395dc3.netlify.app/#!/model/model.perekrestokvprok.dim_ua\n*/\n\n\nWITH af_conversions AS (\n    SELECT\n        date,\n        is_retargeting,\n        af_cid,\n        --adset_name,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\n        mediasource,\n        platform,\n        event_name,\n        uniq_event_count,\n        event_revenue,\n        event_count,\n        campaign_name\n    FROM  {{ ref('stg_af_client_data') }}\n    -- WHERE is_retargeting = FALSE\n    -- AND REGEXP_CONTAINS(campaign_name, 'realweb')\n),\n\n----------------------- facebook -------------------------\n\nfacebook AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\n        campaign_type,\n        {{ promo_search('campaign_name', 'adset_name', 'ad_name') }} as promo_search,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(IF(campaign_type = 'UA', installs, 0)) AS installs,\n        SUM(revenue) AS revenue,\n        SUM(purchase) AS purchase,\n        SUM(purchase) AS uniq_purchase,\n        SUM(first_purchase_revenue) AS first_purchase_revenue,\n        SUM(first_purchase) AS first_purchase,\n        SUM(first_purchase) AS uniq_first_purchase,\n        SUM(IF(campaign_type = 'UA', spend, 0)) AS spend,\n        'Facebook' AS source,\n        \"social\" as adv_type\n    FROM {{ ref('stg_facebook_cab_sheets') }}\n    --{{ ref('stg_facebook_cab_meta') }}\n    GROUP BY 1,2,3,4,5,6,7\n),\n\n----------------------- yandex -------------------------\n\nyandex_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\n        campaign_type,\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM {{ ref('int_yandex_cab_meta') }}\n    WHERE campaign_type = 'UA'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nyandex_convs_ua AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE is_retargeting = FALSE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_ya')\n    AND NOT REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nyandex_convs_rtg AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        'retargeting' AS campaign_type,\n        promo_search,\n        -- \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u043f\u043e\u043a\u0443\u043f\u043a\u0430\u043c \u0432 \u0440\u0435\u0442 \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u044f\u0445 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432 \u0434\u0430\u0448\u0431\u043e\u0440\u0434\u0435 UA\n        SUM(IF(event_name = 'install', 0,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE is_retargeting = TRUE --? \n    AND REGEXP_CONTAINS(campaign_name, r'realweb_ya')\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nyandex_convs AS (\n    SELECT * FROM yandex_convs_ua\n    UNION ALL \n    SELECT * FROM yandex_convs_rtg\n),\n\nyandex AS (\n    SELECT\n        COALESCE(yandex_convs.date, yandex_cost.date) AS date,\n        COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) AS campaign_name,\n        COALESCE(yandex_convs.platform, yandex_cost.platform) AS platform,\n        COALESCE(yandex_convs.promo_type, yandex_cost.promo_type) AS promo_type,\n        COALESCE(yandex_convs.geo, yandex_cost.geo) AS geo,\n        COALESCE(yandex_convs.campaign_type, yandex_cost.campaign_type) AS campaign_type,\n        COALESCE(yandex_convs.promo_search, yandex_cost.promo_search) AS promo_search,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        '\u042f\u043d\u0434\u0435\u043a\u0441.\u0414\u0438\u0440\u0435\u043a\u0442' AS source,\n        'context' AS adv_type\n    FROM yandex_convs\n    FULL OUTER JOIN yandex_cost\n    ON yandex_convs.date = yandex_cost.date \n    AND yandex_convs.campaign_name = yandex_cost.campaign_name\n    AND yandex_convs.promo_type = yandex_cost.promo_type\n    AND yandex_convs.geo = yandex_cost.geo\n    AND yandex_convs.promo_search = yandex_cost.promo_search\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) != 'None'\n),\n\n----------------------- mytarget -------------------------\n\nmt_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\n        campaign_type,\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM {{ ref('int_mytarget_cab_meta') }}\n    WHERE campaign_type = 'UA'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nmt_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE is_retargeting = FALSE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_mt')\n    AND REGEXP_CONTAINS(campaign_name, r'new')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nmt AS (\n    SELECT\n        COALESCE(mt_convs.date, mt_cost.date) AS date,\n        COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) AS campaign_name,\n        COALESCE(mt_convs.platform, mt_cost.platform) AS platform,\n        COALESCE(mt_convs.promo_type, mt_cost.promo_type) AS promo_type,\n        COALESCE(mt_convs.geo, mt_cost.geo) AS geo,\n        COALESCE(mt_convs.campaign_type, mt_cost.campaign_type) AS campaign_type,\n        COALESCE(mt_convs.promo_search, mt_cost.promo_search) AS promo_search,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        'MyTarget' AS source,\n        'social' AS adv_type\n    FROM mt_convs\n    FULL OUTER JOIN mt_cost\n    ON mt_convs.date = mt_cost.date \n    AND mt_convs.campaign_name = mt_cost.campaign_name\n    AND mt_convs.promo_type = mt_cost.promo_type\n    AND mt_convs.geo = mt_cost.geo\n    AND mt_convs.promo_search = mt_cost.promo_search\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) != 'None'\n),\n\n----------------------- tiktok -------------------------\n\ntiktok_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\n        campaign_type,\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\n        -- \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u043f\u043e\u043a\u0443\u043f\u043a\u0430\u043c \u0432 \u0440\u0435\u0442 \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u044f\u0445 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432 \u0434\u0430\u0448\u0431\u043e\u0440\u0434\u0435 UA\n        SUM(IF(campaign_type = 'UA',impressions,0)) AS impressions,\n        SUM(IF(campaign_type = 'UA',clicks,0)) AS clicks,\n        SUM(IF(campaign_type = 'UA',spend,0)) AS spend,\n        SUM(purchase) AS purchase,\n        SUM(first_purchase) AS first_purchase,\n        SUM(SAFE_CAST(app_install AS INT64)) AS app_install\n    FROM {{ ref('stg_tiktok_cab_meta') }}\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\ntiktok_convs AS (\n    SELECT  \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        --SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        --SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE is_retargeting = FALSE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_tiktok')\n    AND NOT REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\ntiktok AS (\n    SELECT\n        COALESCE(tiktok_convs.date, tiktok_cost.date) AS date,\n        COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) AS campaign_name,\n        COALESCE(tiktok_convs.platform, tiktok_cost.platform) AS platform,\n        COALESCE(tiktok_convs.promo_type, tiktok_cost.promo_type) AS promo_type,\n        COALESCE(tiktok_convs.geo, tiktok_cost.geo) AS geo,\n        COALESCE(tiktok_convs.campaign_type, tiktok_cost.campaign_type) AS campaign_type,\n        COALESCE(tiktok_convs.promo_search, tiktok_cost.promo_search) AS promo_search,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs, app_install, 0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        'TikTok' AS source,\n        'social' AS adv_type\n    FROM tiktok_convs\n    FULL OUTER JOIN tiktok_cost\n    ON tiktok_convs.date = tiktok_cost.date \n    AND tiktok_convs.campaign_name = tiktok_cost.campaign_name\n    AND tiktok_convs.promo_type = tiktok_cost.promo_type\n    AND tiktok_convs.geo = tiktok_cost.geo\n    AND tiktok_convs.promo_search = tiktok_cost.promo_search\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) != 'None'\n),\n\n----------------------- apple search ads -------------------------\n\nasa_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        'ios' as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\n        campaign_type,\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\n        SUM(meta.impressions) AS impressions,\n        SUM(sheet.clicks) AS clicks,\n        SUM(sheet.spend) AS spend\n    FROM {{ ref('stg_asa_cab_sheets') }} sheet\n    --{{ ref('int_asa_cab_meta') }}\n    LEFT JOIN {{ ref('int_asa_cab_meta') }} meta\n    USING(date, campaign_name, campaign_type, adset_name)\n    WHERE campaign_type = 'UA'\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nasa_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE NOT REGEXP_CONTAINS(campaign_name, r'\\(r\\)')\n    AND (\n        REGEXP_CONTAINS(campaign_name, r'\\(exact\\)|\u0437\u043e\u043e') OR\n        mediasource = 'Apple Search Ads'\n    )\n    AND is_retargeting = FALSE\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nasa AS (\n    SELECT\n        COALESCE(asa_convs.date, asa_cost.date) AS date,\n        COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) AS campaign_name,\n        COALESCE(asa_convs.platform, asa_cost.platform) AS platform,\n        COALESCE(asa_convs.promo_type, asa_cost.promo_type) AS promo_type,\n        COALESCE(asa_convs.geo, asa_cost.geo) AS geo,\n        COALESCE(asa_convs.campaign_type, asa_cost.campaign_type) AS campaign_type,\n        COALESCE(asa_convs.promo_search, asa_cost.promo_search) AS promo_search,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        'Apple Search Ads' AS source,\n        'context' AS adv_type\n    FROM asa_convs\n    FULL OUTER JOIN asa_cost\n    ON asa_convs.date = asa_cost.date \n    AND asa_convs.campaign_name = asa_cost.campaign_name\n    AND asa_convs.promo_type = asa_cost.promo_type\n    AND asa_convs.geo = asa_cost.geo\n    AND asa_convs.promo_search = asa_cost.promo_search\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) != 'None'\n),\n\n----------------------- google -------------------------\n\ngoogle_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\n        campaign_type,\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend,\n        SUM(IF({{ platform('campaign_name') }} = 'ios', installs, NULL)) AS installs\n    FROM {{ ref('stg_google_cab_sheets') }}\n    WHERE campaign_type = 'UA'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    AND campaign_name NOT IN (\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\ngoogle_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_uac_')\n    AND is_retargeting = FALSE\n    AND campaign_name NOT IN (\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\ngoogle AS (\n    SELECT\n        COALESCE(google_convs.date, google_cost.date) AS date,\n        COALESCE(google_convs.campaign_name, google_cost.campaign_name) AS campaign_name,\n        COALESCE(google_convs.platform, google_cost.platform) AS platform,\n        COALESCE(google_convs.promo_type, google_cost.promo_type) AS promo_type,\n        COALESCE(google_convs.geo, google_cost.geo) AS geo,\n        COALESCE(google_convs.campaign_type, google_cost.campaign_type) AS campaign_type,\n        COALESCE(google_convs.promo_search, google_cost.promo_search) AS promo_search,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(google_cost.installs,google_convs.installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        'Google Ads' AS source,\n        'context' AS adv_type\n    FROM google_convs\n    FULL OUTER JOIN google_cost\n    ON google_convs.date = google_cost.date \n    AND google_convs.campaign_name = google_cost.campaign_name\n    AND google_convs.promo_type = google_cost.promo_type\n    AND google_convs.geo = google_cost.geo\n    AND google_convs.promo_search = google_cost.promo_search\n    WHERE \n        COALESCE(google_cost.installs,google_convs.installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(google_convs.campaign_name, google_cost.campaign_name) != 'None'\n),\n\n----------------------- huawei -------------------------\n\nhuawei_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name') }} as promo_type,\n        {{ geo('campaign_name') }} AS geo,\n        {{ promo_search('campaign_name') }} as promo_search,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM {{ ref('stg_huawei_cab_sheets') }}\n    WHERE campaign_type = 'UA'\n    AND status != \"Deleted\"\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nhuawei_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE is_retargeting = FALSE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_hw')\n    AND REGEXP_CONTAINS(campaign_name, r'new')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nhuawei AS (\n    SELECT\n        COALESCE(huawei_convs.date, huawei_cost.date) AS date,\n        COALESCE(huawei_convs.campaign_name, huawei_cost.campaign_name) AS campaign_name,\n        COALESCE(huawei_convs.platform, huawei_cost.platform) AS platform,\n        COALESCE(huawei_convs.promo_type, huawei_cost.promo_type) AS promo_type,\n        COALESCE(huawei_convs.geo, huawei_cost.geo) AS geo,\n        COALESCE(huawei_convs.campaign_type, huawei_cost.campaign_type) AS campaign_type,\n        COALESCE(huawei_convs.promo_search, huawei_cost.promo_search) AS promo_search,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        'Huawei' AS source,\n        'context' AS adv_type\n    FROM huawei_convs\n    FULL OUTER JOIN huawei_cost\n    ON huawei_convs.date = huawei_cost.date \n    AND huawei_convs.campaign_name = huawei_cost.campaign_name\n    AND huawei_convs.promo_type = huawei_cost.promo_type\n    AND huawei_convs.geo = huawei_cost.geo\n    AND huawei_convs.promo_search = huawei_cost.promo_search\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(huawei_convs.campaign_name, huawei_cost.campaign_name) != 'None'\n),\n\n----------------------- vk -------------------------\n\nvk_cost_pre AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name') }} as promo_type,\n        {{ geo('campaign_name') }} AS geo,\n        {{ promo_search('campaign_name') }} as promo_search,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM {{ ref('int_vk_cab_meta') }}\n    WHERE campaign_type = 'UA'\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nvk_cost AS (\n    SELECT * FROM vk_cost_pre\n    UNION ALL\n    SELECT * FROM {{ source('agg_data', 'vk_manual_cost') }} -- \u0440\u0443\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n),\n\nvk_convs_pre AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE is_retargeting = FALSE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_vk')\n    AND REGEXP_CONTAINS(campaign_name, r'new')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nvk_convs AS (\n    SELECT * FROM vk_convs_pre\n    UNION ALL \n    SELECT * FROM {{ source('agg_data', 'vk_manual_data') }} -- \u0440\u0443\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n),\n\nvk AS (\n    SELECT\n        COALESCE(vk_convs.date, vk_cost.date) AS date,\n        COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) AS campaign_name,\n        COALESCE(vk_convs.platform, vk_cost.platform) AS platform,\n        COALESCE(vk_convs.promo_type, vk_cost.promo_type) AS promo_type,\n        COALESCE(vk_convs.geo, vk_cost.geo) AS geo,\n        COALESCE(vk_convs.campaign_type, vk_cost.campaign_type) AS campaign_type,\n        COALESCE(vk_convs.promo_search, vk_cost.promo_search) AS promo_search,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        '\u0412\u041a' AS source,\n        'social' AS adv_type\n    FROM vk_convs\n    FULL OUTER JOIN vk_cost\n    ON vk_convs.date = vk_cost.date \n    AND vk_convs.campaign_name = vk_cost.campaign_name\n    AND vk_convs.promo_type = vk_cost.promo_type\n    AND vk_convs.geo = vk_cost.geo\n    AND vk_convs.promo_search = vk_cost.promo_search\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) != 'None'\n),\n\n----------------------inapp----------------------------\n\nrate AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        platform,\n        rate_for_us\n    FROM {{ ref('stg_rate_info') }}\n    WHERE type = 'UA'\n    AND source = 'inapp'\n),\n\nlimits_table AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        limits\n    FROM {{ ref('stg_partner_limits') }}\n    WHERE type = 'UA'\n    AND source = 'inapp'\n),\n\ninapp_convs_without_cumulation AS (\n    SELECT \n        date,\n        campaign_name,\n        {{ partner('campaign_name') }} AS partner,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_inapp')\n    AND is_retargeting = FALSE\n    GROUP BY 1,2,3,4,5,6,7,8\n),\n\ninapp_convs_with_cumulation AS (\n    SELECT\n        date,\n        campaign_name,\n        partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        installs,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n        SUM(first_purchase) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, first_purchase_revenue)\n            AS cum_event_count_by_prt\n    FROM inapp_convs_without_cumulation\n),\n\ninapp_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        inapp_convs_with_cumulation.partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        installs,\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), first_purchase_revenue, 0) AS first_purchase_revenue,\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), first_purchase, 0) AS first_purchase,\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), uniq_first_purchase, 0) AS uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n    FROM inapp_convs_with_cumulation\n    LEFT JOIN limits_table\n    ON inapp_convs_with_cumulation.partner = limits_table.partner \n    AND inapp_convs_with_cumulation.date BETWEEN limits_table.start_date AND limits_table.end_date\n),\n\ninapp AS (\n    SELECT\n        date,\n        campaign_name,\n        inapp_convs.platform AS platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        0 AS impressions,\n        0 AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(first_purchase * rate_for_us,0)  AS spend,\n        'inapp' AS source,\n        'inapp' AS adv_type\n    FROM inapp_convs\n    LEFT JOIN rate\n    ON inapp_convs.partner = rate.partner \n    AND inapp_convs.date BETWEEN rate.start_date AND rate.end_date\n    AND inapp_convs.platform = rate.platform \n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(first_purchase * rate_for_us,0) > 0\n    AND campaign_name != 'None'\n),\n\n----------------------Xiaomi----------------------------\n\nx_rate AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        platform,\n        rate_for_us\n    FROM {{ ref('stg_rate_info') }}\n    WHERE type = 'UA'\n    AND source = 'Xiaomi'\n),\n\nx_limits_table AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        limits\n    FROM {{ ref('stg_partner_limits') }}\n    WHERE type = 'UA'\n    AND source = 'Xiaomi'\n),\n\nxiaomi_convs_without_cumulation AS (\n    SELECT \n        date,\n        campaign_name,\n        {{ partner('campaign_name') }} AS partner,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_xiaomi')\n    AND is_retargeting = FALSE\n    GROUP BY 1,2,3,4,5,6,7,8\n),\n\nxiaomi_convs_with_cumulation AS (\n    SELECT\n        date,\n        campaign_name,\n        partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        installs,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n        SUM(installs) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, installs)\n            AS cum_event_count_by_prt\n    FROM xiaomi_convs_without_cumulation\n),\n\nxiaomi_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        xiaomi_convs_with_cumulation.partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), installs, 0) AS installs,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n    FROM xiaomi_convs_with_cumulation\n    LEFT JOIN x_limits_table\n    ON xiaomi_convs_with_cumulation.partner = x_limits_table.partner \n    AND xiaomi_convs_with_cumulation.date BETWEEN x_limits_table.start_date AND x_limits_table.end_date\n),\n\nxiaomi AS (\n    SELECT\n        date,\n        campaign_name,\n        xiaomi_convs.platform AS platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        0 AS impressions,\n        0 AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(installs * rate_for_us,0)  AS spend,\n        'Xiaomi' AS source,\n        'Xiaomi' AS adv_type\n    FROM xiaomi_convs\n    LEFT JOIN x_rate\n    ON xiaomi_convs.partner = x_rate.partner \n    AND xiaomi_convs.date BETWEEN x_rate.start_date AND x_rate.end_date\n    AND xiaomi_convs.platform = x_rate.platform \n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(installs * rate_for_us,0) > 0\n    AND campaign_name != 'None'\n),\n\n----------------------final----------------------------\n\nunions AS (\n    SELECT * FROM yandex\n    UNION ALL \n    SELECT * FROM mt\n    UNION ALL  \n    SELECT * FROM tiktok\n    UNION ALL\n    SELECT * FROM asa\n    UNION ALL\n    SELECT * FROM facebook\n    UNION ALL\n    SELECT * FROM google\n    UNION ALL\n    SELECT * FROM huawei\n    UNION ALL\n    SELECT * FROM vk\n    UNION ALL\n    SELECT * FROM inapp\n    UNION ALL\n    SELECT * FROM xiaomi\n),\n\nfinal AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        impressions,\n        clicks,\n        installs,\n        revenue,\n        purchase,\n        uniq_purchase,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        spend,\n        source,\n        {{ conversion_source_type('campaign_name', 'source') }} AS conversion_source_type,\n        adv_type\n    FROM unions\n)\n\nSELECT \n    date,\n    campaign_name,\n    platform,\n    promo_type,\n    geo,\n    campaign_type,\n    promo_search,\n    impressions,\n    clicks,\n    installs,\n    revenue,\n    purchase,\n    uniq_purchase,\n    first_purchase_revenue,\n    first_purchase,\n    uniq_first_purchase,\n    spend,\n    source,\n    conversion_source_type,\n    adv_type\nFROM final", "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.promo_type", "macro.perekrestokvprok.geo", "macro.perekrestokvprok.promo_search", "macro.perekrestokvprok.platform", "macro.perekrestokvprok.partner", "macro.perekrestokvprok.conversion_source_type"], "nodes": ["source.perekrestokvprok.agg_data.vk_manual_cost", "source.perekrestokvprok.agg_data.vk_manual_data", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_facebook_cab_sheets", "model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.int_yandex_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_tiktok_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_asa_cab_sheets", "model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_google_cab_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_huawei_cab_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.int_vk_cab_meta", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_partner_limits", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_partner_limits"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_ua"], "unique_id": "model.perekrestokvprok.dim_ua", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "marts/dim_ua.sql", "original_file_path": "models/marts/dim_ua.sql", "name": "dim_ua", "alias": "dim_ua", "checksum": {"name": "sha256", "checksum": "7c9c796e5097d07027b091311ad3acd4a3374089b8ba9862bb36394beec0e9f8"}, "tags": [], "refs": [["stg_promo_dict_sheets"], ["stg_af_client_data"], ["stg_promo_dict_sheets"], ["stg_facebook_cab_sheets"], ["stg_facebook_cab_meta"], ["stg_promo_dict_sheets"], ["int_yandex_cab_meta"], ["stg_promo_dict_sheets"], ["int_mytarget_cab_meta"], ["stg_promo_dict_sheets"], ["stg_tiktok_cab_meta"], ["stg_promo_dict_sheets"], ["stg_asa_cab_sheets"], ["int_asa_cab_meta"], ["int_asa_cab_meta"], ["stg_promo_dict_sheets"], ["stg_google_cab_sheets"], ["stg_promo_dict_sheets"], ["stg_huawei_cab_sheets"], ["stg_promo_dict_sheets"], ["int_vk_cab_meta"], ["stg_rate_info"], ["stg_partner_limits"], ["stg_rate_info"], ["stg_partner_limits"]], "sources": [["agg_data", "vk_manual_cost"], ["agg_data", "vk_manual_data"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652814262.311968}, "model.perekrestokvprok.dim_ua_agg": {"raw_sql": "/* \n\u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043b\u0443\u0447\u0448\u0435 \u0437\u0430\u0433\u043b\u044f\u043d\u0443\u0442\u044c \u0441\u044e\u0434\u0430: https://github.com/realweb-msk/perekrestokvprok-dbt\n\u0438\u043b\u0438 \u0441\u044e\u0434\u0430: https://brave-hermann-395dc3.netlify.app/#!/model/model.perekrestokvprok.dim_ua_agg\n*/\n\n\nWITH af_conversions AS (\n    SELECT\n        date,\n        media_source AS mediasource,\n        campaign_name,\n        report_type AS campaign_type,\n        platform,\n        {{ promo_type('campaign_name') }} as promo_type,\n        {{ geo('campaign_name') }} AS geo,\n        impressions,\n        clicks,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM  {{ ref('stg_af_ua_partners_by_date') }}\n),\n\n----------------------- facebook -------------------------\n\nfacebook_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM {{ ref('stg_facebook_cab_sheets') }}\n    --{{ ref('stg_facebook_cab_meta') }}\n    WHERE campaign_type = 'UA'\n    GROUP BY 1,2,3,4,5,6\n),\n\nfacebook_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_fb')\n),\n\nfacebook AS (\n    SELECT\n        COALESCE(facebook_convs.date, facebook_cost.date) AS date,\n        COALESCE(facebook_convs.campaign_name, facebook_cost.campaign_name) AS campaign_name,\n        COALESCE(facebook_convs.platform, facebook_cost.platform) AS platform,\n        COALESCE(facebook_convs.promo_type, facebook_cost.promo_type) AS promo_type,\n        COALESCE(facebook_convs.geo, facebook_cost.geo) AS geo,\n        COALESCE(facebook_convs.campaign_type, facebook_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        'Facebook' AS source,\n        'social' AS adv_type\n    FROM facebook_convs\n    FULL OUTER JOIN facebook_cost\n    ON facebook_convs.date = facebook_cost.date \n    AND facebook_convs.campaign_name = facebook_cost.campaign_name\n    AND facebook_convs.promo_type = facebook_cost.promo_type\n    AND facebook_convs.geo = facebook_cost.geo\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(facebook_convs.campaign_name, facebook_cost.campaign_name) != 'None'\n),\n\n----------------------- yandex -------------------------\n\nyandex_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM {{ ref('int_yandex_cab_meta') }}\n    WHERE campaign_type = 'UA'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nyandex_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_ya')\n    --AND NOT REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n),\n\nyandex AS (\n    SELECT\n        COALESCE(yandex_convs.date, yandex_cost.date) AS date,\n        COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) AS campaign_name,\n        COALESCE(yandex_convs.platform, yandex_cost.platform) AS platform,\n        COALESCE(yandex_convs.promo_type, yandex_cost.promo_type) AS promo_type,\n        COALESCE(yandex_convs.geo, yandex_cost.geo) AS geo,\n        COALESCE(yandex_convs.campaign_type, yandex_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        '\u042f\u043d\u0434\u0435\u043a\u0441.\u0414\u0438\u0440\u0435\u043a\u0442' AS source,\n        'context' AS adv_type\n    FROM yandex_convs\n    FULL OUTER JOIN yandex_cost\n    ON yandex_convs.date = yandex_cost.date \n    AND yandex_convs.campaign_name = yandex_cost.campaign_name\n    AND yandex_convs.promo_type = yandex_cost.promo_type\n    AND yandex_convs.geo = yandex_cost.geo\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) != 'None'\n),\n\n----------------------- mytarget -------------------------\n\nmt_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM {{ ref('int_mytarget_cab_meta') }}\n    WHERE campaign_type = 'UA'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nmt_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_mt')\n    --AND REGEXP_CONTAINS(campaign_name, r'new')\n),\n\nmt AS (\n    SELECT\n        COALESCE(mt_convs.date, mt_cost.date) AS date,\n        COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) AS campaign_name,\n        COALESCE(mt_convs.platform, mt_cost.platform) AS platform,\n        COALESCE(mt_convs.promo_type, mt_cost.promo_type) AS promo_type,\n        COALESCE(mt_convs.geo, mt_cost.geo) AS geo,\n        COALESCE(mt_convs.campaign_type, mt_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        'MyTarget' AS source,\n        'social' AS adv_type\n    FROM mt_convs\n    FULL OUTER JOIN mt_cost\n    ON mt_convs.date = mt_cost.date \n    AND mt_convs.campaign_name = mt_cost.campaign_name\n    AND mt_convs.promo_type = mt_cost.promo_type\n    AND mt_convs.geo = mt_cost.geo\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) != 'None'\n),\n\n----------------------- tiktok -------------------------\n\ntiktok_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\n        campaign_type,\n        SUM(IF(campaign_type = 'UA',impressions,0)) AS impressions,\n        SUM(IF(campaign_type = 'UA',clicks,0)) AS clicks,\n        SUM(IF(campaign_type = 'UA',spend,0)) AS spend,\n        --SUM(purchase) AS purchase,\n        --SUM(first_purchase) AS first_purchase\n    FROM {{ ref('stg_tiktok_cab_meta') }}\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\ntiktok_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_tiktok')\n    --AND NOT REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n),\n\ntiktok AS (\n    SELECT\n        COALESCE(tiktok_convs.date, tiktok_cost.date) AS date,\n        COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) AS campaign_name,\n        COALESCE(tiktok_convs.platform, tiktok_cost.platform) AS platform,\n        COALESCE(tiktok_convs.promo_type, tiktok_cost.promo_type) AS promo_type,\n        COALESCE(tiktok_convs.geo, tiktok_cost.geo) AS geo,\n        COALESCE(tiktok_convs.campaign_type, tiktok_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        'TikTok' AS source,\n        'social' AS adv_type\n    FROM tiktok_convs\n    FULL OUTER JOIN tiktok_cost\n    ON tiktok_convs.date = tiktok_cost.date \n    AND tiktok_convs.campaign_name = tiktok_cost.campaign_name\n    AND tiktok_convs.promo_type = tiktok_cost.promo_type\n    AND tiktok_convs.geo = tiktok_cost.geo\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) != 'None'\n),\n\n----------------------- apple search ads -------------------------\n\nasa_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        'ios' as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\n        campaign_type,\n        SUM(meta.impressions) AS impressions,\n        SUM(sheet.clicks) AS clicks,\n        SUM(sheet.spend) AS spend\n    FROM {{ ref('stg_asa_cab_sheets') }} sheet\n    --{{ ref('int_asa_cab_meta') }}\n    LEFT JOIN {{ ref('int_asa_cab_meta') }} meta\n    USING(date, campaign_name, campaign_type, adset_name)\n    WHERE campaign_type = 'UA'\n    GROUP BY 1,2,3,4,5,6\n),\n\nasa_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM af_conversions\n    WHERE \n    --NOT REGEXP_CONTAINS(campaign_name, r'\\(r\\)') AND \n    (\n        REGEXP_CONTAINS(campaign_name, r'\\(exact\\)|\u0437\u043e\u043e') OR\n        mediasource = 'Apple Search Ads'\n    )\n),\n\nasa AS (\n    SELECT\n        COALESCE(asa_convs.date, asa_cost.date) AS date,\n        COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) AS campaign_name,\n        COALESCE(asa_convs.platform, asa_cost.platform) AS platform,\n        COALESCE(asa_convs.promo_type, asa_cost.promo_type) AS promo_type,\n        COALESCE(asa_convs.geo, asa_cost.geo) AS geo,\n        COALESCE(asa_convs.campaign_type, asa_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        'Apple Search Ads' AS source,\n        'context' AS adv_type\n    FROM asa_convs\n    FULL OUTER JOIN asa_cost\n    ON asa_convs.date = asa_cost.date \n    AND asa_convs.campaign_name = asa_cost.campaign_name\n    AND asa_convs.promo_type = asa_cost.promo_type\n    AND asa_convs.geo = asa_cost.geo\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) != 'None'\n),\n\n----------------------- google -------------------------\n\ngoogle_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend,\n        SUM(IF({{ platform('campaign_name') }} = 'ios', installs, NULL)) AS installs\n    FROM {{ ref('stg_google_cab_sheets') }}\n    WHERE campaign_type = 'UA'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    AND campaign_name NOT IN (\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]')\n    GROUP BY 1,2,3,4,5,6\n),\n\ngoogle_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_uac')\n    --AND campaign_name NOT IN (\n    --        'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\n    --        'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]')\n),\n\ngoogle AS (\n    SELECT\n        COALESCE(google_convs.date, google_cost.date) AS date,\n        COALESCE(google_convs.campaign_name, google_cost.campaign_name) AS campaign_name,\n        COALESCE(google_convs.platform, google_cost.platform) AS platform,\n        COALESCE(google_convs.promo_type, google_cost.promo_type) AS promo_type,\n        COALESCE(google_convs.geo, google_cost.geo) AS geo,\n        COALESCE(google_convs.campaign_type, google_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(google_cost.installs,google_convs.installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        'Google Ads' AS source,\n        'context' AS adv_type\n    FROM google_convs\n    FULL OUTER JOIN google_cost\n    ON google_convs.date = google_cost.date \n    AND google_convs.campaign_name = google_cost.campaign_name\n    AND google_convs.promo_type = google_cost.promo_type\n    AND google_convs.geo = google_cost.geo\n    WHERE \n        COALESCE(google_cost.installs,google_convs.installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(google_convs.campaign_name, google_cost.campaign_name) != 'None'\n),\n\n----------------------- huawei -------------------------\n\nhuawei_cost AS (\n    ---- TODO: \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0430 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043a\u043e\u0441\u0442\u043e\u0432 -----\n    SELECT\n        DATE('2010-12-31') date,\n        campaign_name,\n        {{ platform('campaign_name') }} as platform,\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM {{ ref('int_mytarget_cab_meta') }}\n    WHERE campaign_type = 'UA'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nhuawei_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_hw')\n),\n\nhuawei AS (\n    SELECT\n        COALESCE(huawei_convs.date, huawei_cost.date) AS date,\n        COALESCE(huawei_convs.campaign_name, huawei_cost.campaign_name) AS campaign_name,\n        COALESCE(huawei_convs.platform, huawei_cost.platform) AS platform,\n        COALESCE(huawei_convs.promo_type, huawei_cost.promo_type) AS promo_type,\n        COALESCE(huawei_convs.geo, huawei_cost.geo) AS geo,\n        COALESCE(huawei_convs.campaign_type, huawei_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        'Huawei' AS source,\n        'context' AS adv_type\n    FROM huawei_convs\n    FULL OUTER JOIN huawei_cost\n    ON huawei_convs.date = huawei_cost.date \n    AND huawei_convs.campaign_name = huawei_cost.campaign_name\n    AND huawei_convs.promo_type = huawei_cost.promo_type\n    AND huawei_convs.geo = huawei_cost.geo\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(huawei_convs.campaign_name, huawei_cost.campaign_name) != 'None'\n),\n\n----------------------inapp----------------------------\n\nrate AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        platform,\n        rate_for_us\nFROM {{ ref('stg_rate_info') }}\nWHERE type = 'UA'\n),\n\nlimits_table AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        limits\n    FROM {{ ref('stg_partner_limits') }}\n    WHERE type = 'UA'\n),\n\ninapp_convs_without_cumulation AS (\n    SELECT \n        date,\n        campaign_name,\n        {{ partner('campaign_name') }} AS partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_inapp')\n),\n\ninapp_convs_with_cumulation AS (\n    SELECT\n        date,\n        campaign_name,\n        partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n        SUM(first_purchase) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, first_purchase_revenue)\n            AS cum_event_count_by_prt\n    FROM inapp_convs_without_cumulation\n),\n\ninapp_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        inapp_convs_with_cumulation.partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), first_purchase_revenue, 0) AS first_purchase_revenue,\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), first_purchase, 0) AS first_purchase,\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), uniq_first_purchase, 0) AS uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n    FROM inapp_convs_with_cumulation\n    LEFT JOIN limits_table\n    ON inapp_convs_with_cumulation.partner = limits_table.partner \n    AND inapp_convs_with_cumulation.date BETWEEN limits_table.start_date AND limits_table.end_date\n),\n\ninapp AS (\n    SELECT\n        date,\n        campaign_name,\n        inapp_convs.platform AS platform,\n        promo_type,\n        geo,\n        campaign_type,\n        0 AS impressions,\n        0 AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(first_purchase * rate_for_us,0)  AS spend,\n        'inapp' AS source,\n        'inapp' AS adv_type\n    FROM inapp_convs\n    LEFT JOIN rate\n    ON inapp_convs.partner = rate.partner \n    AND inapp_convs.date BETWEEN rate.start_date AND rate.end_date\n    AND inapp_convs.platform = rate.platform \n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(first_purchase * rate_for_us,0) > 0\n    AND campaign_name != 'None'\n),\n\n----------------------final----------------------------\n\nunions AS (\n    SELECT * FROM yandex\n    UNION ALL \n    SELECT * FROM mt\n    UNION ALL  \n    SELECT * FROM tiktok\n    UNION ALL\n    SELECT * FROM asa\n    UNION ALL\n    SELECT * FROM facebook\n    UNION ALL\n    SELECT * FROM google\n    UNION ALL\n    SELECT * FROM huawei\n    WHERE date != '2010-12-31'\n    UNION ALL\n    SELECT * FROM inapp\n),\n\nfinal AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        impressions,\n        clicks,\n        installs,\n        revenue,\n        purchase,\n        uniq_purchase,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        spend,\n        source,\n        {{ conversion_source_type('campaign_name', 'source') }} AS conversion_source_type,\n        adv_type\n    FROM unions\n)\n\nSELECT \n    date,\n    campaign_name,\n    platform,\n    promo_type,\n    geo,\n    campaign_type,\n    impressions,\n    clicks,\n    installs,\n    revenue,\n    purchase,\n    uniq_purchase,\n    first_purchase_revenue,\n    first_purchase,\n    uniq_first_purchase,\n    spend,\n    source,\n    conversion_source_type,\n    adv_type\nFROM final", "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.promo_type", "macro.perekrestokvprok.geo", "macro.perekrestokvprok.platform", "macro.perekrestokvprok.partner", "macro.perekrestokvprok.conversion_source_type"], "nodes": ["model.perekrestokvprok.stg_af_ua_partners_by_date", "model.perekrestokvprok.stg_facebook_cab_sheets", "model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.int_yandex_cab_meta", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.stg_tiktok_cab_meta", "model.perekrestokvprok.stg_asa_cab_sheets", "model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.stg_google_cab_sheets", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_partner_limits"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_ua_agg"], "unique_id": "model.perekrestokvprok.dim_ua_agg", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "marts/dim_ua_agg.sql", "original_file_path": "models/marts/dim_ua_agg.sql", "name": "dim_ua_agg", "alias": "dim_ua_agg", "checksum": {"name": "sha256", "checksum": "9bb87c87cd8b31c30a34aaba184ad81f5e33305040bb1b3fc1b4719c4652382f"}, "tags": [], "refs": [["stg_af_ua_partners_by_date"], ["stg_facebook_cab_sheets"], ["stg_facebook_cab_meta"], ["int_yandex_cab_meta"], ["int_mytarget_cab_meta"], ["stg_tiktok_cab_meta"], ["stg_asa_cab_sheets"], ["int_asa_cab_meta"], ["int_asa_cab_meta"], ["stg_google_cab_sheets"], ["int_mytarget_cab_meta"], ["stg_rate_info"], ["stg_partner_limits"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652814262.346833}, "model.perekrestokvprok.dim_ua_crm": {"raw_sql": "WITH af_orders AS (\n    SELECT\n        REGEXP_EXTRACT(REGEXP_REPLACE(event_value,'\"',''), 'af_order_id:(.*?),') AS order_id\n    FROM  {{ ref('stg_af_client_data') }}\n    WHERE event_name = \"af_purchase\"\n),\n\nclient_data AS (\n    SELECT\n        order_date,\n        promo_name,\n        '-' adset_name,\n        promo_code,\n        order_id,\n        platform,\n        revenue,\n        order_count\n    FROM {{ ref('stg_promocode_client_data') }}\n),\n\npromo_data AS (\n    SELECT\n        date_start,\n        date_end,\n        promocode,\n        type,\n        channel\n    FROM {{ ref('stg_promo_sheets') }}\n),\n\nfinal AS (\n    SELECT\n        order_date AS date,\n        promo_name AS campaign_name,\n        platform,\n        {{ promo_type('promo_name', 'adset_name') }} as promo_type,\n        {{ geo('promo_name', 'adset_name') }} AS geo,\n        'UA' AS campaign_type,\n        0 AS impressions,\n        0 AS clicks,\n        0 AS installs,\n        SUM(revenue) AS revenue,\n        SUM(order_count) AS purchase,\n        0 AS uniq_purchase,\n        0 AS first_purchase_revenue,\n        0 AS first_purchase,\n        0 AS uniq_first_purchase,\n        0 AS spend,\n        channel AS source,\n        'CRM' AS conversion_source_type,\n        '-' AS adv_type\n    FROM client_data\n    LEFT JOIN promo_data\n    ON LOWER(client_data.promo_code) = LOWER(promo_data.promocode)\n    AND DATE(client_data.order_date) BETWEEN promo_data.date_start AND promo_data.date_end\n    WHERE type = 'uac'\n    AND order_id NOT IN (\n        SELECT DISTINCT order_id\n        FROM af_orders\n    )\n    GROUP BY 1,2,3,4,5,17\n)\n\nSELECT \n    date,\n    campaign_name,\n    platform,\n    promo_type,\n    geo,\n    campaign_type,\n    impressions,\n    clicks,\n    installs,\n    revenue,\n    purchase,\n    uniq_purchase,\n    first_purchase_revenue,\n    first_purchase,\n    uniq_first_purchase,\n    spend,\n    source,\n    conversion_source_type,\n    adv_type\nFROM final", "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.promo_type", "macro.perekrestokvprok.geo"], "nodes": ["model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_promocode_client_data", "model.perekrestokvprok.stg_promo_sheets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_ua_crm"], "unique_id": "model.perekrestokvprok.dim_ua_crm", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "marts/dim_ua_crm.sql", "original_file_path": "models/marts/dim_ua_crm.sql", "name": "dim_ua_crm", "alias": "dim_ua_crm", "checksum": {"name": "sha256", "checksum": "9862727e85da5ed5b5efb7f5d3e25fcdd9aa0b99bd47b8159071b0d81a098608"}, "tags": [], "refs": [["stg_af_client_data"], ["stg_promocode_client_data"], ["stg_promo_sheets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652814262.37014}, "model.perekrestokvprok.int_partner_limits": {"raw_sql": "WITH source AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        limits,\n        type\n    FROM {{ ref('stg_partner_limits') }}\n),\n\nlimits_array AS (\n    SELECT \n        GENERATE_DATE_ARRAY(start_date,end_date) AS period, \n        partner,\n        limits,\n        type\n    FROM source\n)\n\nSELECT \n    period,\n    partner,\n    limits,\n    type\nFROM limits_array, UNNEST(period) AS period", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.perekrestokvprok.stg_partner_limits"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "int_partner_limits"], "unique_id": "model.perekrestokvprok.int_partner_limits", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "marts/int_partner_limits.sql", "original_file_path": "models/marts/int_partner_limits.sql", "name": "int_partner_limits", "alias": "int_partner_limits", "checksum": {"name": "sha256", "checksum": "926f581449d3bff5be9af35976a7f7bc8f64bd132175f1f622bc31e513b4234f"}, "tags": [], "refs": [["stg_partner_limits"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652814262.3788035}, "model.perekrestokvprok.int_rate_for_inside": {"raw_sql": "WITH source_t AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        platform,\n        rate_for_partner,\n        rate_for_us,\n        plan_f_p,\n        type,\n        source\n    FROM {{ ref('stg_rate_info') }}\n),\n\nrate_array AS (\n    SELECT \n        GENERATE_DATE_ARRAY(start_date,end_date) AS period, \n        partner,\n        platform,\n        rate_for_partner,\n        rate_for_us,\n        plan_f_p,\n        type,\n        source\n    FROM source_t\n),\n\nrate AS (\n    SELECT\n        period,\n        partner,\n        platform,\n        rate_for_partner,\n        rate_for_us,\n        plan_f_p,\n        type,\n        source,\n        rate_for_us * plan_f_p AS prt_budget,\n        SUM((rate_for_us - rate_for_partner) * plan_f_p) OVER(PARTITION BY period) AS plan_mrg,\n        SUM((rate_for_us - rate_for_partner) * plan_f_p) OVER(PARTITION BY period, partner) AS prt_plan_mrg,\n    FROM rate_array, UNNEST(period) AS period\n),\n\nfinal AS (\n    SELECT\n        period,\n        partner,\n        platform,\n        rate_for_partner,\n        rate_for_us,\n        plan_f_p,\n        type,\n        source,\n        prt_budget,\n        plan_mrg,\n        prt_plan_mrg,\n    FROM rate\n)\n\nSELECT \n    period,\n    partner,\n    platform,\n    rate_for_partner,\n    rate_for_us,\n    plan_f_p,\n    type,\n    source,\n    prt_budget,\n    plan_mrg,\n    prt_plan_mrg,\nFROM final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.perekrestokvprok.stg_rate_info"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "int_rate_for_inside"], "unique_id": "model.perekrestokvprok.int_rate_for_inside", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "marts/int_rate_for_inside.sql", "original_file_path": "models/marts/int_rate_for_inside.sql", "name": "int_rate_for_inside", "alias": "int_rate_for_inside", "checksum": {"name": "sha256", "checksum": "1869202f13a599fa0cf01cc11492fe8c309e1858540de24af6aed0298bf58613"}, "tags": [], "refs": [["stg_rate_info"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652814262.3816833}, "model.perekrestokvprok.int_asa_cab_meta": {"raw_sql": "WITH source AS (\n    SELECT\n        Date,\n        metadata_campaignName,\n        impressions,\n        taps,\n        localSpend_amount\n    FROM {{ source('MetaCustom', 'apple_search_ads_ASA_cost') }}\n),\n\nfinal AS (\n    SELECT\n        Date AS date,\n        LOWER(metadata_campaignName) AS campaign_name,\n        IF(REGEXP_CONTAINS(metadata_campaignName, r'\\(R\\)'),'retargeting','UA') AS campaign_type,\n        '-' adset_name,\n        SUM(impressions) AS impressions,\n        SUM(taps) AS clicks,\n        SUM(SAFE_CAST(localSpend_amount AS FLOAT64)) AS spend\n    FROM source\n    GROUP BY 1,2,3\n)\n\nSELECT\n    date,\n    REGEXP_REPLACE(campaign_name, r'\\+|-', '_') AS campaign_name,\n    campaign_type,\n    adset_name,\n    impressions,\n    clicks,\n    spend\nFROM final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.MetaCustom.apple_search_ads_ASA_cost"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_asa_cab_meta"], "unique_id": "model.perekrestokvprok.int_asa_cab_meta", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/int_asa_cab_meta.sql", "original_file_path": "models/staging/int_asa_cab_meta.sql", "name": "int_asa_cab_meta", "alias": "int_asa_cab_meta", "checksum": {"name": "sha256", "checksum": "a57888e1a434dd7e5ab31aa4e6b947b52b5ea2fb96b8453f8015c632c34aeeb6"}, "tags": [], "refs": [], "sources": [["MetaCustom", "apple_search_ads_ASA_cost"]], "description": "\u0410\u0421\u0410 \u0438\u0437 \u043c\u0435\u0442\u044b", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1652814262.770606}, "model.perekrestokvprok.int_google_cab_sheets": {"raw_sql": "WITH \ngoogle_sheet AS (\n    SELECT DISTINCT\n        date,\n        LOWER(campaign_name) campaign_name,\n        IF(REGEXP_CONTAINS(campaign_name, r'\\[old\\]'),'retargeting','UA') AS campaign_type,\n        adset_name,\n        costs,\n        installs,\n        clicks,\n        impressions\n    FROM {{ source('sheets_data', 'google_ads_costs_and_installs') }}\n    WHERE date IS NOT NULL\n),\n\ngoogle_storage AS (\n    SELECT DISTINCT\n        date,\n        campaign_name,\n        campaign_type,\n        adset_name,\n        spend,\n        installs,\n        clicks,\n        impressions\n    FROM {{ ref('stg_google_cab_sheets') }}\n    WHERE date < (\n        SELECT MIN(date)\n        FROM google_sheet\n    )\n),\n\nfinal AS (\n    SELECT *\n    FROM google_storage\n    UNION DISTINCT \n    SELECT *\n    FROM google_sheet\n)\n\nSELECT \n    date,\n    REGEXP_REPLACE(campaign_name, r'\\+|-', '_') AS campaign_name,\n    campaign_type,\n    adset_name,\n    spend,\n    installs,\n    clicks,\n    impressions\nFROM final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data.google_ads_costs_and_installs", "model.perekrestokvprok.stg_google_cab_sheets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_google_cab_sheets"], "unique_id": "model.perekrestokvprok.int_google_cab_sheets", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/int_google_cab_sheets.sql", "original_file_path": "models/staging/int_google_cab_sheets.sql", "name": "int_google_cab_sheets", "alias": "int_google_cab_sheets", "checksum": {"name": "sha256", "checksum": "f58713760aca597b16c5b92b133ad9fd7ec3b5f0dd5eafa843fdb33eb9b67811"}, "tags": [], "refs": [["stg_google_cab_sheets"]], "sources": [["sheets_data", "google_ads_costs_and_installs"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1652814262.3879566}, "model.perekrestokvprok.int_google_dbm_dv360_cost": {"raw_sql": "WITH source AS (\n    SELECT \n        date,\n        campaign,\n        --- \u0435\u0441\u0442\u044c, \u043d\u043e \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0437\u0430\u043d\u0443\u043b\u044f\u0435\u0442\u0441\u044f: ---\n        -- impressions,\n        -- clicks,\n        RevenueAdvCurrency\n    FROM {{ source('MetaCustom','google_dbm_google_dv360_cost_5807131') }}\n),\n\nfinal AS (\n    SELECT\n        date,\n        LOWER(campaign) AS campaign_name,\n        'UA' AS campaign_type,\n        '-' AS adset_name,\n        0 AS impressions,\n        0 AS clicks,\n        SUM(RevenueAdvCurrency) AS spend\n    FROM source\n    GROUP BY 1, 2, 3, 4, 5\n)\n\nSELECT\n    date,\n    campaign_name,\n    campaign_type,\n    adset_name,\n    impressions,\n    clicks,\n    spend\nFROM final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.MetaCustom.google_dbm_google_dv360_cost_5807131"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_google_dbm_dv360_cost"], "unique_id": "model.perekrestokvprok.int_google_dbm_dv360_cost", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/int_google_dbm_dv360_cost.sql", "original_file_path": "models/staging/int_google_dbm_dv360_cost.sql", "name": "int_google_dbm_dv360_cost", "alias": "int_google_dbm_dv360_cost", "checksum": {"name": "sha256", "checksum": "d4bd82368c4a27d0cad8a17ed0c258e8b62522137a5b2fb8e9d478c485ef3c55"}, "tags": [], "refs": [], "sources": [["MetaCustom", "google_dbm_google_dv360_cost_5807131"]], "description": "\u0413\u0443\u0433\u043b \u0438\u0437 \u043c\u0435\u0442\u044b \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0430", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1652814262.7671273}, "model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta": {"raw_sql": "WITH old_source AS (\n    SELECT\n        date,\n        insertionOrder,\n        insertionOrderID,\n        impressions,\n        clicks,\n        revenueAdvCurrency,\n        ROW_NUMBER() OVER (PARTITION BY InsertionOrderID, LineItemID, Date ORDER BY DATE(_PARTITIONTIME) DESC) \n            AS pd_rw\n    FROM {{ source('DCM', 'google_dbm_existed_dbm_report_293044') }}\n    WHERE date < '2021-12-01'\n),\n\nold_modified AS (\n    SELECT\n        date,\n        insertionOrder AS insertion_order,\n        insertionOrderID AS insertion_order_id,\n        SUM(SAFE_CAST(impressions AS INT64)) AS impressions,\n        SUM(SAFE_CAST(clicks AS INT64)) AS clicks,\n        SUM(SAFE_CAST(revenueAdvCurrency AS FLOAT64)) AS revenue_adv_currency,\n        0 AS profit_advertiser_currency\n    FROM old_source\n    WHERE pd_rw = 1\n    GROUP BY 1, 2, 3\n),\n\nnew_source AS (\n    SELECT\n        date,\n        insertion_order,\n        insertion_order_id,\n        impressions,\n        clicks,\n        revenue_adv_currency,\n        profit_advertiser_currency\n    FROM {{ ref('stg_google_dbm') }}\n    WHERE date >= '2021-12-01'\n),\n\nnew_modified AS (\n    SELECT\n        date,\n        insertion_order,\n        insertion_order_id,\n        SUM(SAFE_CAST(impressions AS INT64)) AS impressions,\n        SUM(SAFE_CAST(clicks AS INT64)) AS clicks,\n        SUM(SAFE_CAST(revenue_adv_currency AS FLOAT64)) AS revenue_adv_currency,\n        SUM(SAFE_CAST(profit_advertiser_currency AS FLOAT64)) AS profit_advertiser_currency\n    FROM new_source\n    GROUP BY 1, 2, 3\n),\n\nfinal AS (\n    SELECT *\n    FROM old_modified\n    UNION DISTINCT\n    SELECT *\n    FROM new_modified\n)\n\nSELECT\n    date,\n    insertion_order,\n    insertion_order_id,\n    impressions,\n    clicks,\n    revenue_adv_currency,\n    profit_advertiser_currency\nFROM final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.DCM.google_dbm_existed_dbm_report_293044", "model.perekrestokvprok.stg_google_dbm"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_google_dbm_impressions_clicks_revenue_meta"], "unique_id": "model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/int_google_dbm_impressions_clicks_revenue_meta.sql", "original_file_path": "models/staging/int_google_dbm_impressions_clicks_revenue_meta.sql", "name": "int_google_dbm_impressions_clicks_revenue_meta", "alias": "int_google_dbm_impressions_clicks_revenue_meta", "checksum": {"name": "sha256", "checksum": "88680068b6c3b648a6d5f267aa3985e9a954b391cd1f0db67103b794189c0641"}, "tags": [], "refs": [["stg_google_dbm"]], "sources": [["DCM", "google_dbm_existed_dbm_report_293044"]], "description": "\u0413\u0443\u0433\u043b \u0438\u0437 \u043c\u0435\u0442\u044b \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0430", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "insertion_order": {"name": "insertion_order", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "insertion_order_id": {"name": "insertion_order_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revenue_adv_currency": {"name": "revenue_adv_currency", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1652814262.7635841}, "model.perekrestokvprok.int_google_dcm_activity_meta": {"raw_sql": "WITH source AS (\n    SELECT\n        interactionTime,\n        placementId,\n        placement,\n        activityGroup,\n        conversionId\n    FROM {{ source('DCM', 'google_dcm_activitiIO')}}\n    WHERE placement != ''\n),\n\nfinal AS (\n    SELECT \n      DATE(interactionTime) interaction_date,\n      placementId AS placement_id,\n      placement,\n      COUNT(distinct (CASE WHEN activityGroup = 'vpr1pur' THEN conversionId END)) purchase,\n      COUNT(distinct (CASE WHEN activityGroup = 'vpr1ret' THEN conversionId END)) retarget,\n      COUNT(distinct (CASE WHEN activityGroup = 'vpr1inst' THEN conversionId END)) installs,\n  FROM source\n  GROUP BY 1, 2, 3\n)\n\nSELECT\n    interaction_date,\n    placement_id,\n    placement,\n    purchase,\n    retarget,\n    installs\nFROM final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.DCM.google_dcm_activitiIO"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_google_dcm_activity_meta"], "unique_id": "model.perekrestokvprok.int_google_dcm_activity_meta", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/int_google_dcm_activity_meta.sql", "original_file_path": "models/staging/int_google_dcm_activity_meta.sql", "name": "int_google_dcm_activity_meta", "alias": "int_google_dcm_activity_meta", "checksum": {"name": "sha256", "checksum": "02d9a07f6aa355ed7009a420903e11755b3d47b09944b62b0d33c6a064b21a05"}, "tags": [], "refs": [], "sources": [["DCM", "google_dcm_activitiIO"]], "description": "\u0413\u0443\u0433\u043b \u0438\u0437 \u043c\u0435\u0442\u044b \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0430", "columns": {"interaction_date": {"name": "interaction_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement_id": {"name": "placement_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement": {"name": "placement", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "purchase": {"name": "purchase", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "retarget": {"name": "retarget", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "installs": {"name": "installs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1652814262.7605996}, "model.perekrestokvprok.int_google_dcm_reach": {"raw_sql": "WITH source AS (\n    SELECT\n        Date,\n        InsertionOrder,\n        InsertionOrderID,\n        UniqueReach_ImpressionReach,\n        ROW_NUMBER() OVER (\n            PARTITION BY InsertionOrderID,LineItemID, Date \n            ORDER BY DATE(_PARTITIONTIME) DESC\n            ) AS pd_rw\n    FROM {{ source('DCM_impression_reach', 'google_dbm_existed_dbm_report_293044') }}\n),\n\nfinal AS (\n    SELECT \n        date,\n        InsertionOrder AS insertion_order,\n        InsertionOrderID AS insertion_order_id,\n        SUM(\n            SAFE_CAST(\n                (IF(UniqueReach_ImpressionReach='-','0',UniqueReach_ImpressionReach)) AS INT64)\n            ) AS impression_reach,\n  FROM source\n  WHERE pd_rw = 1\n  GROUP BY 1, 2, 3\n)\n\nSELECT\n    date,\n    insertion_order,\n    insertion_order_id,\n    impression_reach\nFROM final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.DCM_impression_reach.google_dbm_existed_dbm_report_293044"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_google_dcm_reach"], "unique_id": "model.perekrestokvprok.int_google_dcm_reach", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/int_google_dcm_reach.sql", "original_file_path": "models/staging/int_google_dcm_reach.sql", "name": "int_google_dcm_reach", "alias": "int_google_dcm_reach", "checksum": {"name": "sha256", "checksum": "cc1bb12776a53fc58bcb5e65c4629541ba6bf88ba3e4d63bb60550192a8b2706"}, "tags": [], "refs": [], "sources": [["DCM_impression_reach", "google_dbm_existed_dbm_report_293044"]], "description": "\u0413\u0443\u0433\u043b \u0438\u0437 \u043c\u0435\u0442\u044b \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0430", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "insertion_order": {"name": "insertion_order", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "insertion_order_id": {"name": "insertion_order_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_reach": {"name": "impression_reach", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1652814262.7575877}, "model.perekrestokvprok.int_mytarget_cab_meta": {"raw_sql": "WITH source AS (\n    SELECT\n        date,\n        campaign.name,\n        base.shows,\n        base.clicks,\n        base.spent\n    FROM {{ source('MetaCustom', 'mytarget_banner_stat_d0927adb05_agency_client') }}\n),\n\nfinal AS (\n    SELECT\n        date,\n        LOWER(name) AS campaign_name,\n        IF(REGEXP_CONTAINS(name, r'new'),'UA','retargeting') AS campaign_type,\n        '-' adset_name,\n        SUM(shows) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spent) AS spend\n    FROM source\n    GROUP BY 1,2,3,4\n)\n\nSELECT\n    date,\n    REGEXP_REPLACE(campaign_name, r'\\+|-', '_') AS campaign_name,\n    campaign_type,\n    adset_name,\n    impressions,\n    clicks,\n    spend\nFROM final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.MetaCustom.mytarget_banner_stat_d0927adb05_agency_client"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_mytarget_cab_meta"], "unique_id": "model.perekrestokvprok.int_mytarget_cab_meta", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/int_mytarget_cab_meta.sql", "original_file_path": "models/staging/int_mytarget_cab_meta.sql", "name": "int_mytarget_cab_meta", "alias": "int_mytarget_cab_meta", "checksum": {"name": "sha256", "checksum": "0608b915d0328a40c99160cf1bf68673417962dcb704a0ddd900b9ec47517813"}, "tags": [], "refs": [], "sources": [["MetaCustom", "mytarget_banner_stat_d0927adb05_agency_client"]], "description": "\u041c\u0422 \u0438\u0437 \u043c\u0435\u0442\u044b", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1652814262.754904}, "model.perekrestokvprok.int_twitter_cab": {"raw_sql": "WITH \ntwitter_sheet AS (\n    SELECT DISTINCT\n        DATE(REPLACE(string_field_0,'.','-')) AS date,\n        LOWER(string_field_2) AS campaign_name,\n        IF(REGEXP_CONTAINS(LOWER(string_field_2), r'_old_'),'retargeting','UA') AS campaign_type,\n        SAFE_CAST(REPLACE(string_field_9,',','.') AS FLOAT64) AS impressions,\n        SAFE_CAST(REPLACE(string_field_10,',','.') AS FLOAT64) AS spend\n    FROM {{ source('sheets_data', 'twitter_sheets') }}\n),\n\ntwitter_storage AS (\n    SELECT DISTINCT\n        date,\n        campaign_name,\n        campaign_type,\n        impressions,\n        spend\n    FROM {{ ref('stg_twitter_cab_sheets') }}\n    WHERE date < (\n        SELECT MIN(date)\n        FROM twitter_sheet\n    )\n),\n\nfinal AS (\n    SELECT *\n    FROM twitter_storage\n    UNION DISTINCT \n    SELECT *\n    FROM twitter_sheet\n)\n\nSELECT \n    date,\n    REGEXP_REPLACE(campaign_name, r'\\+|-', '_') AS campaign_name,\n    '-' adset_name,\n    campaign_type,\n    impressions,\n    spend\nFROM final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data.twitter_sheets", "model.perekrestokvprok.stg_twitter_cab_sheets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_twitter_cab"], "unique_id": "model.perekrestokvprok.int_twitter_cab", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/int_twitter_cab.sql", "original_file_path": "models/staging/int_twitter_cab.sql", "name": "int_twitter_cab", "alias": "int_twitter_cab", "checksum": {"name": "sha256", "checksum": "672b28a5203e05be64ee86de35ce7ced8f55a9f1f9d4a28382c5ada84696be5d"}, "tags": [], "refs": [["stg_twitter_cab_sheets"]], "sources": [["sheets_data", "twitter_sheets"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1652814262.4076068}, "model.perekrestokvprok.int_vk_cab_meta": {"raw_sql": "WITH source_1 AS (\n    SELECT\n        day,\n        campaign.name,\n        impressions,\n        clicks,\n        spent\n    FROM {{ source('MetaCustom', 'vk_campaign_stat_1900013586_1605495720') }}\n),\n\nsource_2 AS (\n    SELECT\n        day,\n        campaign.name,\n        impressions,\n        clicks,\n        spent\n    FROM {{ source('MetaCustom', 'vk_campaign_stat_1900013586_1607141417') }}\n),\n\nunions AS (\n    SELECT * FROM source_1\n    UNION DISTINCT\n    SELECT * FROM source_2\n),\n\nfinal AS (\n    SELECT\n        day AS date,\n        LOWER(REPLACE(REPLACE(name,'+','_'),'-','_')) AS campaign_name,\n        IF(REGEXP_CONTAINS(name, r'old'),'retargeting','UA') AS campaign_type,\n        '-' adset_name,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spent) AS spend\n    FROM unions\n    WHERE REGEXP_CONTAINS(name, 'realweb')\n    GROUP BY 1,2,3\n)\n\nSELECT\n    date,\n    campaign_name,\n    campaign_type,\n    adset_name,\n    impressions,\n    clicks,\n    spend\nFROM final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1607141417", "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1605495720"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_vk_cab_meta"], "unique_id": "model.perekrestokvprok.int_vk_cab_meta", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/int_vk_cab_meta.sql", "original_file_path": "models/staging/int_vk_cab_meta.sql", "name": "int_vk_cab_meta", "alias": "int_vk_cab_meta", "checksum": {"name": "sha256", "checksum": "fe6c772839eb627fc29e54ae5893979f3534938900faac31c83117c09591df0a"}, "tags": [], "refs": [], "sources": [["MetaCustom", "vk_campaign_stat_1900013586_1607141417"], ["MetaCustom", "vk_campaign_stat_1900013586_1605495720"]], "description": "\u0412\u041a \u0438\u0437 \u043c\u0435\u0442\u044b", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1652814262.7514255}, "model.perekrestokvprok.int_yandex_cab_meta": {"raw_sql": "WITH source_1 AS (\n    SELECT\n        Date,\n        CampaignName,\n        AdGroupName,\n        Impressions,\n        Clicks,\n        Cost\n    FROM {{ source('MetaCustom', 'yandex_direct_ad_keyword_stat_x5perek_direct') }}\n    WHERE Date > '2021-02-01'\n),\n\nsource_2 AS (\n    SELECT\n        Date,\n        CampaignName,\n        AdGroupName,\n        Impressions,\n        Clicks,\n        Cost\n    FROM {{ source('MetaCustom', 'yandex_direct_ad_keyword_stat_perek_vprok_sf') }}\n    WHERE Date >= '2022-04-28' and Date <= '2022-05-05'\n),\n\nsource AS (\n    SELECT * FROM source_1\n    UNION ALL\n    SELECT * FROM source_2\n),\n\nfinal AS (\n    SELECT\n        date,\n        LOWER(REPLACE(REPLACE(CampaignName,'+','_'),'-','_')) AS campaign_name,\n        IF(REGEXP_CONTAINS(CampaignName, r'ret'),'retargeting','UA') AS campaign_type,\n        AdGroupName AS adset_name,\n        SUM(Impressions) AS impressions,\n        SUM(Clicks) AS clicks,\n        SUM(SAFE_CAST(SAFE_DIVIDE(Cost, 1.2) AS FLOAT64)) AS spend\n    FROM source\n    GROUP BY 1,2,3,4\n)\n\nSELECT\n    date,\n    campaign_name,\n    campaign_type,\n    adset_name,\n    impressions,\n    clicks,\n    spend\nFROM final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_x5perek_direct", "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_perek_vprok_sf"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_yandex_cab_meta"], "unique_id": "model.perekrestokvprok.int_yandex_cab_meta", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/int_yandex_cab_meta.sql", "original_file_path": "models/staging/int_yandex_cab_meta.sql", "name": "int_yandex_cab_meta", "alias": "int_yandex_cab_meta", "checksum": {"name": "sha256", "checksum": "970a00e30060b6d9b3b93d6687596b6b0665fbc80fd8af77b7f78a393c81c89b"}, "tags": [], "refs": [], "sources": [["MetaCustom", "yandex_direct_ad_keyword_stat_x5perek_direct"], ["MetaCustom", "yandex_direct_ad_keyword_stat_perek_vprok_sf"]], "description": "\u042f\u043d\u0434\u0435\u043a\u0441 \u0438\u0437 \u043c\u0435\u0442\u044b", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1652814262.747769}, "model.perekrestokvprok.stg_af_client_data": {"raw_sql": "WITH cte AS (\nSELECT \n    date,\n    is_retargeting,\n    af_c_id AS af_cid,\n    af_adset AS adset_name,\n    mediasource,\n    event_value,\n    platform,\n    eventname AS event_name,\n    unig_event AS uniq_event_count,\n    EventRevenue AS event_revenue,\n    cnt_event AS event_count,\n    {{ normalize('campaign') }} AS campaign_name\nFROM  {{ source ('agg_data', 'AF_client_data')}}\n)\nSELECT\n  date,\n  is_retargeting,\n    CASE\n        WHEN af_cid = 'campaign_id' THEN '61809857'\n        ELSE af_cid END AS af_cid,\n  adset_name,\n    CASE \n        WHEN mediasource = 'mail.ru_int' and campaign_name = 'campaign_name' THEN 'yandexdirect_int'\n        ELSE mediasource END AS mediasource,\n  event_value,\n  platform,\n  event_name,\n  uniq_event_count,\n  event_revenue,\n  event_count,\n    CASE WHEN campaign_name = 'campaign_name' THEN 'realweb_ya_2022_and_ret_reg2_smartbanner'\n         ELSE campaign_name END AS campaign_name,\nFROM cte", "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize"], "nodes": ["source.perekrestokvprok.agg_data.AF_client_data"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_af_client_data"], "unique_id": "model.perekrestokvprok.stg_af_client_data", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_af_client_data.sql", "original_file_path": "models/staging/stg_af_client_data.sql", "name": "stg_af_client_data", "alias": "stg_af_client_data", "checksum": {"name": "sha256", "checksum": "75138b4fb50c5654fbaffe5e09737eabe443075ba785d973aa55af9399d401a8"}, "tags": [], "refs": [], "sources": [["agg_data", "AF_client_data"]], "description": "AF \u0438\u0437 BQ (\u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0441\u0443\u0440\u0441 \u043a\u043e\u043d\u0432\u0435\u0440\u0441\u0438\u0439)", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_retargeting": {"name": "is_retargeting", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "af_cid": {"name": "af_cid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mediasource": {"name": "mediasource", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_value": {"name": "event_value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uniq_event_count": {"name": "uniq_event_count", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_revenue": {"name": "event_revenue", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_count": {"name": "event_count", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1652814262.744318}, "model.perekrestokvprok.stg_af_for_media": {"raw_sql": "SELECT\n    atr_date AS date,\n    is_retargeting,\n    LOWER(Campaign) AS campaign_name,\n    MediaSource AS media_source,\n    platform,\n    EventName AS event_name,\n    unig_event AS uniq_event,\n    EventRevenue AS revenue,\n    cnt_event AS event_count\nFROM {{ source('AF_data', 'af_atr_data_for_media_ads_TABLE') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.AF_data.af_atr_data_for_media_ads_TABLE"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_af_for_media"], "unique_id": "model.perekrestokvprok.stg_af_for_media", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_af_for_media.sql", "original_file_path": "models/staging/stg_af_for_media.sql", "name": "stg_af_for_media", "alias": "stg_af_for_media", "checksum": {"name": "sha256", "checksum": "e4716dba6669fc6aaf8b0b0ba3419c1af7710b0204052f67a2614a50ba36a664"}, "tags": [], "refs": [], "sources": [["AF_data", "af_atr_data_for_media_ads_TABLE"]], "description": "AF \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0439\u043a\u0438 \u0438\u0437 BQ", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_retargeting": {"name": "is_retargeting", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media_source": {"name": "media_source", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uniq_event": {"name": "uniq_event", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revenue": {"name": "revenue", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_count": {"name": "event_count", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1652814262.730193}, "model.perekrestokvprok.stg_af_rtg_partners_by_date": {"raw_sql": "WITH source_ios AS (\n    SELECT \n        date,\n        Agency_PMD__af_prt_\tAS agency,\n        Media_Source__pid_ AS media_source,\n        Campaign__c_ AS campaign,\n        'retargeting' as report_type,\n        'ios' AS platform,\n        clicks,\n        conversions,\n        sessions,\n        total_revenue,\n        total_cost,\n        af_purchase__Event_counter_ AS purchase,\n        af_purchase__Sales_in_RUB_ AS revenue,\n        af_purchase_rw__Event_counter_ AS rw_purchase,\n        af_purchase_rw__Sales_in_RUB_ AS rw_revenue,\n        first_purchase__Event_counter_ AS first_purchase,\n        first_purchase__Sales_in_RUB_ AS first_purchase_revenue,\n        first_purchase_rw__Event_counter_ AS rw_first_purchase,\n        first_purchase_rw__Sales_in_RUB_ AS rw_first_purchase_revenue,\n        ROW_NUMBER() OVER(PARTITION BY date, Media_Source__pid_ , Campaign__c_ ORDER BY _TABLE_SUFFIX DESC) AS counter\n    FROM  {{ source('AF_data', 'ios_rtg_partners_by_date_report_*') }}\n),\n\nsource_android AS (\n    SELECT \n        date,\n        Agency_PMD__af_prt_\tAS agency,\n        Media_Source__pid_ AS media_source,\n        Campaign__c_ AS campaign,\n        'retargeting' as report_type,\n        'android' AS platform,\n        clicks,\n        conversions,\n        sessions,\n        total_revenue,\n        total_cost,\n        af_purchase__Event_counter_ AS purchase,\n        af_purchase__Sales_in_RUB_ AS revenue,\n        af_purchase_rw__Event_counter_ AS rw_purchase,\n        af_purchase_rw__Sales_in_RUB_ AS rw_revenue,\n        first_purchase__Event_counter_ AS first_purchase,\n        first_purchase__Sales_in_RUB_ AS first_purchase_revenue,\n        first_purchase_rw__Event_counter_ AS rw_first_purchase,\n        first_purchase_rw__Sales_in_RUB_ AS rw_first_purchase_revenue,\n        ROW_NUMBER() OVER(PARTITION BY date, Media_Source__pid_ , Campaign__c_ ORDER BY _TABLE_SUFFIX DESC) AS counter\n    FROM  {{ source('AF_data', 'android_rtg_partners_by_date_report_*') }}\n),\n\nfinal AS (\n    SELECT * FROM source_ios\n    UNION ALL\n    SELECT * FROM source_android\n)\n\nSELECT \n    DATE(date) AS date,\n    agency,\n    media_source,\n    {{ normalize('campaign') }} AS campaign_name,\n    report_type,\n    platform,\n    SUM(clicks) clicks,\n    SUM(conversions) conversions,\n    SUM(sessions) sessions,\n    SUM(total_revenue) total_revenue,\n    SUM(total_cost) total_cost,\n    SUM(purchase) purchase,\n    SUM(revenue) revenue,\n    SUM(rw_purchase) rw_purchase,\n    SUM(rw_revenue) rw_revenue,\n    SUM(first_purchase) first_purchase,\n    SUM(first_purchase_revenue) first_purchase_revenue,\n    SUM(rw_first_purchase) rw_first_purchase,\n    SUM(rw_first_purchase_revenue) rw_first_purchase_revenue,\nFROM final\nWHERE counter = 1\nGROUP BY 1,2,3,4,5,6", "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize"], "nodes": ["source.perekrestokvprok.AF_data.ios_rtg_partners_by_date_report_*", "source.perekrestokvprok.AF_data.android_rtg_partners_by_date_report_*"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_af_rtg_partners_by_date"], "unique_id": "model.perekrestokvprok.stg_af_rtg_partners_by_date", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_af_rtg_partners_by_date.sql", "original_file_path": "models/staging/stg_af_rtg_partners_by_date.sql", "name": "stg_af_rtg_partners_by_date", "alias": "stg_af_rtg_partners_by_date", "checksum": {"name": "sha256", "checksum": "a7cf1b138986de1dde0596388908853f316ad95940450f2e276954133ad222cd"}, "tags": [], "refs": [], "sources": [["AF_data", "ios_rtg_partners_by_date_report_*"], ["AF_data", "android_rtg_partners_by_date_report_*"]], "description": "\u0412\u044b\u0433\u0440\u0443\u0437\u043a\u0430 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043e\u0432 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0438\u0437 AF", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1652814262.7751882}, "model.perekrestokvprok.stg_af_ua_partners_by_date": {"raw_sql": "WITH source_ios AS (\n    SELECT \n        date,\n        Agency_PMD__af_prt_\tAS agency,\n        Media_Source__pid_ AS media_source,\n        Campaign__c_ AS campaign,\n        'UA' as report_type,\n        'ios' AS platform,\n        impressions,\n        clicks,\n        installs,\n        sessions,\n        total_revenue,\n        total_cost,\n        af_purchase__Unique_users_ AS uniq_purchase,\n        af_purchase__Event_counter_ AS purchase,\n        af_purchase__Sales_in_RUB_ AS revenue,\n        af_purchase_rw__Event_counter_ AS rw_purchase,\n        af_purchase_rw__Sales_in_RUB_ AS rw_revenue,\n        first_purchase__Unique_users_ AS uniq_first_purchase,\n        first_purchase__Event_counter_ AS first_purchase,\n        first_purchase__Sales_in_RUB_ AS first_purchase_revenue,\n        first_purchase_rw__Event_counter_ AS rw_first_purchase,\n        first_purchase_rw__Sales_in_RUB_ AS rw_first_purchase_revenue,\n        ROW_NUMBER() OVER(PARTITION BY date, Media_Source__pid_ , Campaign__c_ ORDER BY _TABLE_SUFFIX DESC) AS counter\n    FROM {{ source('AF_data', 'ios_ua_partners_by_date_report_*') }}\n),\n\nsource_android AS (\n    SELECT \n        date,\n        Agency_PMD__af_prt_\tAS agency,\n        Media_Source__pid_ AS media_source,\n        Campaign__c_ AS campaign,\n        'UA' as report_type,\n        'android' AS platform,\n        impressions,\n        clicks,\n        installs,\n        sessions,\n        total_revenue,\n        total_cost,\n        af_purchase__Unique_users_ AS uniq_purchase,\n        af_purchase__Event_counter_ AS purchase,\n        af_purchase__Sales_in_RUB_ AS revenue,\n        af_purchase_rw__Event_counter_ AS rw_purchase,\n        af_purchase_rw__Sales_in_RUB_ AS rw_revenue,\n        first_purchase__Unique_users_ AS uniq_first_purchase,\n        first_purchase__Event_counter_ AS first_purchase,\n        first_purchase__Sales_in_RUB_ AS first_purchase_revenue,\n        first_purchase_rw__Event_counter_ AS rw_first_purchase,\n        first_purchase_rw__Sales_in_RUB_ AS rw_first_purchase_revenue,\n        ROW_NUMBER() OVER(PARTITION BY date, Media_Source__pid_ , Campaign__c_ ORDER BY _TABLE_SUFFIX DESC) AS counter\n    FROM {{ source('AF_data', 'android_ua_partners_by_date_report_*') }}\n),\n\nfinal AS (\n    SELECT * FROM source_ios\n    UNION ALL\n    SELECT * FROM source_android\n)\n\nSELECT \n    DATE(date) AS date,\n    agency,\n    media_source,\n    {{ normalize('campaign') }} AS campaign_name,\n    report_type,\n    platform,\n    SUM(impressions) impressions,\n    SUM(clicks) clicks,\n    SUM(installs) installs,\n    SUM(sessions) sessions,\n    SUM(total_revenue) total_revenue,\n    SUM(total_cost) total_cost,\n    SUM(uniq_purchase) uniq_purchase,\n    SUM(purchase) purchase,\n    SUM(revenue) revenue,\n    SUM(rw_purchase) rw_purchase,\n    SUM(rw_revenue) rw_revenue,\n    SUM(uniq_first_purchase) uniq_first_purchase,\n    SUM(first_purchase) first_purchase,\n    SUM(first_purchase_revenue) first_purchase_revenue,\n    SUM(rw_first_purchase) rw_first_purchase,\n    SUM(rw_first_purchase_revenue) rw_first_purchase_revenue,\nFROM final\nWHERE counter = 1\nGROUP BY 1,2,3,4,5,6", "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize"], "nodes": ["source.perekrestokvprok.AF_data.ios_ua_partners_by_date_report_*", "source.perekrestokvprok.AF_data.android_ua_partners_by_date_report_*"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_af_ua_partners_by_date"], "unique_id": "model.perekrestokvprok.stg_af_ua_partners_by_date", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_af_ua_partners_by_date.sql", "original_file_path": "models/staging/stg_af_ua_partners_by_date.sql", "name": "stg_af_ua_partners_by_date", "alias": "stg_af_ua_partners_by_date", "checksum": {"name": "sha256", "checksum": "869161e3d53619ed598d5a086120de452131094f4c07ccab54dd03a0198776cd"}, "tags": [], "refs": [], "sources": [["AF_data", "ios_ua_partners_by_date_report_*"], ["AF_data", "android_ua_partners_by_date_report_*"]], "description": "\u0412\u044b\u0433\u0440\u0443\u0437\u043a\u0430 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043e\u0432 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0438\u0437 AF", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1652814262.7740598}, "model.perekrestokvprok.stg_asa_cab_sheets": {"raw_sql": "{% if target.name == 'prod' %}\n\n{{\n  config(\n    materialized='incremental',\n    unique_key='unique_key',\n    partition_by={\n      \"field\": \"date\",\n      \"data_type\": \"date\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = [\"campaign_type\"]\n  )\n}}\n\n{% endif %}\n\nWITH source AS (\n    SELECT DISTINCT\n        date,\n        campaign,\n        Clikcs AS clicks,\n        spend,\n        installs,\n        ROW_NUMBER() OVER(PARTITION BY date, campaign) AS counter\n    FROM {{ source('sheets_data', 'Asa_cost') }}\n    WHERE date IS NOT NULL\n),\n\nfinal AS (\n    SELECT DISTINCT\n        ARRAY_TO_STRING([\n            CAST(date AS string),\n            LOWER(campaign)\n        ],'') AS unique_key,\n        date,\n        LOWER(campaign) AS campaign_name,\n        clicks,\n        spend,\n        installs\n    FROM source\n    WHERE counter = 1\n)\n\nSELECT DISTINCT\n    unique_key,\n    date,\n    {{ normalize('campaign_name') }} AS campaign_name,\n    IF(REGEXP_CONTAINS(campaign_name, r'\\(R\\)|\\(r\\)'),'retargeting','UA') AS campaign_type,\n    '-' adset_name,\n    clicks,\n    spend,\n    installs,\n    0 impressions\nFROM final\n\n{% if not is_incremental() %}\n\n-- \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 --\nUNION ALL\nSELECT DISTINCT\n    ARRAY_TO_STRING([\n      CAST(date AS STRING),\n      LOWER(campaign_name)\n      ],'') AS unique_key,\n    date,\n    campaign_name,\n    campaign_type,\n    adset_name,\n    clicks,\n    spend,\n    0 installs,\n    impressions\nFROM {{ ref ('int_asa_cab_meta') }}\nWHERE date < (\n  SELECT MIN(date)\n  FROM final\n)\nAND date IS NOT NULL\n\n{% endif %}", "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize", "macro.dbt.is_incremental"], "nodes": ["source.perekrestokvprok.sheets_data.Asa_cost", "model.perekrestokvprok.int_asa_cab_meta"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["campaign_type"], "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "unique_key": "unique_key", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_asa_cab_sheets"], "unique_id": "model.perekrestokvprok.stg_asa_cab_sheets", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_asa_cab_sheets.sql", "original_file_path": "models/staging/stg_asa_cab_sheets.sql", "name": "stg_asa_cab_sheets", "alias": "stg_asa_cab_sheets", "checksum": {"name": "sha256", "checksum": "1c1f7a4ceaa8bedef3aa0235c20f36064769bdadcc697bfd144b64c19410f575"}, "tags": [], "refs": [["int_asa_cab_meta"]], "sources": [["sheets_data", "Asa_cost"]], "description": "\u0410\u0421\u0410 \u0438\u0437 perek_settings", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "unique_key", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "cluster_by": ["campaign_type"]}, "created_at": 1652814262.771745}, "model.perekrestokvprok.stg_budget_and_plan": {"raw_sql": "{% if target.name == 'prod' %}\n\n{{\n  config(\n    materialized='table',\n  )\n}}\n\n{% endif %}\n\n\nSELECT\n    start_date,\n    end_date,\n    plan_budget,\n    plan_type,\n    plan_order\nFROM {{ source('sheets_data','budget_and_plan') }}\nWHERE start_date IS NOT NULL", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data.budget_and_plan"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_budget_and_plan"], "unique_id": "model.perekrestokvprok.stg_budget_and_plan", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_budget_and_plan.sql", "original_file_path": "models/staging/stg_budget_and_plan.sql", "name": "stg_budget_and_plan", "alias": "stg_budget_and_plan", "checksum": {"name": "sha256", "checksum": "168f73ddbd65a386489ef5353ac35232206ba7c22251fa4cf1dbf6fc5123f5f0"}, "tags": [], "refs": [], "sources": [["sheets_data", "budget_and_plan"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1652814262.461983}, "model.perekrestokvprok.stg_facebook_cab_meta": {"raw_sql": "{% if target.name == 'prod' %}\n\n{{\n  config(\n    materialized='incremental',\n    unique_key='unique_key',\n    partition_by={\n      \"field\": \"date\",\n      \"data_type\": \"date\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = [\"campaign_type\"]\n  )\n}}\n\n{% endif %}\n\nWITH source AS (\n  SELECT\n      date_start,\n      lower(campaign_name) as campaign_name,\n      IF(REGEXP_CONTAINS(campaign_name, r'\\[old\\]'),'retargeting','UA') AS campaign_type,\n      adset_name,\n      ad_name,\n      impressions,\n      clicks,\n      spend,\n      actions,\n      action_values,\n      conversions,\n      conversion_values\n  FROM  {{ source('test2', 'facebook_ads_ad_stat_minimal_134923481805102') }}\n  -- \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a\n  -- {% if is_incremental() %}\n  -- WHERE date_start = DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY)\n  -- {% endif %}\n),\n\nunnests AS (\n  SELECT \n    ARRAY_TO_STRING([\n      CAST(date_start AS STRING),\n      campaign_name,\n      adset_name,\n      ad_name\n      ],'') AS unique_key,\n    date_start AS date,\n    campaign_name,\n    campaign_type,\n    adset_name,\n    ad_name,\n    SUM(impressions) AS impressions,\n    SUM(clicks) AS clicks,\n    SUM((\n        SELECT value\n        FROM UNNEST(actions)\n        WHERE action_type = 'mobile_app_install'\n        --'omni_app_install' \u043d\u0435 \u0442\u0440\u0435\u043a\u0430\u0435\u0442\u0441\u044f\n    )) AS installs,\n    sum(spend) AS spend,\n    SUM((\n        SELECT value\n        FROM UNNEST(actions)\n        where action_type = 'app_custom_event.fb_mobile_purchase'\n    )) AS purchase,\n    SUM((\n        SELECT value\n        FROM UNNEST(action_values)\n        where action_type = 'app_custom_event.fb_mobile_purchase'\n    )) AS revenue,\n    SUM((\n        SELECT value\n        FROM UNNEST(conversions)\n        WHERE action_type = 'start_trial_mobile_app' \n        --'start_trial_total \u043d\u0435 \u0442\u0440\u0435\u043a\u0430\u0435\u0442\u0441\u044f\n    )) AS first_purchase,\n    SUM((\n        SELECT value\n        FROM UNNEST(conversion_values)\n        WHERE action_type = 'start_trial_total'\n    )) AS first_purchase_revenue,\n    SUM((\n        SELECT value\n        FROM UNNEST(actions)\n        where action_type = 'app_custom_event.fb_mobile_add_to_cart'\n    )) AS add_to_cart,\n  FROM source\n  GROUP BY 1,2,3,4,5,6\n)\n\nSELECT\n    unique_key,\n    date,\n    {{ normalize('campaign_name') }} AS campaign_name,\n    campaign_type,\n    adset_name,\n    ad_name,\n    impressions,\n    clicks,\n    installs,\n    spend,\n    purchase,\n    revenue,\n    first_purchase,\n    first_purchase_revenue,\n    add_to_cart\nFROM unnests\n\n{% if not is_incremental() %}\n\n-- \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 --\nUNION ALL\nSELECT DISTINCT\n    ARRAY_TO_STRING([\n      CAST(date AS STRING),\n      lower(campaign_name),\n      adset_name,\n      ad_name\n      ],'') AS unique_key,\n    date,\n    lower(campaign_name) campaign_name,\n    IF(REGEXP_CONTAINS(campaign_name, r'\\[old\\]'),'retargeting','UA') AS campaign_type,\n    adset_name,\n    ad_name,\n    show AS impressions,\n    clicks,\n    installs,\n    spend,\n    cnt_af_purchase AS purchase,\n    revenue,\n    cnt_first_purchase AS first_purchase,\n    first_purchase_revenue,\n    add_to_card\nFROM {{ source('sheets_data', 'FBNEW_data') }}\nWHERE date < (\n  SELECT MIN(date)\n  FROM unnests\n)\n\n--\u043d\u0430 \u0431\u0443\u0434\u0443\u0449\u0435\u0435 --\n-- UNION DISTINCT\n-- SELECT\n--     unique_key,\n--     date,\n--     campaign_name,\n--     adset_name,\n--     ad_name,\n--     impressions,\n--     clicks,\n--     installs,\n--     spend,\n--     purchase,\n--     revenue,\n--     first_purchase,\n--     first_purchase_revenue,\n--     add_to_cart\n-- FROM {{ this }}\n\n{% endif %}", "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.perekrestokvprok.normalize"], "nodes": ["source.perekrestokvprok.test2.facebook_ads_ad_stat_minimal_134923481805102", "source.perekrestokvprok.sheets_data.FBNEW_data"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["campaign_type"], "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "unique_key": "unique_key", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_facebook_cab_meta"], "unique_id": "model.perekrestokvprok.stg_facebook_cab_meta", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_facebook_cab_meta.sql", "original_file_path": "models/staging/stg_facebook_cab_meta.sql", "name": "stg_facebook_cab_meta", "alias": "stg_facebook_cab_meta", "checksum": {"name": "sha256", "checksum": "f67adab9011bf3b0e74e132ee839359f88a7ba1f2963ebe3391d3fa2e207b2da"}, "tags": [], "refs": [], "sources": [["test2", "facebook_ads_ad_stat_minimal_134923481805102"], ["sheets_data", "FBNEW_data"]], "description": "\u0424\u0435\u0439\u0441\u0431\u0443\u043a \u0438\u0437 \u043c\u0435\u0442\u044b. \u041d\u0435 \u0441\u043e\u0448\u0435\u043b\u0441\u044f, \u043d\u0435 \u044e\u0437\u0430\u0435\u043c", "columns": {"unique_key": {"name": "unique_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "installs": {"name": "installs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "purchase": {"name": "purchase", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revenue": {"name": "revenue", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_purchase": {"name": "first_purchase", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_purchase_revenue": {"name": "first_purchase_revenue", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "add_to_cart": {"name": "add_to_cart", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "unique_key", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "cluster_by": ["campaign_type"]}, "created_at": 1652814262.7367706}, "model.perekrestokvprok.stg_facebook_cab_sheets": {"raw_sql": "{% if target.name == 'prod' %}\n\n{{\n  config(\n    materialized='incremental',\n    unique_key='unique_key',\n    partition_by={\n      \"field\": \"date\",\n      \"data_type\": \"date\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = [\"campaign_type\"]\n  )\n}}\n\n{% endif %}\n\nWITH source AS (\n  SELECT DISTINCT\n        ARRAY_TO_STRING([\n        CAST(date AS STRING),\n            lower(campaign),\n            adset,\n            ad\n            ],'') AS unique_key,\n        date,\n        lower(campaign) campaign_name,\n        IF(REGEXP_CONTAINS(lower(campaign), r'\\[old\\]'),'retargeting','UA') AS campaign_type,\n        adset adset_name,\n        ad ad_name,\n        show AS impressions,\n        clicks,\n        installs,\n        spend,\n        purchase,\n        purchase_revenue revenue,\n        first_purchase,\n        first_purchase_revenue,\n        ad_to_cars add_to_cart,\n        ROW_NUMBER() OVER(PARTITION BY date, campaign, adset, ad) AS counter\n    FROM {{ source('sheets_data', 'fb_spreadsheets_data') }}\n)\n\nSELECT\n    unique_key,\n    date,\n    {{ normalize('campaign_name') }} AS campaign_name,\n    campaign_type,\n    adset_name,\n    ad_name,\n    impressions,\n    clicks,\n    installs,\n    spend,\n    purchase,\n    revenue,\n    first_purchase,\n    first_purchase_revenue,\n    add_to_cart\nFROM source\nWHERE counter = 1\n\n{% if not is_incremental() %}\n\n-- \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 --\n\nUNION ALL\nSELECT DISTINCT\n    ARRAY_TO_STRING([\n      CAST(date AS STRING),\n      lower(campaign_name),\n      adset_name,\n      ad_name\n      ],'') AS unique_key,\n    date,\n    lower(campaign_name) campaign_name,\n    IF(REGEXP_CONTAINS(campaign_name, r'\\[old\\]'),'retargeting','UA') AS campaign_type,\n    adset_name,\n    ad_name,\n    show AS impressions,\n    clicks,\n    installs,\n    spend,\n    cnt_af_purchase AS purchase,\n    revenue,\n    cnt_first_purchase AS first_purchase,\n    first_purchase_revenue,\n    add_to_card\nFROM {{ source('sheets_data', 'FBNEW_data') }}\nWHERE date < (\n  SELECT MIN(date)\n  FROM source\n)\n\n{% endif %}", "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize", "macro.dbt.is_incremental"], "nodes": ["source.perekrestokvprok.sheets_data.fb_spreadsheets_data", "source.perekrestokvprok.sheets_data.FBNEW_data"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["campaign_type"], "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "unique_key": "unique_key", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_facebook_cab_sheets"], "unique_id": "model.perekrestokvprok.stg_facebook_cab_sheets", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_facebook_cab_sheets.sql", "original_file_path": "models/staging/stg_facebook_cab_sheets.sql", "name": "stg_facebook_cab_sheets", "alias": "stg_facebook_cab_sheets", "checksum": {"name": "sha256", "checksum": "5685e65b083f8c35e9681d9c588cb3761d9e5e9aa6be437a900a3f6394d13c85"}, "tags": [], "refs": [], "sources": [["sheets_data", "fb_spreadsheets_data"], ["sheets_data", "FBNEW_data"]], "description": "\u0424\u0411 \u0438\u0437 perek_settings", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "unique_key", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "cluster_by": ["campaign_type"]}, "created_at": 1652814262.7730112}, "model.perekrestokvprok.stg_google_cab_sheets": {"raw_sql": "{% if target.name == 'prod' %}\n\n{{\n  config(\n    materialized='incremental',\n    unique_key='unique_key',\n    partition_by={\n      \"field\": \"date\",\n      \"data_type\": \"date\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = [\"campaign_type\"]\n  )\n}}\n\n{% endif %}\n\nWITH source AS (\n    SELECT DISTINCT\n        date,\n        LOWER(campaign_name) campaign_name,\n        adset_name,\n        costs,\n        installs,\n        clicks,\n        impressions\n    FROM {{ source('sheets_data', 'google_ads_costs_and_installs') }}\n    WHERE date IS NOT NULL\n),\n\nfinal AS (\n    SELECT\n        ARRAY_TO_STRING([\n            CAST(date AS STRING),\n            campaign_name,\n            adset_name\n        ],'') AS unique_key,\n        date,\n        campaign_name,\n        IF(\n          REGEXP_CONTAINS(campaign_name, r'[_\\[]old[\\]_]'),\n          'retargeting','UA') AS campaign_type,\n        adset_name,\n        costs AS spend,\n        installs,\n        clicks,\n        impressions\n    FROM source\n)\n\nSELECT\n    unique_key,\n    date,\n    {{ normalize('campaign_name') }} AS campaign_name,\n    campaign_type,\n    adset_name,\n    spend,\n    installs,\n    clicks,\n    impressions\nFROM final\n\n-- {% if not is_incremental() %}\n\n-- -- \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 --\n-- UNION ALL\n-- SELECT DISTINCT\n--     ARRAY_TO_STRING([\n--             CAST(date AS STRING),\n--             LOWER(campaign_name),\n--             adset_name\n--     ],'') AS unique_key,\n--     date,\n--     LOWER(campaign_name) campaign_name,\n--     IF(REGEXP_CONTAINS(campaign_name, r'\\[old\\]'),'retargeting','UA') AS campaign_type,\n--     adset_name,\n--     costs AS spend,\n--     installs,\n--     clicks,\n--     impressions\n-- FROM {{ source('agg_data', 'google_ads_costs_and_installs_sum') }}\n-- WHERE date NOT IN  < (\n--   SELECT DISTINCT date\n--   FROM final\n-- )\n-- AND date IS NOT NULL\n\n-- {% endif %}", "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize", "macro.dbt.is_incremental"], "nodes": ["source.perekrestokvprok.sheets_data.google_ads_costs_and_installs", "source.perekrestokvprok.agg_data.google_ads_costs_and_installs_sum"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["campaign_type"], "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "unique_key": "unique_key", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_google_cab_sheets"], "unique_id": "model.perekrestokvprok.stg_google_cab_sheets", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_google_cab_sheets.sql", "original_file_path": "models/staging/stg_google_cab_sheets.sql", "name": "stg_google_cab_sheets", "alias": "stg_google_cab_sheets", "checksum": {"name": "sha256", "checksum": "db802765fcc3549c6b956d04c373ed48be0f332b1f5ea68ade6f06fbbca87ac1"}, "tags": [], "refs": [], "sources": [["sheets_data", "google_ads_costs_and_installs"], ["agg_data", "google_ads_costs_and_installs_sum"]], "description": "\u0413\u0443\u0433\u043b \u0438\u0437 perek_settings", "columns": {"unique_key": {"name": "unique_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "installs": {"name": "installs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "unique_key", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "cluster_by": ["campaign_type"]}, "created_at": 1652814262.725933}, "model.perekrestokvprok.stg_google_dbm": {"raw_sql": "WITH source AS (\n    SELECT *,\n    ROW_NUMBER() \n        OVER (PARTITION BY InsertionOrderID,LineItemID, Date ORDER BY DATE(_PARTITIONTIME) DESC) AS pd_rw\n    FROM {{ source('test2', 'google_dbm_existed_dbm_report_123') }}\n)\n\nSELECT \n    Date,\n    Advertiser,\n    AdvertiserID AS advertiser_id,\n    AdvertiserCurrency AS advertiser_currency,\n    InsertionOrder AS insertion_order,\n    InsertionOrderID AS insertion_order_id,\n    LineItem AS line_item,\n    LineItemID AS line_item_id,\n    LineItemType AS line_item_type,\n    SAFE_CAST(Impressions AS INT64) AS impressions,\n    SAFE_CAST(Clicks AS INT64) AS clicks,\n    SAFE_CAST(ClickRateCTR AS FLOAT64) AS click_rate_ctr,\n    SAFE_CAST(RevenueAdvCurrency AS FLOAT64) AS revenue_adv_currency,\n    SAFE_CAST(ProfitAdvertiserCurrency AS FLOAT64) AS profit_advertiser_currency,\n    SAFE_CAST(ProfitMargin AS FLOAT64) AS profit_margin\nFROM source\nWHERE pd_rw = 1", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.test2.google_dbm_existed_dbm_report_123"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_google_dbm"], "unique_id": "model.perekrestokvprok.stg_google_dbm", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_google_dbm.sql", "original_file_path": "models/staging/stg_google_dbm.sql", "name": "stg_google_dbm", "alias": "stg_google_dbm", "checksum": {"name": "sha256", "checksum": "561259f22dcc5b1f842b942c7770c5902f238a2a5bcc27a4262b411de090b67f"}, "tags": [], "refs": [], "sources": [["test2", "google_dbm_existed_dbm_report_123"]], "description": "\u0413\u0443\u0433\u043b \u0438\u0437 \u043c\u0435\u0442\u044b \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0430", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser": {"name": "advertiser", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_currency": {"name": "advertiser_currency", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "insertion_order": {"name": "insertion_order", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "insertion_order_id": {"name": "insertion_order_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item": {"name": "line_item", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_type": {"name": "line_item_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_rate_ctr": {"name": "click_rate_ctr", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revenue_adv_currency": {"name": "revenue_adv_currency", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profit_advertiser_currency": {"name": "profit_advertiser_currency", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profit_margin": {"name": "profit_margin", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1652814262.7224}, "model.perekrestokvprok.stg_huawei_cab_sheets": {"raw_sql": "{% if target.name == 'prod' %}\n\n{{\n  config(\n    materialized='incremental',\n    unique_key='unique_key',\n    partition_by={\n      \"field\": \"date\",\n      \"data_type\": \"date\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = [\"campaign_type\"]\n  )\n}}\n\n{% endif %}\n\nWITH source AS (\n    SELECT DISTINCT\n        date,\n        {{ normalize('campaign_name')}} campaign_name,\n        status,\n        cost,\n        clicks,\n        impressions,\n        activations,\n        campaign_type AS type,\n        exchange_rate\n    FROM {{ source('sheets_data', 'huawei_data') }}\n    WHERE date IS NOT NULL\n),\n\nfinal AS (\n    SELECT\n        ARRAY_TO_STRING([\n            CAST(date AS STRING),\n            campaign_name\n        ],'') AS unique_key,\n        date,\n        campaign_name,\n        IF(\n          REGEXP_CONTAINS(campaign_name, r'[_\\[]new[\\]_]'),'UA','retargeting'\n          ) AS campaign_type,\n        type,\n        status,\n        activations,\n        cost,\n        cost * exchange_rate AS spend,\n        clicks,\n        impressions,\n        exchange_rate\n    FROM source\n)\n\nSELECT\n    unique_key,\n    date,\n    campaign_name,\n    campaign_type,\n    type,\n    status,\n    activations,\n    cost,\n    spend,\n    clicks,\n    impressions,\n    exchange_rate\nFROM final", "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize"], "nodes": ["source.perekrestokvprok.sheets_data.huawei_data"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["campaign_type"], "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "unique_key": "unique_key", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_huawei_cab_sheets"], "unique_id": "model.perekrestokvprok.stg_huawei_cab_sheets", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_huawei_cab_sheets.sql", "original_file_path": "models/staging/stg_huawei_cab_sheets.sql", "name": "stg_huawei_cab_sheets", "alias": "stg_huawei_cab_sheets", "checksum": {"name": "sha256", "checksum": "b6a02f37e492eeefd229bda494591a017adfe25573848fb5eab4cbfa72c339eb"}, "tags": [], "refs": [], "sources": [["sheets_data", "huawei_data"]], "description": "Huawei \u0438\u0437 perek_settings", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "unique_key", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "cluster_by": ["campaign_type"]}, "created_at": 1652814262.7762432}, "model.perekrestokvprok.stg_mistake_cmp": {"raw_sql": "{% if target.name == 'prod' %}\n\n{{\n  config(\n    materialized='table',\n  )\n}}\n\n{% endif %}\n\n\nSELECT\n    mistake,\n    correct\nFROM {{ source('sheets_data', 'mistake_cmp') }}\nWHERE mistake IS NOT NULL", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data.mistake_cmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_mistake_cmp"], "unique_id": "model.perekrestokvprok.stg_mistake_cmp", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_mistake_cmp.sql", "original_file_path": "models/staging/stg_mistake_cmp.sql", "name": "stg_mistake_cmp", "alias": "stg_mistake_cmp", "checksum": {"name": "sha256", "checksum": "79e3a6f5fa14e75818012c6993589e035d29a11aa638834765df88662f2bd354"}, "tags": [], "refs": [], "sources": [["sheets_data", "mistake_cmp"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1652814262.5172076}, "model.perekrestokvprok.stg_partner_limits": {"raw_sql": "{% if target.name == 'prod' %}\n\n{{\n  config(\n    materialized='table',\n  )\n}}\n\n{% endif %}\n\n\nSELECT\n    start_date,\n    end_date,\n    partner,\n    `limit` as limits,\n    type,\n    source\nFROM {{ source('sheets_data','limits_sheet') }}\nWHERE start_date IS NOT NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["source.perekrestokvprok.sheets_data.limits_sheet"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_partner_limits"], "unique_id": "model.perekrestokvprok.stg_partner_limits", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_partner_limits.sql", "original_file_path": "models/staging/stg_partner_limits.sql", "name": "stg_partner_limits", "alias": "stg_partner_limits", "checksum": {"name": "sha256", "checksum": "cb84763becb9accb6bd42f71db50d0c9e5d87cded5ad54a4f546d314bfabed7f"}, "tags": [], "refs": [], "sources": [["sheets_data", "limits_sheet"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "docs_netlify/compiled/perekrestokvprok/models/staging/stg_partner_limits.sql", "build_path": "docs_netlify/run/perekrestokvprok/models/staging/stg_partner_limits.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1652814262.5251625, "compiled_sql": "\n\n\n\n\n\n\nSELECT\n    start_date,\n    end_date,\n    partner,\n    `limit` as limits,\n    type,\n    source\nFROM `perekrestokvprok-bq`.`sheets_data`.`limits_sheet`\nWHERE start_date IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_partner_limits`"}, "model.perekrestokvprok.stg_placement_dict": {"raw_sql": "{% if target.name == 'prod' %}\n\n{{\n  config(\n    materialized='table',\n  )\n}}\n\n{% endif %}\n\n\nSELECT\n    PlacementID AS placement_id,\n    Placement,\n    InsertionOrderID AS insertion_order_id\nFROM {{ source('DCM', 'Placemant_dict') }}\nWHERE PlacementID IS NOT NULL", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.DCM.Placemant_dict"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_placement_dict"], "unique_id": "model.perekrestokvprok.stg_placement_dict", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_placement_dict.sql", "original_file_path": "models/staging/stg_placement_dict.sql", "name": "stg_placement_dict", "alias": "stg_placement_dict", "checksum": {"name": "sha256", "checksum": "8145cd4eff8ee6f74fe590336e2c9fd29acaa91f369a7915adfa4cae179bfaca"}, "tags": [], "refs": [], "sources": [["DCM", "Placemant_dict"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1652814262.5333414}, "model.perekrestokvprok.stg_promocode_client_data": {"raw_sql": "SELECT\n    DATE(orderDate) AS order_date,\n    region,\n    promoname AS promo_name,\n    promonamefull AS promo_name_full,\n    promocode AS promo_code,\n    orderid AS order_id,\n    platform,\n    revenue,\n    cnt_order AS order_count\nFROM {{ source('agg_data','promocod_client_data') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.agg_data.promocod_client_data"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_promocode_client_data"], "unique_id": "model.perekrestokvprok.stg_promocode_client_data", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_promocode_client_data.sql", "original_file_path": "models/staging/stg_promocode_client_data.sql", "name": "stg_promocode_client_data", "alias": "stg_promocode_client_data", "checksum": {"name": "sha256", "checksum": "962e7c6db8ba3db89d3a7ef820debc1b2aa88b6889c5417f7d6f45b283a5e65a"}, "tags": [], "refs": [], "sources": [["agg_data", "promocod_client_data"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1652814262.5414064}, "model.perekrestokvprok.stg_promo_dict_sheets": {"raw_sql": "{% if target.name == 'prod' %}\n\n{{\n  config(\n    materialized='table',\n  )\n}}\n\n{% endif %}\n\n\nSELECT DISTINCT\n    LOWER(promo) AS promo,\n    name\nFROM {{ source('sheets_data', 'promo_dict_sheets') }}\nWHERE promo IS NOT NULL", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data.promo_dict_sheets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_promo_dict_sheets"], "unique_id": "model.perekrestokvprok.stg_promo_dict_sheets", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_promo_dict_sheets.sql", "original_file_path": "models/staging/stg_promo_dict_sheets.sql", "name": "stg_promo_dict_sheets", "alias": "stg_promo_dict_sheets", "checksum": {"name": "sha256", "checksum": "b47356360879f60028f91aff930687fcc7cf399a3039b2cb2f6b73a3c094a545"}, "tags": [], "refs": [], "sources": [["sheets_data", "promo_dict_sheets"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1652814262.5443835}, "model.perekrestokvprok.stg_promo_sheets": {"raw_sql": "{% if target.name == 'prod' %}\n\n{{\n  config(\n    materialized='table',\n  )\n}}\n\n{% endif %}\n\n\nSELECT\n    date_start,\n    date_end,\n    promocod AS promocode,\n    type,\n    Channel AS channel\nFROM {{ source('sheets_data', 'promo_sheets') }}\nWHERE date_start IS NOT NULL", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data.promo_sheets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_promo_sheets"], "unique_id": "model.perekrestokvprok.stg_promo_sheets", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_promo_sheets.sql", "original_file_path": "models/staging/stg_promo_sheets.sql", "name": "stg_promo_sheets", "alias": "stg_promo_sheets", "checksum": {"name": "sha256", "checksum": "ecd029a7046034b2cec079bc2be989812c9425a171508ae66a487a4ac18eba1f"}, "tags": [], "refs": [], "sources": [["sheets_data", "promo_sheets"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1652814262.5525346}, "model.perekrestokvprok.stg_rate_info": {"raw_sql": "{% if target.name == 'prod' %}\n\n{{\n  config(\n    materialized='table',\n  )\n}}\n\n{% endif %}\n\n\nSELECT\n    start_date,\n    end_date,\n    partner,\n    platform,\n    rate_for_parthner AS rate_for_partner,\n    plan_f_p,\n    rate_for_us,\n    type,\n    source\nFROM {{ source('sheets_data','rate_info') }}\nWHERE start_date IS NOT NULL", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data.rate_info"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_rate_info"], "unique_id": "model.perekrestokvprok.stg_rate_info", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_rate_info.sql", "original_file_path": "models/staging/stg_rate_info.sql", "name": "stg_rate_info", "alias": "stg_rate_info", "checksum": {"name": "sha256", "checksum": "d064f55655820cbbc8b61253ec985a7c79468a4f53083d442e2b1b84cd329748"}, "tags": [], "refs": [], "sources": [["sheets_data", "rate_info"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1652814262.561885}, "model.perekrestokvprok.stg_tiktok_cab_meta": {"raw_sql": "{% if target.name == 'prod' %}\n\n{{\n  config(\n    materialized='incremental',\n    unique_key='unique_key',\n    on_schema_change='append_new_columns',\n    partition_by={\n      \"field\": \"date\",\n      \"data_type\": \"date\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = [\"campaign_type\"]\n  )\n}}\n\n{% endif %}\n\nWITH source AS (\n    SELECT\n        stat_time_day,\n        LOWER(campaign_name) AS campaign_name,\n        adgroup_name,\n        impressions,\n        reach,\n        spend,\n        clicks,\n        total_purchase,\n        total_achieve_level,\n        app_install\n    FROM {{ source('test2', 'tiktok_perek_settings_6952834783391023106') }}\n),\n\nfinal AS (\n    SELECT\n        ARRAY_TO_STRING([\n            CAST(DATE(stat_time_day) AS STRING),\n            campaign_name,\n            adgroup_name\n        ],'') AS unique_key,\n        DATE(stat_time_day) AS date,\n        campaign_name,\n        IF(REGEXP_CONTAINS(campaign_name, r'_ret_'),'retargeting','UA') AS campaign_type,\n        adgroup_name AS adset_name,\n        impressions,\n        reach,\n        spend,\n        clicks,\n        total_purchase AS purchase,\n        total_achieve_level AS first_purchase,\n        app_install\n    FROM source\n)\n\nSELECT\n    unique_key,\n    date,\n    campaign_name,\n    campaign_type,\n    adset_name,\n    impressions,\n    reach,\n    spend,\n    clicks,\n    purchase,\n    first_purchase,\n    app_install\nFROM final\n\n{% if not is_incremental() %}\n\n-- \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 --\nUNION ALL\nSELECT DISTINCT\n    ARRAY_TO_STRING([\n      CAST(date AS STRING),\n      LOWER(campaign_name),\n      ad_group_name\n      ],'') AS unique_key,\n    date,\n    LOWER(campaign_name) AS campaign_name,\n    IF(REGEXP_CONTAINS(LOWER(campaign_name), r'_ret_'),'retargeting','UA') AS campaign_type,\n    ad_group_name AS adset_name,\n    0 AS impressions,\n    0 AS reach,\n    cost AS spend,\n    0 AS clicks,\n    total_purchases AS purchase,\n    total_achieve_level\t AS first_purchase,\n    0 AS app_install\nFROM {{ source('sheets_data', 'TIKTOK_table') }}\nWHERE date < (\n  SELECT MIN(date)\n  FROM final\n)\n\n{% endif %}", "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.perekrestokvprok.test2.tiktok_perek_settings_6952834783391023106", "source.perekrestokvprok.sheets_data.TIKTOK_table"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "append_new_columns", "cluster_by": ["campaign_type"], "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "unique_key": "unique_key", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_tiktok_cab_meta"], "unique_id": "model.perekrestokvprok.stg_tiktok_cab_meta", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_tiktok_cab_meta.sql", "original_file_path": "models/staging/stg_tiktok_cab_meta.sql", "name": "stg_tiktok_cab_meta", "alias": "stg_tiktok_cab_meta", "checksum": {"name": "sha256", "checksum": "7005239863f65787d45ada278493ed1dabaa91c8e8c1be7eadff63b2283db3d6"}, "tags": [], "refs": [], "sources": [["test2", "tiktok_perek_settings_6952834783391023106"], ["sheets_data", "TIKTOK_table"]], "description": "\u0422\u0438\u043a\u0442\u043e\u043a \u0438\u0437 \u043c\u0435\u0442\u044b", "columns": {"unique_key": {"name": "unique_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reach": {"name": "reach", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "purchase": {"name": "purchase", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_purchase": {"name": "first_purchase", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "unique_key", "on_schema_change": "append_new_columns", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "cluster_by": ["campaign_type"]}, "created_at": 1652814262.7159803}, "model.perekrestokvprok.stg_twitter_cab_sheets": {"raw_sql": "{% if target.name == 'prod' %}\n\n{{\n  config(\n    materialized='incremental',\n    unique_key='unique_key',\n    partition_by={\n      \"field\": \"date\",\n      \"data_type\": \"date\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = [\"campaign_type\"]\n  )\n}}\n\n{% endif %}\n\nWITH source AS (\n    SELECT DISTINCT\n        string_field_0,\n        string_field_2,\n        string_field_9,\n        string_field_10,\n        ROW_NUMBER() OVER(PARTITION BY string_field_0, string_field_2) AS counter\n    FROM {{ source('sheets_data', 'twitter_sheets') }}\n    WHERE string_field_0 IS NOT NULL\n),\n\nfinal AS (\n    SELECT DISTINCT\n        ARRAY_TO_STRING([\n            CAST(DATE(REPLACE(string_field_0,'.','-')) AS STRING),\n            LOWER(string_field_2)\n        ],'') AS unique_key,\n        DATE(REPLACE(string_field_0,'.','-')) AS date,\n        LOWER(string_field_2) AS campaign_name,\n        SAFE_CAST(REPLACE(string_field_9,',','.') AS FLOAT64) AS impressions,\n        SAFE_CAST(REPLACE(string_field_10,',','.') AS FLOAT64) AS spend\n    FROM source\n    WHERE counter = 1\n)\n\nSELECT DISTINCT\n    unique_key,\n    date,\n    {{ normalize('campaign_name') }} AS campaign_name,\n    IF(REGEXP_CONTAINS(campaign_name, r'_old_'),'retargeting','UA') AS campaign_type,\n    impressions,\n    spend\nFROM final\n\n{% if not is_incremental() %}\n\n-- \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 --\nUNION ALL\nSELECT DISTINCT\n    ARRAY_TO_STRING([\n      CAST(date AS STRING),\n      LOWER(campaign_name)\n      ],'') AS unique_key,\n    date,\n    LOWER(campaign_name) campaign_name,\n    IF(REGEXP_CONTAINS(campaign_name, r'_old_'),'retargeting','UA') AS campaign_type,\n    impressions,\n    spend,\nFROM {{ source('sheets_data', 'twitter_data') }}\nWHERE date < (\n  SELECT MIN(date)\n  FROM final\n)\nAND date IS NOT NULL\n\n{% endif %}", "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize", "macro.dbt.is_incremental"], "nodes": ["source.perekrestokvprok.sheets_data.twitter_sheets", "source.perekrestokvprok.sheets_data.twitter_data"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["campaign_type"], "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "unique_key": "unique_key", "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_twitter_cab_sheets"], "unique_id": "model.perekrestokvprok.stg_twitter_cab_sheets", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "staging/stg_twitter_cab_sheets.sql", "original_file_path": "models/staging/stg_twitter_cab_sheets.sql", "name": "stg_twitter_cab_sheets", "alias": "stg_twitter_cab_sheets", "checksum": {"name": "sha256", "checksum": "ecfd9a43260bc153e84876aa4b8629b26bc1f626c02e2f7a5d034c9830b6ec50"}, "tags": [], "refs": [], "sources": [["sheets_data", "twitter_sheets"], ["sheets_data", "twitter_data"]], "description": "\u0422\u0432\u0438\u0442\u0442\u0435\u0440 \u0438\u0437 perek_settings", "columns": {"unique_key": {"name": "unique_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "perekrestokvprok://models/staging/stg_cabs.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "unique_key", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "cluster_by": ["campaign_type"]}, "created_at": 1652814262.7108307}, "test.perekrestokvprok.freshness_stg_tiktok_cab_meta_date.2e7fade306": {"raw_sql": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_tiktok_cab_meta')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.stg_tiktok_cab_meta"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_stg_tiktok_cab_meta_date"], "unique_id": "test.perekrestokvprok.freshness_stg_tiktok_cab_meta_date.2e7fade306", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "freshness_stg_tiktok_cab_meta_date.sql", "original_file_path": "models/staging/stg_cabs.yml", "name": "freshness_stg_tiktok_cab_meta_date", "alias": "freshness_stg_tiktok_cab_meta_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_cab_meta"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1652814262.7868063, "column_name": "date", "file_key_name": "models.stg_tiktok_cab_meta"}, "test.perekrestokvprok.freshness_stg_google_dbm_date__2.045c65720f": {"raw_sql": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "freshness", "kwargs": {"days": "2", "column_name": "date", "model": "{{ get_where_subquery(ref('stg_google_dbm')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.stg_google_dbm"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_stg_google_dbm_date__2"], "unique_id": "test.perekrestokvprok.freshness_stg_google_dbm_date__2.045c65720f", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "freshness_stg_google_dbm_date__2.sql", "original_file_path": "models/staging/stg_cabs.yml", "name": "freshness_stg_google_dbm_date__2", "alias": "freshness_stg_google_dbm_date__2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_dbm"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1652814262.8046606, "column_name": "date", "file_key_name": "models.stg_google_dbm"}, "test.perekrestokvprok.freshness_stg_google_cab_sheets_date.ea19a30b02": {"raw_sql": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_google_cab_sheets')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.stg_google_cab_sheets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_stg_google_cab_sheets_date"], "unique_id": "test.perekrestokvprok.freshness_stg_google_cab_sheets_date.ea19a30b02", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "freshness_stg_google_cab_sheets_date.sql", "original_file_path": "models/staging/stg_cabs.yml", "name": "freshness_stg_google_cab_sheets_date", "alias": "freshness_stg_google_cab_sheets_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_cab_sheets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1652814262.8117914, "column_name": "date", "file_key_name": "models.stg_google_cab_sheets"}, "test.perekrestokvprok.freshness_stg_af_for_media_date.4abd88be82": {"raw_sql": "{{ test_freshness(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_af_for_media')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.stg_af_for_media"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_stg_af_for_media_date"], "unique_id": "test.perekrestokvprok.freshness_stg_af_for_media_date.4abd88be82", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "freshness_stg_af_for_media_date.sql", "original_file_path": "models/staging/stg_cabs.yml", "name": "freshness_stg_af_for_media_date", "alias": "freshness_stg_af_for_media_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_af_for_media"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1652814262.8181808, "column_name": "date", "file_key_name": "models.stg_af_for_media"}, "test.perekrestokvprok.freshness_stg_af_client_data_date.e3578f41c6": {"raw_sql": "{{ test_freshness(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_af_client_data')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.stg_af_client_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_stg_af_client_data_date"], "unique_id": "test.perekrestokvprok.freshness_stg_af_client_data_date.e3578f41c6", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "freshness_stg_af_client_data_date.sql", "original_file_path": "models/staging/stg_cabs.yml", "name": "freshness_stg_af_client_data_date", "alias": "freshness_stg_af_client_data_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_af_client_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1652814262.8243763, "column_name": "date", "file_key_name": "models.stg_af_client_data"}, "test.perekrestokvprok.freshness_int_yandex_cab_meta_date.f0993cbb4f": {"raw_sql": "{{ test_freshness(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('int_yandex_cab_meta')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.int_yandex_cab_meta"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_int_yandex_cab_meta_date"], "unique_id": "test.perekrestokvprok.freshness_int_yandex_cab_meta_date.f0993cbb4f", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "freshness_int_yandex_cab_meta_date.sql", "original_file_path": "models/staging/stg_cabs.yml", "name": "freshness_int_yandex_cab_meta_date", "alias": "freshness_int_yandex_cab_meta_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_yandex_cab_meta"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1652814262.830517, "column_name": "date", "file_key_name": "models.int_yandex_cab_meta"}, "test.perekrestokvprok.freshness_int_vk_cab_meta_date.4e146ecfd6": {"raw_sql": "{{ test_freshness(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('int_vk_cab_meta')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.int_vk_cab_meta"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_int_vk_cab_meta_date"], "unique_id": "test.perekrestokvprok.freshness_int_vk_cab_meta_date.4e146ecfd6", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "freshness_int_vk_cab_meta_date.sql", "original_file_path": "models/staging/stg_cabs.yml", "name": "freshness_int_vk_cab_meta_date", "alias": "freshness_int_vk_cab_meta_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_vk_cab_meta"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1652814262.8366542, "column_name": "date", "file_key_name": "models.int_vk_cab_meta"}, "test.perekrestokvprok.freshness_int_mytarget_cab_meta_date.b7126cd27f": {"raw_sql": "{{ test_freshness(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('int_mytarget_cab_meta')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.int_mytarget_cab_meta"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_int_mytarget_cab_meta_date"], "unique_id": "test.perekrestokvprok.freshness_int_mytarget_cab_meta_date.b7126cd27f", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "freshness_int_mytarget_cab_meta_date.sql", "original_file_path": "models/staging/stg_cabs.yml", "name": "freshness_int_mytarget_cab_meta_date", "alias": "freshness_int_mytarget_cab_meta_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_mytarget_cab_meta"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1652814262.8441565, "column_name": "date", "file_key_name": "models.int_mytarget_cab_meta"}, "test.perekrestokvprok.freshness_int_google_dcm_reach_date__2.6f5c233395": {"raw_sql": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "freshness", "kwargs": {"days": "2", "column_name": "date", "model": "{{ get_where_subquery(ref('int_google_dcm_reach')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.int_google_dcm_reach"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_int_google_dcm_reach_date__2"], "unique_id": "test.perekrestokvprok.freshness_int_google_dcm_reach_date__2.6f5c233395", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "freshness_int_google_dcm_reach_date__2.sql", "original_file_path": "models/staging/stg_cabs.yml", "name": "freshness_int_google_dcm_reach_date__2", "alias": "freshness_int_google_dcm_reach_date__2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_google_dcm_reach"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1652814262.8515072, "column_name": "date", "file_key_name": "models.int_google_dcm_reach"}, "test.perekrestokvprok.freshness_int_google_dcm_activity_meta_interaction_date.16b18e3b1a": {"raw_sql": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "freshness", "kwargs": {"column_name": "interaction_date", "model": "{{ get_where_subquery(ref('int_google_dcm_activity_meta')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.int_google_dcm_activity_meta"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_int_google_dcm_activity_meta_interaction_date"], "unique_id": "test.perekrestokvprok.freshness_int_google_dcm_activity_meta_interaction_date.16b18e3b1a", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "freshness_int_google_dcm_activity_meta_interaction_date.sql", "original_file_path": "models/staging/stg_cabs.yml", "name": "freshness_int_google_dcm_activity_meta_interaction_date", "alias": "freshness_int_google_dcm_activity_meta_interaction_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_google_dcm_activity_meta"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1652814262.8594718, "column_name": "interaction_date", "file_key_name": "models.int_google_dcm_activity_meta"}, "test.perekrestokvprok.freshness_int_google_dbm_impressions_clicks_revenue_meta_date__2.c25c2d8459": {"raw_sql": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"freshness_int_google_dbm_impre_a68611eec12d3637ca956e62d894d6f6\") }}", "test_metadata": {"name": "freshness", "kwargs": {"days": "2", "column_name": "date", "model": "{{ get_where_subquery(ref('int_google_dbm_impressions_clicks_revenue_meta')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta"]}, "config": {"enabled": true, "alias": "freshness_int_google_dbm_impre_a68611eec12d3637ca956e62d894d6f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_int_google_dbm_impressions_clicks_revenue_meta_date__2"], "unique_id": "test.perekrestokvprok.freshness_int_google_dbm_impressions_clicks_revenue_meta_date__2.c25c2d8459", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "freshness_int_google_dbm_impre_a68611eec12d3637ca956e62d894d6f6.sql", "original_file_path": "models/staging/stg_cabs.yml", "name": "freshness_int_google_dbm_impressions_clicks_revenue_meta_date__2", "alias": "freshness_int_google_dbm_impre_a68611eec12d3637ca956e62d894d6f6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_google_dbm_impressions_clicks_revenue_meta"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "freshness_int_google_dbm_impre_a68611eec12d3637ca956e62d894d6f6"}, "created_at": 1652814262.866184, "column_name": "date", "file_key_name": "models.int_google_dbm_impressions_clicks_revenue_meta"}, "test.perekrestokvprok.freshness_int_google_dbm_dv360_cost_date.0b71809b70": {"raw_sql": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('int_google_dbm_dv360_cost')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.int_google_dbm_dv360_cost"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_int_google_dbm_dv360_cost_date"], "unique_id": "test.perekrestokvprok.freshness_int_google_dbm_dv360_cost_date.0b71809b70", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "freshness_int_google_dbm_dv360_cost_date.sql", "original_file_path": "models/staging/stg_cabs.yml", "name": "freshness_int_google_dbm_dv360_cost_date", "alias": "freshness_int_google_dbm_dv360_cost_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_google_dbm_dv360_cost"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1652814262.8751047, "column_name": "date", "file_key_name": "models.int_google_dbm_dv360_cost"}, "test.perekrestokvprok.freshness_int_asa_cab_meta_date.4c0f53d67b": {"raw_sql": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('int_asa_cab_meta')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.int_asa_cab_meta"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_int_asa_cab_meta_date"], "unique_id": "test.perekrestokvprok.freshness_int_asa_cab_meta_date.4c0f53d67b", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "freshness_int_asa_cab_meta_date.sql", "original_file_path": "models/staging/stg_cabs.yml", "name": "freshness_int_asa_cab_meta_date", "alias": "freshness_int_asa_cab_meta_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asa_cab_meta"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1652814262.8820777, "column_name": "date", "file_key_name": "models.int_asa_cab_meta"}, "test.perekrestokvprok.freshness_stg_asa_cab_sheets_date.118a491372": {"raw_sql": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_asa_cab_sheets')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.stg_asa_cab_sheets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_stg_asa_cab_sheets_date"], "unique_id": "test.perekrestokvprok.freshness_stg_asa_cab_sheets_date.118a491372", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "freshness_stg_asa_cab_sheets_date.sql", "original_file_path": "models/staging/stg_cabs.yml", "name": "freshness_stg_asa_cab_sheets_date", "alias": "freshness_stg_asa_cab_sheets_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asa_cab_sheets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1652814262.8886456, "column_name": "date", "file_key_name": "models.stg_asa_cab_sheets"}, "test.perekrestokvprok.freshness_stg_facebook_cab_sheets_date.602c75baed": {"raw_sql": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_facebook_cab_sheets')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.stg_facebook_cab_sheets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_stg_facebook_cab_sheets_date"], "unique_id": "test.perekrestokvprok.freshness_stg_facebook_cab_sheets_date.602c75baed", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "freshness_stg_facebook_cab_sheets_date.sql", "original_file_path": "models/staging/stg_cabs.yml", "name": "freshness_stg_facebook_cab_sheets_date", "alias": "freshness_stg_facebook_cab_sheets_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_cab_sheets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1652814262.8956158, "column_name": "date", "file_key_name": "models.stg_facebook_cab_sheets"}, "test.perekrestokvprok.freshness_stg_huawei_cab_sheets_date.c76e31a5e5": {"raw_sql": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_huawei_cab_sheets')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.stg_huawei_cab_sheets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_stg_huawei_cab_sheets_date"], "unique_id": "test.perekrestokvprok.freshness_stg_huawei_cab_sheets_date.c76e31a5e5", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "freshness_stg_huawei_cab_sheets_date.sql", "original_file_path": "models/staging/stg_cabs.yml", "name": "freshness_stg_huawei_cab_sheets_date", "alias": "freshness_stg_huawei_cab_sheets_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_huawei_cab_sheets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1652814262.9025378, "column_name": "date", "file_key_name": "models.stg_huawei_cab_sheets"}}, "sources": {"source.perekrestokvprok.sheets_data.limits_sheet": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "limits_sheet"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.limits_sheet", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "limits_sheet", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "limits_sheet", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043b\u0438\u043c\u0438\u0442\u0430\u043c\u0438 \u043f\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c (https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=417840891)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`limits_sheet`", "created_at": 1652814262.9076395}, "source.perekrestokvprok.sheets_data.TIKTOK_table": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "TIKTOK_table"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.TIKTOK_table", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "TIKTOK_table", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "TIKTOK_table", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0420\u041a \u0422\u0438\u043a\u0442\u043e\u043a\u0430 (c 01.10.2021). \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f 1 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`TIKTOK_table`", "created_at": 1652814262.9078426}, "source.perekrestokvprok.sheets_data.tiktok_sheets_campaign_cost_purchases": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "tiktok_sheets_campaign_cost_purchases"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.tiktok_sheets_campaign_cost_purchases", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "tiktok_sheets_campaign_cost_purchases", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "tiktok_sheets_campaign_cost_purchases", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0420\u041a \u0422\u0438\u043a\u0442\u043e\u043a\u0430 (\u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u0435\u0441\u044f\u0446 \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1069669087)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`tiktok_sheets_campaign_cost_purchases`", "created_at": 1652814262.9079902}, "source.perekrestokvprok.sheets_data.FBNEW_data": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "FBNEW_data"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.FBNEW_data", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "FBNEW_data", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "FBNEW_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0420\u041a \u0424\u0435\u0439\u0441\u0431\u0443\u043a\u0430 (c 01.05.2021)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`FBNEW_data`", "created_at": 1652814262.9081311}, "source.perekrestokvprok.sheets_data.fb_spreadsheets_data": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "fb_spreadsheets_data"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.fb_spreadsheets_data", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "fb_spreadsheets_data", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "fb_spreadsheets_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0420\u041a \u0424\u0435\u0439\u0441\u0431\u0443\u043a\u0430 (\u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u0435\u0441\u044f\u0446 \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1069669087)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`fb_spreadsheets_data`", "created_at": 1652814262.9082701}, "source.perekrestokvprok.sheets_data.twitter_sheets": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "twitter_sheets"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.twitter_sheets", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "twitter_sheets", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "twitter_sheets", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0420\u041a \u0422\u0432\u0438\u0442\u0442\u0435\u0440\u0430 (\u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u0435\u0441\u044f\u0446 \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1069669087)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`twitter_sheets`", "created_at": 1652814262.9084086}, "source.perekrestokvprok.sheets_data.twitter_data": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "twitter_data"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.twitter_data", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "twitter_data", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "twitter_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0420\u041a \u0422\u0432\u0438\u0442\u0442\u0435\u0440\u0430 (c 01.10.2021)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`twitter_data`", "created_at": 1652814262.9086108}, "source.perekrestokvprok.sheets_data.rate_data_for_inside": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "rate_data_for_inside"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.rate_data_for_inside", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "rate_data_for_inside", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "rate_data_for_inside", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u043e \u0441\u0442\u0430\u0432\u043a\u0430\u043c\u0438 (https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1069669087)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`rate_data_for_inside`", "created_at": 1652814262.9087698}, "source.perekrestokvprok.sheets_data.mistake_cmp": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "mistake_cmp"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.mistake_cmp", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "mistake_cmp", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "mistake_cmp", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u044b\u043c\u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u0439 (https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1069669087)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`mistake_cmp`", "created_at": 1652814262.9089098}, "source.perekrestokvprok.sheets_data.promo_dict_sheets": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "promo_dict_sheets"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.promo_dict_sheets", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "promo_dict_sheets", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "promo_dict_sheets", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1136333702", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`promo_dict_sheets`", "created_at": 1652814262.9090486}, "source.perekrestokvprok.sheets_data.promo_dict_data": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "promo_dict_data"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.promo_dict_data", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "promo_dict_data", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "promo_dict_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u043f\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u0438\u0437 promo_dict_sheets", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`promo_dict_data`", "created_at": 1652814262.9091868}, "source.perekrestokvprok.sheets_data.rate_info": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "rate_info"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.rate_info", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "rate_info", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "rate_info", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=896311385", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`rate_info`", "created_at": 1652814262.909326}, "source.perekrestokvprok.sheets_data.budget_and_plan": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "budget_and_plan"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.budget_and_plan", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "budget_and_plan", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "budget_and_plan", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1919397242", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`budget_and_plan`", "created_at": 1652814262.909464}, "source.perekrestokvprok.sheets_data.promo_sheets": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "promo_sheets"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.promo_sheets", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "promo_sheets", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "promo_sheets", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1301207630 \u0441 \u0438\u044e\u043b\u044f \u043d\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`promo_sheets`", "created_at": 1652814262.9096434}, "source.perekrestokvprok.sheets_data.google_ads_costs_and_installs": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "google_ads_costs_and_installs"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.google_ads_costs_and_installs", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "google_ads_costs_and_installs", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "google_ads_costs_and_installs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u043a\u043e\u0441\u0442\u044b,\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438,\u043a\u043b\u0438\u043a\u0438 \u0438 \u043f\u043e\u043a\u0430\u0437\u044b \u0438\u0437 \u0413\u0443\u0433\u043b \u0410\u0434\u0441 (\u0441 \u0430\u0434\u0441\u0435\u0442\u043e\u043c) - https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=2062992783", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`google_ads_costs_and_installs`", "created_at": 1652814262.909795}, "source.perekrestokvprok.sheets_data.google_ads_costs_27_30_dec_2021": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "google_ads_costs_27_30_dec_2021"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.google_ads_costs_27_30_dec_2021", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "google_ads_costs_27_30_dec_2021", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "google_ads_costs_27_30_dec_2021", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0440\u0430\u0437\u043e\u0432\u0430\u044f \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0437 \u0434\u0440. \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`google_ads_costs_27_30_dec_2021`", "created_at": 1652814262.9099326}, "source.perekrestokvprok.sheets_data.Asa_cost": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "Asa_cost"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.Asa_cost", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "Asa_cost", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "Asa_cost", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ASA \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1016604704", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`Asa_cost`", "created_at": 1652814262.910069}, "source.perekrestokvprok.sheets_data.huawei_data": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "huawei_data"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.huawei_data", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "huawei_data", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "huawei_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Huawei \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=646019346", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`huawei_data`", "created_at": 1652814262.9102046}, "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1605495720": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "vk_campaign_stat_1900013586_1605495720"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1605495720", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "vk_campaign_stat_1900013586_1605495720", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "vk_campaign_stat_1900013586_1605495720", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0421\u0422\u0410\u0420\u042b\u0419 Meta VK (Autofeed VK Ads 1900013586_1605495720 - https://meta.realweb.ru/card?e=2770&o=8c107494-12ab-4d13-969a-14b552e357a0&a=58)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`vk_campaign_stat_1900013586_1605495720`", "created_at": 1652814262.9103408}, "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1607141417": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "vk_campaign_stat_1900013586_1607141417"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1607141417", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "vk_campaign_stat_1900013586_1607141417", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "vk_campaign_stat_1900013586_1607141417", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u041d\u041e\u0412\u042b\u0419 Meta VK (Autofeed VK Ads 1900013586_1607141417 - https://meta.realweb.ru/card?e=2770&o=c237257a-694b-4dd5-b9a6-42e0588ccdb0&a=58)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`vk_campaign_stat_1900013586_1607141417`", "created_at": 1652814262.9104774}, "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_x5perek_direct": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "yandex_direct_ad_keyword_stat_x5perek_direct"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_x5perek_direct", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "yandex_direct_ad_keyword_stat_x5perek_direct", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "yandex_direct_ad_keyword_stat_x5perek_direct", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Meta Yandex Direct (Autofeed Yandex Direct x5perek-direct \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u043e \u0444\u0440\u0430\u0437\u0430\u043c \u0438 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f\u043c (CUSTOM_REPORT))", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`yandex_direct_ad_keyword_stat_x5perek_direct`", "created_at": 1652814262.9106514}, "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_perek_vprok_sf": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "yandex_direct_ad_keyword_stat_perek_vprok_sf"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_perek_vprok_sf", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "yandex_direct_ad_keyword_stat_perek_vprok_sf", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "yandex_direct_ad_keyword_stat_perek_vprok_sf", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Meta Yandex Direct (Autofeed Yandex Direct perek-vprok-sf \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u043e \u0444\u0440\u0430\u0437\u0430\u043c \u0438 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f\u043c (CUSTOM_REPORT))", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`yandex_direct_ad_keyword_stat_perek_vprok_sf`", "created_at": 1652814262.9108305}, "source.perekrestokvprok.MetaCustom.mytarget_banner_stat_d0927adb05_agency_client": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "mytarget_banner_stat_d0927adb05_agency_client"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.mytarget_banner_stat_d0927adb05_agency_client", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "mytarget_banner_stat_d0927adb05_agency_client", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "mytarget_banner_stat_d0927adb05_agency_client", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Meta MT (Autofeed MyTarget d0927adb05@agency_client \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u043e \u0431\u0430\u043d\u043d\u0435\u0440\u0430\u043c - https://meta.realweb.ru/card?e=2770&o=797ab813-c351-4e39-9cef-254144dfae39&a=58)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`mytarget_banner_stat_d0927adb05_agency_client`", "created_at": 1652814262.9110243}, "source.perekrestokvprok.MetaCustom.apple_search_ads_ASA_cost": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "apple_search_ads_ASA_cost"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.apple_search_ads_ASA_cost", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "apple_search_ads_ASA_cost", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "apple_search_ads_ASA_cost", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Meta ASA (Perek_vprok_asa_cost_yaf - https://meta.realweb.ru/card?e=2770&o=a06700c1-116c-4b69-ac5d-f9ee9314e3d4&a=58)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`apple_search_ads_ASA_cost`", "created_at": 1652814262.9111667}, "source.perekrestokvprok.MetaCustom.google_dbm_google_dv360_cost_5807131": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "google_dbm_google_dv360_cost_5807131"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.google_dbm_google_dv360_cost_5807131", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "google_dbm_google_dv360_cost_5807131", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "google_dbm_google_dv360_cost_5807131", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Meta DV360 (Autofeed DoubleClick Bid Manager (Display&Video360) 5807131 DV360_Base_Report_with_Cost - https://meta.realweb.ru/card?e=2770&o=f8b65eb8-497a-4d7d-94c0-fbd8b9c3cb35&a=58)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`google_dbm_google_dv360_cost_5807131`", "created_at": 1652814262.911305}, "source.perekrestokvprok.MetaCustom.google_adwords_campaign_stat_4284985623": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "google_adwords_campaign_stat_4284985623"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.google_adwords_campaign_stat_4284985623", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "google_adwords_campaign_stat_4284985623", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "google_adwords_campaign_stat_4284985623", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Meta google ads, \u0438\u0441\u043f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 rw_cost_view (Autofeed Google Ads 4284985623 \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u043e \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u044f\u043c (AD_PERFORMANCE_REPORT) - https://meta.realweb.ru/card?e=2770&o=876ff8b5-48e5-48f2-86f2-edfa030dd583&a=58)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`google_adwords_campaign_stat_4284985623`", "created_at": 1652814262.9114418}, "source.perekrestokvprok.MetaCustom.google_adwords_campaign_label_4284985623": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "google_adwords_campaign_label_4284985623"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.google_adwords_campaign_label_4284985623", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "google_adwords_campaign_label_4284985623", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "google_adwords_campaign_label_4284985623", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u041c\u0435\u0442\u0430 \u0438\u0437 \u0413\u0443\u0433\u043b \u0410\u0434\u0441,\u0438\u0441\u043f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 rw_cost (Autofeed Google Ads 4284985623 \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u044f\u043c (+label) - https://meta.realweb.ru/card?e=2770&o=a2cd0479-a0db-4b0c-bfb4-d9589b58e05f&a=58)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`google_adwords_campaign_label_4284985623`", "created_at": 1652814262.9116144}, "source.perekrestokvprok.agg_data.AF_client_data": {"fqn": ["perekrestokvprok", "staging", "agg_data", "AF_client_data"], "database": "perekrestokvprok-bq", "schema": "agg_data", "unique_id": "source.perekrestokvprok.agg_data.AF_client_data", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "AF_client_data", "source_name": "agg_data", "source_description": "", "loader": "", "identifier": "AF_client_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0430\u043f\u043f\u0441\u0444\u043b\u0430\u0439\u0435\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0430 scheduled query. \u041d\u0435\u0442 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0439, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0434\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u043d\u043e\u0433\u043e \u0430\u043a\u043a\u0430 \u043d\u0430 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u044b\u0440\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c (radiant-entry-230109.appsflayer_events.*)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`agg_data`.`AF_client_data`", "created_at": 1652814262.9117672}, "source.perekrestokvprok.agg_data.promocod_client_data": {"fqn": ["perekrestokvprok", "staging", "agg_data", "promocod_client_data"], "database": "perekrestokvprok-bq", "schema": "agg_data", "unique_id": "source.perekrestokvprok.agg_data.promocod_client_data", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "promocod_client_data", "source_name": "agg_data", "source_description": "", "loader": "", "identifier": "promocod_client_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 CRM,  scheduled query. \u041d\u0435\u0442 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0439, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0434\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u043d\u043e\u0433\u043e \u0430\u043a\u043a\u0430 \u043d\u0430 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u044b\u0440\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c (radiant-entry-230109. BO_data.orders_bought_*)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`agg_data`.`promocod_client_data`", "created_at": 1652814262.911904}, "source.perekrestokvprok.agg_data.google_ads_costs_and_installs_sum": {"fqn": ["perekrestokvprok", "staging", "agg_data", "google_ads_costs_and_installs_sum"], "database": "perekrestokvprok-bq", "schema": "agg_data", "unique_id": "source.perekrestokvprok.agg_data.google_ads_costs_and_installs_sum", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "google_ads_costs_and_installs_sum", "source_name": "agg_data", "source_description": "", "loader": "", "identifier": "google_ads_costs_and_installs_sum", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0441\u0443\u043c\u043c\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 google_ads_costs_and_installs_sum \u0441 1 \u043d\u043e\u044f 2021", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`agg_data`.`google_ads_costs_and_installs_sum`", "created_at": 1652814262.9120414}, "source.perekrestokvprok.agg_data.vk_manual_data": {"fqn": ["perekrestokvprok", "staging", "agg_data", "vk_manual_data"], "database": "perekrestokvprok-bq", "schema": "agg_data", "unique_id": "source.perekrestokvprok.agg_data.vk_manual_data", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "vk_manual_data", "source_name": "agg_data", "source_description": "", "loader": "", "identifier": "vk_manual_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0440\u0443\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043a\u043e\u043d\u0432\u0435\u0440\u0441\u0438\u044f\u043c \u0438\u0437 vk", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`agg_data`.`vk_manual_data`", "created_at": 1652814262.9121802}, "source.perekrestokvprok.agg_data.vk_manual_cost": {"fqn": ["perekrestokvprok", "staging", "agg_data", "vk_manual_cost"], "database": "perekrestokvprok-bq", "schema": "agg_data", "unique_id": "source.perekrestokvprok.agg_data.vk_manual_cost", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "vk_manual_cost", "source_name": "agg_data", "source_description": "", "loader": "", "identifier": "vk_manual_cost", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0440\u0443\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043a\u043e\u0441\u0442\u0430\u043c \u0438\u0437 vk", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`agg_data`.`vk_manual_cost`", "created_at": 1652814262.912317}, "source.perekrestokvprok.DCM_impression_reach.google_dbm_existed_dbm_report_293044": {"fqn": ["perekrestokvprok", "staging", "DCM_impression_reach", "google_dbm_existed_dbm_report_293044"], "database": "perekrestokvprok-bq", "schema": "DCM_impression_reach", "unique_id": "source.perekrestokvprok.DCM_impression_reach.google_dbm_existed_dbm_report_293044", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "google_dbm_existed_dbm_report_293044", "source_name": "DCM_impression_reach", "source_description": "", "loader": "", "identifier": "google_dbm_existed_dbm_report_293044", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Meta DCM (Autofeed DoubleClick Bid Manager (Display&Video360) 293044 existed dbm report - https://meta.realweb.ru/card?e=2770&o=a37c236a-0e06-4f83-98a9-cf8cc8e52717&a=58) - \u043f\u043e\u043a\u0430\u0437\u044b, \u043e\u0445\u0432\u0430\u0442 \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0439\u043a\u0438", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`DCM_impression_reach`.`google_dbm_existed_dbm_report_293044`", "created_at": 1652814262.912454}, "source.perekrestokvprok.DCM.google_dbm_existed_dbm_report_293044": {"fqn": ["perekrestokvprok", "staging", "DCM", "google_dbm_existed_dbm_report_293044"], "database": "perekrestokvprok-bq", "schema": "DCM", "unique_id": "source.perekrestokvprok.DCM.google_dbm_existed_dbm_report_293044", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "google_dbm_existed_dbm_report_293044", "source_name": "DCM", "source_description": "", "loader": "", "identifier": "google_dbm_existed_dbm_report_293044", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0421\u0422\u0410\u0420\u042b\u0419 Meta DCM (Autofeed DoubleClick Bid Manager (Display&Video360) 293044 existed dbm report - https://meta.realweb.ru/card?e=2770&o=34f70c3b-1e88-4cb7-b595-b57c9f0a0dd4&a=58) - \u043a\u043b\u0438\u043a\u0438,\u043f\u043e\u043a\u0430\u0437\u044b,Revenue \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0439\u043a\u0438.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`DCM`.`google_dbm_existed_dbm_report_293044`", "created_at": 1652814262.9126253}, "source.perekrestokvprok.DCM.Placemant_dict": {"fqn": ["perekrestokvprok", "staging", "DCM", "Placemant_dict"], "database": "perekrestokvprok-bq", "schema": "DCM", "unique_id": "source.perekrestokvprok.DCM.Placemant_dict", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "Placemant_dict", "source_name": "DCM", "source_description": "", "loader": "", "identifier": "Placemant_dict", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u0437 https://docs.google.com/spreadsheets/d/1ljGdr9zarLSP4dy4lw00eqkWnmYueDeWSAPu03JGcgI/edit#gid=0", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`DCM`.`Placemant_dict`", "created_at": 1652814262.9127772}, "source.perekrestokvprok.DCM.google_dcm_activitiIO": {"fqn": ["perekrestokvprok", "staging", "DCM", "google_dcm_activitiIO"], "database": "perekrestokvprok-bq", "schema": "DCM", "unique_id": "source.perekrestokvprok.DCM.google_dcm_activitiIO", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "google_dcm_activitiIO", "source_name": "DCM", "source_description": "", "loader": "", "identifier": "google_dcm_activitiIO", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u041c\u0435\u0442\u0430 DCM (CM report perekvprok (media ads) - https://meta.realweb.ru/card?e=2770&o=9b5362fa-5990-4268-95b1-260b1627f145&a=58) - \u043a\u043e\u043d\u0432\u0435\u0440\u0441\u0438\u0438", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`DCM`.`google_dcm_activitiIO`", "created_at": 1652814262.912916}, "source.perekrestokvprok.AF_data.af_atr_data_for_media_ads_TABLE": {"fqn": ["perekrestokvprok", "staging", "AF_data", "af_atr_data_for_media_ads_TABLE"], "database": "perekrestokvprok-bq", "schema": "AF_data", "unique_id": "source.perekrestokvprok.AF_data.af_atr_data_for_media_ads_TABLE", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "af_atr_data_for_media_ads_TABLE", "source_name": "AF_data", "source_description": "", "loader": "", "identifier": "af_atr_data_for_media_ads_TABLE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "LTV-\u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438\u0437 \u0430\u043f\u0441\u0444\u043b\u0430\u0439\u0435\u0440\u0430", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`AF_data`.`af_atr_data_for_media_ads_TABLE`", "created_at": 1652814262.9130547}, "source.perekrestokvprok.AF_data.android_ua_partners_by_date_report_*": {"fqn": ["perekrestokvprok", "staging", "AF_data", "android_ua_partners_by_date_report_*"], "database": "perekrestokvprok-bq", "schema": "AF_data", "unique_id": "source.perekrestokvprok.AF_data.android_ua_partners_by_date_report_*", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "android_ua_partners_by_date_report_*", "source_name": "AF_data", "source_description": "", "loader": "", "identifier": "android_ua_partners_by_date_report_*", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "LTV-\u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0447\u0435\u0442\u044b \u0438\u0437 \u0430\u043f\u0441\u0444\u043b\u0430\u0439\u0435\u0440\u0430 (\u042e\u0410, android)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`AF_data`.`android_ua_partners_by_date_report_*`", "created_at": 1652814262.9131956}, "source.perekrestokvprok.AF_data.ios_ua_partners_by_date_report_*": {"fqn": ["perekrestokvprok", "staging", "AF_data", "ios_ua_partners_by_date_report_*"], "database": "perekrestokvprok-bq", "schema": "AF_data", "unique_id": "source.perekrestokvprok.AF_data.ios_ua_partners_by_date_report_*", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "ios_ua_partners_by_date_report_*", "source_name": "AF_data", "source_description": "", "loader": "", "identifier": "ios_ua_partners_by_date_report_*", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "LTV-\u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0447\u0435\u0442\u044b \u0438\u0437 \u0430\u043f\u0441\u0444\u043b\u0430\u0439\u0435\u0440\u0430 (\u042e\u0410, ios)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`AF_data`.`ios_ua_partners_by_date_report_*`", "created_at": 1652814262.9133332}, "source.perekrestokvprok.AF_data.ios_rtg_partners_by_date_report_*": {"fqn": ["perekrestokvprok", "staging", "AF_data", "ios_rtg_partners_by_date_report_*"], "database": "perekrestokvprok-bq", "schema": "AF_data", "unique_id": "source.perekrestokvprok.AF_data.ios_rtg_partners_by_date_report_*", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "ios_rtg_partners_by_date_report_*", "source_name": "AF_data", "source_description": "", "loader": "", "identifier": "ios_rtg_partners_by_date_report_*", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "LTV-\u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0447\u0435\u0442\u044b \u0438\u0437 \u0430\u043f\u0441\u0444\u043b\u0430\u0439\u0435\u0440\u0430 (\u0420\u0422\u0413, iOS)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`AF_data`.`ios_rtg_partners_by_date_report_*`", "created_at": 1652814262.9134686}, "source.perekrestokvprok.AF_data.android_rtg_partners_by_date_report_*": {"fqn": ["perekrestokvprok", "staging", "AF_data", "android_rtg_partners_by_date_report_*"], "database": "perekrestokvprok-bq", "schema": "AF_data", "unique_id": "source.perekrestokvprok.AF_data.android_rtg_partners_by_date_report_*", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "android_rtg_partners_by_date_report_*", "source_name": "AF_data", "source_description": "", "loader": "", "identifier": "android_rtg_partners_by_date_report_*", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "LTV-\u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0447\u0435\u0442\u044b \u0438\u0437 \u0430\u043f\u0441\u0444\u043b\u0430\u0439\u0435\u0440\u0430 (\u0420\u0422\u0413, android)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`AF_data`.`android_rtg_partners_by_date_report_*`", "created_at": 1652814262.913644}, "source.perekrestokvprok.test2.google_dbm_existed_dbm_report_123": {"fqn": ["perekrestokvprok", "staging", "test2", "google_dbm_existed_dbm_report_123"], "database": "perekrestokvprok-bq", "schema": "test2", "unique_id": "source.perekrestokvprok.test2.google_dbm_existed_dbm_report_123", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "google_dbm_existed_dbm_report_123", "source_name": "test2", "source_description": "", "loader": "", "identifier": "google_dbm_existed_dbm_report_123", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Meta DCM (Autofeed DoubleClick Bid Manager (Display&Video360) 123 existed dbm report - https://meta.realweb.ru/card?e=2770&o=5413ffcd-8dc8-467a-a533-f0afc55789d8&a=58) - \u043a\u043b\u0438\u043a\u0438,\u043f\u043e\u043a\u0430\u0437\u044b,Revenue \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0439\u043a\u0438 c \u0434\u0435\u043a 2021", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`test2`.`google_dbm_existed_dbm_report_123`", "created_at": 1652814262.913793}, "source.perekrestokvprok.test2.facebook_ads_ad_stat_minimal_134923481805102": {"fqn": ["perekrestokvprok", "staging", "test2", "facebook_ads_ad_stat_minimal_134923481805102"], "database": "perekrestokvprok-bq", "schema": "test2", "unique_id": "source.perekrestokvprok.test2.facebook_ads_ad_stat_minimal_134923481805102", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "facebook_ads_ad_stat_minimal_134923481805102", "source_name": "test2", "source_description": "", "loader": "", "identifier": "facebook_ads_ad_stat_minimal_134923481805102", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u041e\u0421\u0422\u0410\u041d\u041e\u0412\u041b\u0415\u041d \u0438\u0437 \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u041c\u0415\u0422\u042b https://meta.realweb.ru/card?e=2770&o=fed631fc-e110-479b-9c2f-29846b97be82&env=eyJwXzQ1NTckZV8yNzcwJG9fZmVkNjMxZmMtZTExMC00NzliLTljMmYtMjk4NDZiOTdiZTgyIjp7InNwIjp7InBlcmlvZCI6eyJmcm9tIjoiMjAyMS0xMi0wMSIsInRvIjoiMjAyMi0wMS0zMSJ9fX19&a=58", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`test2`.`facebook_ads_ad_stat_minimal_134923481805102`", "created_at": 1652814262.9139302}, "source.perekrestokvprok.test2.tiktok_perek_settings_6952834783391023106": {"fqn": ["perekrestokvprok", "staging", "test2", "tiktok_perek_settings_6952834783391023106"], "database": "perekrestokvprok-bq", "schema": "test2", "unique_id": "source.perekrestokvprok.test2.tiktok_perek_settings_6952834783391023106", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "models/staging/src_staging.yml", "original_file_path": "models/staging/src_staging.yml", "name": "tiktok_perek_settings_6952834783391023106", "source_name": "test2", "source_description": "", "loader": "", "identifier": "tiktok_perek_settings_6952834783391023106", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0438\u0437 \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u041c\u0415\u0422\u042b https://meta.realweb.ru/card?e=2770&o=30820923-a571-4a93-a774-72f3c3c00d9c&env=eyJwXzQ1NTckZV8yNzcwJG9fMzA4MjA5MjMtYTU3MS00YTkzLWE3NzQtNzJmM2MzYzAwZDljIjp7InNwIjp7InBlcmlvZCI6eyJmcm9tIjoiMjAyMS0xMi0wMSIsInRvIjoiMjAyMi0wMS0zMSJ9fX19&a=58", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`test2`.`tiktok_perek_settings_6952834783391023106`", "created_at": 1652814262.9144533}}, "macros": {"macro.perekrestokvprok.aud": {"unique_id": "macro.perekrestokvprok.aud", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "macros/auditory.sql", "original_file_path": "macros/auditory.sql", "name": "aud", "macro_sql": "{% macro aud(campaign_name, adset_name='\"-\"') %}\n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER({{campaign_name}}), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4075444}, "macro.perekrestokvprok.conversion_source_type": {"unique_id": "macro.perekrestokvprok.conversion_source_type", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "macros/conversion_source_type.sql", "original_file_path": "macros/conversion_source_type.sql", "name": "conversion_source_type", "macro_sql": "{% macro conversion_source_type(campaign_name, source) %}\n    CASE \n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'[\\[_]cpi[\\]_]') OR {{source}} = 'Apple Search Ads' THEN 'CPI'\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'[\\[_]cpa[\\]_]') THEN 'CPA'\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'[\\[_]cpc[\\]_]') THEN 'CPC'\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'[\\[_]cpm[\\]_]') THEN 'CPM'\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'[\\[_]cpo[\\]_]') THEN 'CPO'\n    ELSE '\u041d\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043e' END\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4095466}, "macro.perekrestokvprok.test_freshness": {"unique_id": "macro.perekrestokvprok.test_freshness", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "macros/freshness_test.sql", "original_file_path": "macros/freshness_test.sql", "name": "test_freshness", "macro_sql": "{% test freshness(model, column_name, days = 1) %}\n{% set dt = modules.datetime.date.today() %}\n{% if modules.datetime.date.isoweekday(dt) < 6 %}\n    -- \u0444\u0435\u0439\u043b\u0438\u0442\u0441\u044f \u0435\u0441\u043b\u0438 \u0432 \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u0434\u043d\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430 \u0432\u0447\u0435\u0440\u0430 \u043d\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u044b\n    WITH source AS (\n    SELECT\n        DATE(MAX({{ column_name }})) AS max_date\n    FROM {{ model }}\n    ),\n\n    mistakes AS (\n        SELECT max_date\n        FROM source\n        WHERE max_date < DATE_SUB(CURRENT_DATE(), INTERVAL {{ days }} DAY)\n    )\n\n    SELECT *    \n    FROM mistakes\n\n{% else %}\n    -- \u0441\u0435\u043b\u0435\u043a\u0442\u0438\u043c \u043d\u0438\u0447\u0435\u0433\u043e\n    SELECT x\n    FROM {{ model }}, UNNEST([1]) AS x\n    WHERE x < 1\n\n{% endif %}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4118998}, "macro.perekrestokvprok.geo": {"unique_id": "macro.perekrestokvprok.geo", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "macros/geo.sql", "original_file_path": "macros/geo.sql", "name": "geo", "macro_sql": "{% macro geo(campaign_name, adset_name='\"-\"') %}\n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.414358}, "macro.perekrestokvprok.get_column_values": {"unique_id": "macro.perekrestokvprok.get_column_values", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "macros/get_column_values_as_a_list.sql", "original_file_path": "macros/get_column_values_as_a_list.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(column_name, relation) %}\n\n{% set relation_query %}\nselect distinct\n{{ column_name }}\nfrom {{ relation }}\norder by 1 desc\n{% endset %}\n\n{% set results = run_query(relation_query) %}\n\n{% if execute %}\n\n{% set results_list = results.columns[0].values() %}\n{% else %}\n{% set results_list = [] %}\n{% endif %}\n\n{{ return(results_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4168303}, "macro.perekrestokvprok.get_promo": {"unique_id": "macro.perekrestokvprok.get_promo", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "macros/get_promo.sql", "original_file_path": "macros/get_promo.sql", "name": "get_promo", "macro_sql": "{% macro get_promo() %}\n\n{{ return(get_column_values('promo', ref('stg_promo_dict_sheets'))) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.perekrestokvprok.get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4181695}, "macro.perekrestokvprok.is_true_realweb": {"unique_id": "macro.perekrestokvprok.is_true_realweb", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "macros/is_true_realweb.sql", "original_file_path": "macros/is_true_realweb.sql", "name": "is_true_realweb", "macro_sql": "{% macro is_true_realweb(campaign_name, media_source) %}\n    CASE\n        WHEN REGEXP_CONTAINS(LOWER({{campaign_name}}), r'realweb_|^ohm|\\(exact\\)|\u0437\u043e\u043e') \n        OR {{media_source}} = 'Apple Search Ads' THEN 1\n        ELSE 0 END\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4194298}, "macro.perekrestokvprok.normalize": {"unique_id": "macro.perekrestokvprok.normalize", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "macros/normalize.sql", "original_file_path": "macros/normalize.sql", "name": "normalize", "macro_sql": "{% macro normalize(campaign_name) %}\n    TRIM(\n        REGEXP_REPLACE(\n            LOWER(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REGEXP_REPLACE({{campaign_name}},  r'(_install_week.*)', '_install_weekend'), \n                    r'(_install_promo_gl.*)', '_install_promo_global'), \n                r'(_install_promo_re.*)', '_install_promo_regular')\n            ), r'\\+|-', '_')\n        )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4206147}, "macro.perekrestokvprok.partner": {"unique_id": "macro.perekrestokvprok.partner", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "macros/partner.sql", "original_file_path": "macros/partner.sql", "name": "partner", "macro_sql": "{% macro partner(campaign_name) %}\n    CASE \n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'_ms_') THEN 'Mobisharks'\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'_tl_') THEN '2leads'\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'_mx_') THEN 'MobX'\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'_sw_') THEN 'SW'\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'_tm_') THEN 'Think Mobile'\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'_abc_|_sf_') THEN 'Mediasurfer'\n    ELSE '-' END\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4221199}, "macro.perekrestokvprok.platform": {"unique_id": "macro.perekrestokvprok.platform", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "macros/platform.sql", "original_file_path": "macros/platform.sql", "name": "platform", "macro_sql": "{% macro platform(campaign_name) %}\n    CASE\n        WHEN REGEXP_CONTAINS(LOWER({{campaign_name}}), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER({{campaign_name}}), r'\\[p:and\\]|_and_|android|p01') THEN 'android'\n    ELSE 'no_platform' END\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4232433}, "macro.perekrestokvprok.promo_search": {"unique_id": "macro.perekrestokvprok.promo_search", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "macros/promo_search.sql", "original_file_path": "macros/promo_search.sql", "name": "promo_search", "macro_sql": "{% macro promo_search(campaign_name, adset_name='\"-\"', ad_name='\"-\"') %}\n\n{%- set promos = get_promo() -%}\n\n    CASE\n{%- for promo in promos %}\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}, {{ad_name}}], ' ')), r'{{promo}}') THEN '{{promo}}'\n{% endfor %}\n    ELSE '-' END\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.perekrestokvprok.get_promo"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4252417}, "macro.perekrestokvprok.promo_type": {"unique_id": "macro.perekrestokvprok.promo_type", "package_name": "perekrestokvprok", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt", "path": "macros/promo_type.sql", "original_file_path": "macros/promo_type.sql", "name": "promo_type", "macro_sql": "{% macro promo_type(campaign_name, adset_name='\"-\"') %}\n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4269412}, "macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4284124}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4292057}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4299717}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4410036}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.442083}, "macro.dbt_bigquery.bigquery_options": {"unique_id": "macro.dbt_bigquery.bigquery_options", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4431086}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4439056}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.445739}, "macro.dbt_bigquery.bigquery_view_options": {"unique_id": "macro.dbt_bigquery.bigquery_view_options", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4464455}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4473386}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4477158}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4480596}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4486516}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4490542}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4494796}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.44969}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4501722}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4506328}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4511247}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4519153}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4523745}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4528122}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n  \n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4541268}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n  \n  {%- endset -%}\n  \n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4552188}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.457124}, "macro.dbt_bigquery.bigquery__test_unique": {"unique_id": "macro.dbt_bigquery.bigquery__test_unique", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n  \n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.457619}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.464838}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter's copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4688103}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.471716}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4725432}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.472936}, "macro.dbt_bigquery.declare_dbt_max_partition": {"unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, sql) %}\n\n  {% if '_dbt_max_partition' in sql %}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n  \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4790735}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4803958}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n        \n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, sql) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4840405}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.486526}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' %} {# Check first, since otherwise we may not build a temp table #}\n      {% do run_query(\n        declare_dbt_max_partition(this, partition_by, sql) + create_table_as(True, tmp_relation, sql)\n      ) %}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.4944503}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n  {% call statement('main') -%}\n    {{ create_table_as(False, target_relation, sql) }}\n  {% endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5001147}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5022507}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5039775}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5055082}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5059657}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5077448}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5118737}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5123172}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.513212}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.513774}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5147436}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5153906}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5170932}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5178657}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5201674}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5245166}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5254025}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.52592}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.526557}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5270803}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.52759}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5283163}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5291677}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5298889}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5314944}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5321233}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5327077}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.53523}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5357447}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5364058}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5368857}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5376618}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5390568}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5409477}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.541391}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5420473}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5432568}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.545204}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5456567}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.546099}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.547275}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5490603}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5496192}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.550081}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5506663}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5545318}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5552738}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5558236}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5562603}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5567908}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.557506}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5580683}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5589726}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5595276}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5600505}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.561994}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.562777}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5636163}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5655105}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5662217}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5680068}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5687084}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5730739}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.576735}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5789137}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5795913}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5833728}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.585015}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5858772}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5874438}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5886338}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5900908}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5921106}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5937493}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5946317}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.595504}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5992224}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.5997982}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6002023}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6006432}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6010363}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.602864}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.604002}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6059334}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.606831}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6132421}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6213312}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6239552}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6246414}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6260242}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6265006}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6268291}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.627348}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6276762}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.630302}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6311796}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.634962}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6438835}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.645774}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6465404}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.66121}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6693053}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.669787}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.670459}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6708546}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.671238}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6732671}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.673728}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6742358}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6771238}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.682631}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6892362}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.690038}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6905365}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6908262}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6914444}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.6938667}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.694425}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.695172}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.696414}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.706056}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7096457}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7133777}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.715492}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7218535}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.726834}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7275963}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7288518}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7296233}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7314663}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.746026}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7486594}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7513793}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7530248}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7547863}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7589443}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7604537}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7610602}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.770176}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.771871}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7723637}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7728717}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7736611}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7754412}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7759495}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7765837}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7777445}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7876139}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7896802}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7903972}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7912476}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7920027}, "macro.codegen.generate_base_model": {"unique_id": "macro.codegen.generate_base_model", "package_name": "codegen", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "name": "generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{{ column | lower }}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {{ column | lower }}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.7962155}, "macro.codegen.generate_model_yaml": {"unique_id": "macro.codegen.generate_model_yaml", "package_name": "codegen", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "name": "generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_name) %}\n\n{% set model_yaml=[] %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n{% do model_yaml.append('  - name: ' ~ model_name | lower) %}\n{% do model_yaml.append('    description: \"\"') %}\n{% do model_yaml.append('    columns:') %}\n\n{% set relation=ref(model_name) %}\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n{% for column in columns %}\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"\"') %}\n    {% do model_yaml.append('') %}\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8007948}, "macro.codegen.get_tables_in_schema": {"unique_id": "macro.codegen.get_tables_in_schema", "package_name": "codegen", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database) %}\n\n    {% set tables=dbt_utils.get_relations_by_pattern(\n            database=database_name,\n            schema_pattern=schema_name,\n            table_pattern='%'\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8043249}, "macro.codegen.generate_source": {"unique_id": "macro.codegen.generate_source", "package_name": "codegen", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False) %}\n\n{% set sources_yaml=[] %}\n\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ schema_name | lower) %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name) %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8094137}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.812544}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8146906}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8166878}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8314517}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8381376}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8458407}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8494923}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8504896}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8509333}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8514478}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8525693}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8543239}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.854704}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8550656}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.857391}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.857952}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8586106}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8592021}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8597786}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8611326}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.861664}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8656812}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8665693}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.868254}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8699017}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8715453}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8726177}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8748403}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8755927}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8764007}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.876917}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8802562}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8811507}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.881896}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.883264}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8844137}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8863418}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8869288}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8873577}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.887744}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8899376}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8905137}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.890906}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.891354}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8917768}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.893721}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8941913}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8945901}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8949714}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8955781}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.896859}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.lastnext_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8981776}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.8994565}, "macro.dbt_date.last_month_start_date": {"unique_id": "macro.dbt_date.last_month_start_date", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_start_date.sql", "original_file_path": "macros/calendar_date/last_month_start_date.sql", "name": "last_month_start_date", "macro_sql": "{%- macro last_month_start_date(tz=None) -%}\n{{ dbt_date.last_month(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9007213}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9018648}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9035423}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9042208}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9047866}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9053862}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9059532}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9072318}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9086144}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.909882}, "macro.dbt_date.next_month_start_date": {"unique_id": "macro.dbt_date.next_month_start_date", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_start_date.sql", "original_file_path": "macros/calendar_date/next_month_start_date.sql", "name": "next_month_start_date", "macro_sql": "{%- macro next_month_start_date(tz=None) -%}\n{{ dbt_date.next_month(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9110339}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9121625}, "macro.dbt_date.next_week_start_date": {"unique_id": "macro.dbt_date.next_week_start_date", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week_start_date.sql", "original_file_path": "macros/calendar_date/next_week_start_date.sql", "name": "next_week_start_date", "macro_sql": "{%- macro next_week_start_date(tz=None) -%}\n{{ dbt_date.next_week(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.next_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9132774}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9144447}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9162288}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9176779}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9193437}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9209979}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9229178}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.92455}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.today(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.925918}, "macro.dbt_date.this_week": {"unique_id": "macro.dbt_date.this_week", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/this_week.sql", "original_file_path": "macros/calendar_date/this_week.sql", "name": "this_week", "macro_sql": "{%- macro this_week(date=None, tz=None) -%}\n{{ dbt_utils.this_week_start(date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9271872}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9283023}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9295719}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9308922}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9313328}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.931726}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9320126}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9338849}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9343328}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9349296}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.935522}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9373806}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9378974}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9383461}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9404783}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.940897}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9417746}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9426892}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9441667}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9468687}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9507308}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number-{{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number-{{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9523067}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9539511}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9542866}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.954576}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9548526}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9562967}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9579716}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.958616}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9592342}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9608178}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.961032}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9612775}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9615412}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9617562}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9619565}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9640687}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9646358}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9651804}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9657915}, "macro.dbt_expectations.spark__regexp_instr": {"unique_id": "macro.dbt_expectations.spark__regexp_instr", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9662526}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9685946}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9707482}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    return_difference=True\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9734852}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.97636}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9792771}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9820588}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9844897}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9869788}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9897008}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9921765}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.996252}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814260.9984648}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0015063}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0041926}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0077832}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0088818}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0113564}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.013816}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0162196}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over(order by sort_column) as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0188096}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over(order by sort_column) as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.021518}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0244884}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ dbt_utils.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt_utils.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.027752}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0307024}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0324728}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0341115}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.037}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.039012}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0457647}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0472813}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    ),\n    {%- if take_diffs %}\n    grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0504258}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0531366}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.054694}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                                    date_col,\n                                                                    date_part=\"day\",\n                                                                    interval=None,\n                                                                    row_condition=None,\n                                                                    test_start_date=None,\n                                                                    test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {# \n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\n            cast({{interval}} as {{ dbt_utils.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {# \n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dbt_utils.dateadd(\n            date_part, \n            \"mod(\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\n            ) * (-1)\", \n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n            \n    {% endif %}\n    \n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n\n)\nselect\n    *\nfrom final\nwhere\n    row_cnt = 0\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.065145}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0676258}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0697644}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0736294}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set row_condition_ext %}\n\n{% if row_condition  %}\n    {{ row_condition }} and\n{% endif %}\n\n{% if ignore_row_if == \"all_values_are_missing\" %}\n    (\n        {% for column in columns -%}\n        {{ column }} is not null{% if not loop.last %} and {% endif %}\n        {%- endfor %}\n    )\n{% elif ignore_row_if == \"any_value_is_missing\" %}\n    (\n        {% for column in columns -%}\n        {{ column }} is not null{% if not loop.last %} or {% endif %}\n        {%- endfor %}\n    )\n{% endif %}\n{% endset %}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0803473}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set operator = \"=\" %}\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0835047}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0877872}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0917299}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.093798}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0969296}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.0990949}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1021852}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1042664}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1074095}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1096082}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1126678}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1152287}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1173217}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1186929}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt_utils.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1225576}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1265757}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max({{ timestamp_column }}) as latest_timestamp_column\n    from\n        {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        latest_timestamp_column < {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.dateadd", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1281679}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1309109}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max({{ column_name }} ) as max_date\n    from\n        {{ model }}\n    where\n        {{ column_name }} <= {{ dbt_date.today() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '{{ default_start_date }}')\n        < {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1322882}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.135953}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.140165}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.143863}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1470497}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1488345}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1507726}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1533086}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.155867}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1567032}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    return_difference=True\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1586256}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1602483}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.161898}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1636865}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1733384}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.175154}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None,\n                                return_difference=False\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model, expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent,\n                                return_difference) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1765754}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model, expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent,\n                                return_difference) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1802695}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.183454}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.185602}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1885278}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1894045}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1911867}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1926336}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1929271}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1941762}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "\n\n\n\n{%- macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1946356}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.194842}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.19504}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1952877}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1968184}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.197251}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.197602}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1991653}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.1995697}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2014344}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2017548}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.201956}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2021942}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2028651}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2032228}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.203634}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2039382}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2043364}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2066474}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2068613}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2070808}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2073088}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.207507}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2079427}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2081861}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.208398}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2088664}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2090707}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2093146}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2097893}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2099998}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2102406}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2106788}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.210881}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2111385}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2115943}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2117994}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2121844}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2142808}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2147405}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2152686}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2157168}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2162838}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.221948}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2224543}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2229}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2279541}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.229053}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2306986}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2310605}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2314632}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2328308}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2330434}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.23329}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2347171}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.235133}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2355456}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2373717}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2376707}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2379491}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2394016}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2396183}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2398164}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2420053}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.24277}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2432156}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2443306}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2448165}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2464259}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2467303}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2472405}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2487004}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2489884}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.250774}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2513127}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.251705}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2534463}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2539172}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2558873}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2563527}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2567945}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2572699}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2589612}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2593954}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2597542}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2601817}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2619648}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.262469}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2629626}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2664435}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2679825}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2693787}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.269956}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2730463}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.275018}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.276457}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2769387}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.278359}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2788448}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2804208}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2809625}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2830017}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2942393}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.295687}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2966285}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.2980626}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3130717}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3156157}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.317003}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3187304}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3192298}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3211458}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.322114}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3245444}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3271582}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3289742}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.329837}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3317783}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3326294}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3344991}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3351119}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3413663}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3459876}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3480508}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3491945}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.350854}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.351345}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3529556}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.354409}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3561943}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3571243}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3592615}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3602326}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3625464}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.364118}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\n  {%- set deprecation_warning = '\n    Warning: `dbt_utils.not_null_where` is no longer supported.\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\n    ' -%}\n  {%- do exceptions.warn(deprecation_warning) -%}\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3660688}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\n  {{ return(test_not_null(model, column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3665636}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\n  {%- set deprecation_warning = '\n    Warning: `dbt_utils.unique_where` is no longer supported.\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\n    ' -%}\n  {%- do exceptions.warn(deprecation_warning) -%}\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.368309}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\n  {{ return(test_unique(model, column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3688338}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3708723}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3729384}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3757849}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3775785}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3782678}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3793108}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3817613}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.383046}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3836076}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3851113}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3880358}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n{% if default is none %}\n    {% set default = [] %}\n{% endif %}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return(default) }}\n    {% endif %}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3920784}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.393997}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3957183}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.3980167}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4005127}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4029312}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4054677}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4108388}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4116075}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4138272}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4152896}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.417453}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.418261}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4198248}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4205487}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.423236}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4241204}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4257522}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4280996}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.429727}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4307232}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.432328}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4333222}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4365299}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4389267}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4407902}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4416358}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4442227}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4475782}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4499109}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4526784}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4567277}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4635258}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.468025}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4739654}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4757795}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4771013}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4788454}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.479816}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4817636}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/mnt/c/Users/Lazyta_D/META/RW/dbt/dbt/perekrestokvprok-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652814261.4836226}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/home/unbium/.cache/pypoetry/virtualenvs/dbt-FZfAMJos-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.perekrestokvprok.my_first_dbt_model": [], "model.perekrestokvprok.my_second_dbt_model": ["model.perekrestokvprok.my_first_dbt_model"], "model.perekrestokvprok.dim_client_promo": ["model.perekrestokvprok.stg_promo_sheets", "model.perekrestokvprok.stg_promocode_client_data"], "model.perekrestokvprok.dim_media": ["model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta", "model.perekrestokvprok.int_google_dcm_activity_meta", "model.perekrestokvprok.int_google_dcm_reach", "model.perekrestokvprok.stg_af_for_media", "model.perekrestokvprok.stg_placement_dict"], "model.perekrestokvprok.dim_plan_budget": ["model.perekrestokvprok.stg_budget_and_plan"], "model.perekrestokvprok.dim_ret": ["model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.int_vk_cab_meta", "model.perekrestokvprok.int_yandex_cab_meta", "model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_asa_cab_sheets", "model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.stg_facebook_cab_sheets", "model.perekrestokvprok.stg_google_cab_sheets", "model.perekrestokvprok.stg_partner_limits", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_tiktok_cab_meta", "model.perekrestokvprok.stg_twitter_cab_sheets"], "model.perekrestokvprok.dim_ret_crm": ["model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_promo_sheets", "model.perekrestokvprok.stg_promocode_client_data"], "model.perekrestokvprok.dim_rtg_agg": ["model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.int_vk_cab_meta", "model.perekrestokvprok.int_yandex_cab_meta", "model.perekrestokvprok.stg_af_rtg_partners_by_date", "model.perekrestokvprok.stg_asa_cab_sheets", "model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.stg_facebook_cab_sheets", "model.perekrestokvprok.stg_google_cab_sheets", "model.perekrestokvprok.stg_partner_limits", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_tiktok_cab_meta", "model.perekrestokvprok.stg_twitter_cab_sheets"], "model.perekrestokvprok.dim_ua": ["model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.int_vk_cab_meta", "model.perekrestokvprok.int_yandex_cab_meta", "model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_asa_cab_sheets", "model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.stg_facebook_cab_sheets", "model.perekrestokvprok.stg_google_cab_sheets", "model.perekrestokvprok.stg_huawei_cab_sheets", "model.perekrestokvprok.stg_partner_limits", "model.perekrestokvprok.stg_partner_limits", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_tiktok_cab_meta", "source.perekrestokvprok.agg_data.vk_manual_cost", "source.perekrestokvprok.agg_data.vk_manual_data"], "model.perekrestokvprok.dim_ua_agg": ["model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.int_yandex_cab_meta", "model.perekrestokvprok.stg_af_ua_partners_by_date", "model.perekrestokvprok.stg_asa_cab_sheets", "model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.stg_facebook_cab_sheets", "model.perekrestokvprok.stg_google_cab_sheets", "model.perekrestokvprok.stg_partner_limits", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_tiktok_cab_meta"], "model.perekrestokvprok.dim_ua_crm": ["model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_promo_sheets", "model.perekrestokvprok.stg_promocode_client_data"], "model.perekrestokvprok.int_partner_limits": ["model.perekrestokvprok.stg_partner_limits"], "model.perekrestokvprok.int_rate_for_inside": ["model.perekrestokvprok.stg_rate_info"], "model.perekrestokvprok.int_asa_cab_meta": ["source.perekrestokvprok.MetaCustom.apple_search_ads_ASA_cost"], "model.perekrestokvprok.int_google_cab_sheets": ["model.perekrestokvprok.stg_google_cab_sheets", "source.perekrestokvprok.sheets_data.google_ads_costs_and_installs"], "model.perekrestokvprok.int_google_dbm_dv360_cost": ["source.perekrestokvprok.MetaCustom.google_dbm_google_dv360_cost_5807131"], "model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta": ["model.perekrestokvprok.stg_google_dbm", "source.perekrestokvprok.DCM.google_dbm_existed_dbm_report_293044"], "model.perekrestokvprok.int_google_dcm_activity_meta": ["source.perekrestokvprok.DCM.google_dcm_activitiIO"], "model.perekrestokvprok.int_google_dcm_reach": ["source.perekrestokvprok.DCM_impression_reach.google_dbm_existed_dbm_report_293044"], "model.perekrestokvprok.int_mytarget_cab_meta": ["source.perekrestokvprok.MetaCustom.mytarget_banner_stat_d0927adb05_agency_client"], "model.perekrestokvprok.int_twitter_cab": ["model.perekrestokvprok.stg_twitter_cab_sheets", "source.perekrestokvprok.sheets_data.twitter_sheets"], "model.perekrestokvprok.int_vk_cab_meta": ["source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1605495720", "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1607141417"], "model.perekrestokvprok.int_yandex_cab_meta": ["source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_perek_vprok_sf", "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_x5perek_direct"], "model.perekrestokvprok.stg_af_client_data": ["source.perekrestokvprok.agg_data.AF_client_data"], "model.perekrestokvprok.stg_af_for_media": ["source.perekrestokvprok.AF_data.af_atr_data_for_media_ads_TABLE"], "model.perekrestokvprok.stg_af_rtg_partners_by_date": ["source.perekrestokvprok.AF_data.android_rtg_partners_by_date_report_*", "source.perekrestokvprok.AF_data.ios_rtg_partners_by_date_report_*"], "model.perekrestokvprok.stg_af_ua_partners_by_date": ["source.perekrestokvprok.AF_data.android_ua_partners_by_date_report_*", "source.perekrestokvprok.AF_data.ios_ua_partners_by_date_report_*"], "model.perekrestokvprok.stg_asa_cab_sheets": ["model.perekrestokvprok.int_asa_cab_meta", "source.perekrestokvprok.sheets_data.Asa_cost"], "model.perekrestokvprok.stg_budget_and_plan": ["source.perekrestokvprok.sheets_data.budget_and_plan"], "model.perekrestokvprok.stg_facebook_cab_meta": ["source.perekrestokvprok.sheets_data.FBNEW_data", "source.perekrestokvprok.test2.facebook_ads_ad_stat_minimal_134923481805102"], "model.perekrestokvprok.stg_facebook_cab_sheets": ["source.perekrestokvprok.sheets_data.FBNEW_data", "source.perekrestokvprok.sheets_data.fb_spreadsheets_data"], "model.perekrestokvprok.stg_google_cab_sheets": ["source.perekrestokvprok.agg_data.google_ads_costs_and_installs_sum", "source.perekrestokvprok.sheets_data.google_ads_costs_and_installs"], "model.perekrestokvprok.stg_google_dbm": ["source.perekrestokvprok.test2.google_dbm_existed_dbm_report_123"], "model.perekrestokvprok.stg_huawei_cab_sheets": ["source.perekrestokvprok.sheets_data.huawei_data"], "model.perekrestokvprok.stg_mistake_cmp": ["source.perekrestokvprok.sheets_data.mistake_cmp"], "model.perekrestokvprok.stg_partner_limits": ["source.perekrestokvprok.sheets_data.limits_sheet"], "model.perekrestokvprok.stg_placement_dict": ["source.perekrestokvprok.DCM.Placemant_dict"], "model.perekrestokvprok.stg_promocode_client_data": ["source.perekrestokvprok.agg_data.promocod_client_data"], "model.perekrestokvprok.stg_promo_dict_sheets": ["source.perekrestokvprok.sheets_data.promo_dict_sheets"], "model.perekrestokvprok.stg_promo_sheets": ["source.perekrestokvprok.sheets_data.promo_sheets"], "model.perekrestokvprok.stg_rate_info": ["source.perekrestokvprok.sheets_data.rate_info"], "model.perekrestokvprok.stg_tiktok_cab_meta": ["source.perekrestokvprok.sheets_data.TIKTOK_table", "source.perekrestokvprok.test2.tiktok_perek_settings_6952834783391023106"], "model.perekrestokvprok.stg_twitter_cab_sheets": ["source.perekrestokvprok.sheets_data.twitter_data", "source.perekrestokvprok.sheets_data.twitter_sheets"], "test.perekrestokvprok.freshness_stg_tiktok_cab_meta_date.2e7fade306": ["model.perekrestokvprok.stg_tiktok_cab_meta"], "test.perekrestokvprok.freshness_stg_google_dbm_date__2.045c65720f": ["model.perekrestokvprok.stg_google_dbm"], "test.perekrestokvprok.freshness_stg_google_cab_sheets_date.ea19a30b02": ["model.perekrestokvprok.stg_google_cab_sheets"], "test.perekrestokvprok.freshness_stg_af_for_media_date.4abd88be82": ["model.perekrestokvprok.stg_af_for_media"], "test.perekrestokvprok.freshness_stg_af_client_data_date.e3578f41c6": ["model.perekrestokvprok.stg_af_client_data"], "test.perekrestokvprok.freshness_int_yandex_cab_meta_date.f0993cbb4f": ["model.perekrestokvprok.int_yandex_cab_meta"], "test.perekrestokvprok.freshness_int_vk_cab_meta_date.4e146ecfd6": ["model.perekrestokvprok.int_vk_cab_meta"], "test.perekrestokvprok.freshness_int_mytarget_cab_meta_date.b7126cd27f": ["model.perekrestokvprok.int_mytarget_cab_meta"], "test.perekrestokvprok.freshness_int_google_dcm_reach_date__2.6f5c233395": ["model.perekrestokvprok.int_google_dcm_reach"], "test.perekrestokvprok.freshness_int_google_dcm_activity_meta_interaction_date.16b18e3b1a": ["model.perekrestokvprok.int_google_dcm_activity_meta"], "test.perekrestokvprok.freshness_int_google_dbm_impressions_clicks_revenue_meta_date__2.c25c2d8459": ["model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta"], "test.perekrestokvprok.freshness_int_google_dbm_dv360_cost_date.0b71809b70": ["model.perekrestokvprok.int_google_dbm_dv360_cost"], "test.perekrestokvprok.freshness_int_asa_cab_meta_date.4c0f53d67b": ["model.perekrestokvprok.int_asa_cab_meta"], "test.perekrestokvprok.freshness_stg_asa_cab_sheets_date.118a491372": ["model.perekrestokvprok.stg_asa_cab_sheets"], "test.perekrestokvprok.freshness_stg_facebook_cab_sheets_date.602c75baed": ["model.perekrestokvprok.stg_facebook_cab_sheets"], "test.perekrestokvprok.freshness_stg_huawei_cab_sheets_date.c76e31a5e5": ["model.perekrestokvprok.stg_huawei_cab_sheets"], "source.perekrestokvprok.sheets_data.limits_sheet": [], "source.perekrestokvprok.sheets_data.TIKTOK_table": [], "source.perekrestokvprok.sheets_data.tiktok_sheets_campaign_cost_purchases": [], "source.perekrestokvprok.sheets_data.FBNEW_data": [], "source.perekrestokvprok.sheets_data.fb_spreadsheets_data": [], "source.perekrestokvprok.sheets_data.twitter_sheets": [], "source.perekrestokvprok.sheets_data.twitter_data": [], "source.perekrestokvprok.sheets_data.rate_data_for_inside": [], "source.perekrestokvprok.sheets_data.mistake_cmp": [], "source.perekrestokvprok.sheets_data.promo_dict_sheets": [], "source.perekrestokvprok.sheets_data.promo_dict_data": [], "source.perekrestokvprok.sheets_data.rate_info": [], "source.perekrestokvprok.sheets_data.budget_and_plan": [], "source.perekrestokvprok.sheets_data.promo_sheets": [], "source.perekrestokvprok.sheets_data.google_ads_costs_and_installs": [], "source.perekrestokvprok.sheets_data.google_ads_costs_27_30_dec_2021": [], "source.perekrestokvprok.sheets_data.Asa_cost": [], "source.perekrestokvprok.sheets_data.huawei_data": [], "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1605495720": [], "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1607141417": [], "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_x5perek_direct": [], "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_perek_vprok_sf": [], "source.perekrestokvprok.MetaCustom.mytarget_banner_stat_d0927adb05_agency_client": [], "source.perekrestokvprok.MetaCustom.apple_search_ads_ASA_cost": [], "source.perekrestokvprok.MetaCustom.google_dbm_google_dv360_cost_5807131": [], "source.perekrestokvprok.MetaCustom.google_adwords_campaign_stat_4284985623": [], "source.perekrestokvprok.MetaCustom.google_adwords_campaign_label_4284985623": [], "source.perekrestokvprok.agg_data.AF_client_data": [], "source.perekrestokvprok.agg_data.promocod_client_data": [], "source.perekrestokvprok.agg_data.google_ads_costs_and_installs_sum": [], "source.perekrestokvprok.agg_data.vk_manual_data": [], "source.perekrestokvprok.agg_data.vk_manual_cost": [], "source.perekrestokvprok.DCM_impression_reach.google_dbm_existed_dbm_report_293044": [], "source.perekrestokvprok.DCM.google_dbm_existed_dbm_report_293044": [], "source.perekrestokvprok.DCM.Placemant_dict": [], "source.perekrestokvprok.DCM.google_dcm_activitiIO": [], "source.perekrestokvprok.AF_data.af_atr_data_for_media_ads_TABLE": [], "source.perekrestokvprok.AF_data.android_ua_partners_by_date_report_*": [], "source.perekrestokvprok.AF_data.ios_ua_partners_by_date_report_*": [], "source.perekrestokvprok.AF_data.ios_rtg_partners_by_date_report_*": [], "source.perekrestokvprok.AF_data.android_rtg_partners_by_date_report_*": [], "source.perekrestokvprok.test2.google_dbm_existed_dbm_report_123": [], "source.perekrestokvprok.test2.facebook_ads_ad_stat_minimal_134923481805102": [], "source.perekrestokvprok.test2.tiktok_perek_settings_6952834783391023106": []}, "child_map": {"model.perekrestokvprok.my_first_dbt_model": ["model.perekrestokvprok.my_second_dbt_model"], "model.perekrestokvprok.my_second_dbt_model": [], "model.perekrestokvprok.dim_client_promo": [], "model.perekrestokvprok.dim_media": [], "model.perekrestokvprok.dim_plan_budget": [], "model.perekrestokvprok.dim_ret": [], "model.perekrestokvprok.dim_ret_crm": [], "model.perekrestokvprok.dim_rtg_agg": [], "model.perekrestokvprok.dim_ua": [], "model.perekrestokvprok.dim_ua_agg": [], "model.perekrestokvprok.dim_ua_crm": [], "model.perekrestokvprok.int_partner_limits": [], "model.perekrestokvprok.int_rate_for_inside": [], "model.perekrestokvprok.int_asa_cab_meta": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "model.perekrestokvprok.dim_ua_agg", "model.perekrestokvprok.stg_asa_cab_sheets", "test.perekrestokvprok.freshness_int_asa_cab_meta_date.4c0f53d67b"], "model.perekrestokvprok.int_google_cab_sheets": [], "model.perekrestokvprok.int_google_dbm_dv360_cost": ["test.perekrestokvprok.freshness_int_google_dbm_dv360_cost_date.0b71809b70"], "model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta": ["model.perekrestokvprok.dim_media", "test.perekrestokvprok.freshness_int_google_dbm_impressions_clicks_revenue_meta_date__2.c25c2d8459"], "model.perekrestokvprok.int_google_dcm_activity_meta": ["model.perekrestokvprok.dim_media", "test.perekrestokvprok.freshness_int_google_dcm_activity_meta_interaction_date.16b18e3b1a"], "model.perekrestokvprok.int_google_dcm_reach": ["model.perekrestokvprok.dim_media", "test.perekrestokvprok.freshness_int_google_dcm_reach_date__2.6f5c233395"], "model.perekrestokvprok.int_mytarget_cab_meta": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "model.perekrestokvprok.dim_ua_agg", "test.perekrestokvprok.freshness_int_mytarget_cab_meta_date.b7126cd27f"], "model.perekrestokvprok.int_twitter_cab": [], "model.perekrestokvprok.int_vk_cab_meta": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "test.perekrestokvprok.freshness_int_vk_cab_meta_date.4e146ecfd6"], "model.perekrestokvprok.int_yandex_cab_meta": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "test.perekrestokvprok.freshness_int_yandex_cab_meta_date.f0993cbb4f"], "model.perekrestokvprok.stg_af_client_data": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret_crm", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_crm", "test.perekrestokvprok.freshness_stg_af_client_data_date.e3578f41c6"], "model.perekrestokvprok.stg_af_for_media": ["model.perekrestokvprok.dim_media", "test.perekrestokvprok.freshness_stg_af_for_media_date.4abd88be82"], "model.perekrestokvprok.stg_af_rtg_partners_by_date": ["model.perekrestokvprok.dim_rtg_agg"], "model.perekrestokvprok.stg_af_ua_partners_by_date": ["model.perekrestokvprok.dim_ua_agg"], "model.perekrestokvprok.stg_asa_cab_sheets": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "test.perekrestokvprok.freshness_stg_asa_cab_sheets_date.118a491372"], "model.perekrestokvprok.stg_budget_and_plan": ["model.perekrestokvprok.dim_plan_budget"], "model.perekrestokvprok.stg_facebook_cab_meta": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg"], "model.perekrestokvprok.stg_facebook_cab_sheets": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "test.perekrestokvprok.freshness_stg_facebook_cab_sheets_date.602c75baed"], "model.perekrestokvprok.stg_google_cab_sheets": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "model.perekrestokvprok.int_google_cab_sheets", "test.perekrestokvprok.freshness_stg_google_cab_sheets_date.ea19a30b02"], "model.perekrestokvprok.stg_google_dbm": ["model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta", "test.perekrestokvprok.freshness_stg_google_dbm_date__2.045c65720f"], "model.perekrestokvprok.stg_huawei_cab_sheets": ["model.perekrestokvprok.dim_ua", "test.perekrestokvprok.freshness_stg_huawei_cab_sheets_date.c76e31a5e5"], "model.perekrestokvprok.stg_mistake_cmp": [], "model.perekrestokvprok.stg_partner_limits": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "model.perekrestokvprok.int_partner_limits"], "model.perekrestokvprok.stg_placement_dict": ["model.perekrestokvprok.dim_media"], "model.perekrestokvprok.stg_promocode_client_data": ["model.perekrestokvprok.dim_client_promo", "model.perekrestokvprok.dim_ret_crm", "model.perekrestokvprok.dim_ua_crm"], "model.perekrestokvprok.stg_promo_dict_sheets": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua"], "model.perekrestokvprok.stg_promo_sheets": ["model.perekrestokvprok.dim_client_promo", "model.perekrestokvprok.dim_ret_crm", "model.perekrestokvprok.dim_ua_crm"], "model.perekrestokvprok.stg_rate_info": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "model.perekrestokvprok.int_rate_for_inside"], "model.perekrestokvprok.stg_tiktok_cab_meta": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "test.perekrestokvprok.freshness_stg_tiktok_cab_meta_date.2e7fade306"], "model.perekrestokvprok.stg_twitter_cab_sheets": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.int_twitter_cab"], "test.perekrestokvprok.freshness_stg_tiktok_cab_meta_date.2e7fade306": [], "test.perekrestokvprok.freshness_stg_google_dbm_date__2.045c65720f": [], "test.perekrestokvprok.freshness_stg_google_cab_sheets_date.ea19a30b02": [], "test.perekrestokvprok.freshness_stg_af_for_media_date.4abd88be82": [], "test.perekrestokvprok.freshness_stg_af_client_data_date.e3578f41c6": [], "test.perekrestokvprok.freshness_int_yandex_cab_meta_date.f0993cbb4f": [], "test.perekrestokvprok.freshness_int_vk_cab_meta_date.4e146ecfd6": [], "test.perekrestokvprok.freshness_int_mytarget_cab_meta_date.b7126cd27f": [], "test.perekrestokvprok.freshness_int_google_dcm_reach_date__2.6f5c233395": [], "test.perekrestokvprok.freshness_int_google_dcm_activity_meta_interaction_date.16b18e3b1a": [], "test.perekrestokvprok.freshness_int_google_dbm_impressions_clicks_revenue_meta_date__2.c25c2d8459": [], "test.perekrestokvprok.freshness_int_google_dbm_dv360_cost_date.0b71809b70": [], "test.perekrestokvprok.freshness_int_asa_cab_meta_date.4c0f53d67b": [], "test.perekrestokvprok.freshness_stg_asa_cab_sheets_date.118a491372": [], "test.perekrestokvprok.freshness_stg_facebook_cab_sheets_date.602c75baed": [], "test.perekrestokvprok.freshness_stg_huawei_cab_sheets_date.c76e31a5e5": [], "source.perekrestokvprok.sheets_data.limits_sheet": ["model.perekrestokvprok.stg_partner_limits"], "source.perekrestokvprok.sheets_data.TIKTOK_table": ["model.perekrestokvprok.stg_tiktok_cab_meta"], "source.perekrestokvprok.sheets_data.tiktok_sheets_campaign_cost_purchases": [], "source.perekrestokvprok.sheets_data.FBNEW_data": ["model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.stg_facebook_cab_sheets"], "source.perekrestokvprok.sheets_data.fb_spreadsheets_data": ["model.perekrestokvprok.stg_facebook_cab_sheets"], "source.perekrestokvprok.sheets_data.twitter_sheets": ["model.perekrestokvprok.int_twitter_cab", "model.perekrestokvprok.stg_twitter_cab_sheets"], "source.perekrestokvprok.sheets_data.twitter_data": ["model.perekrestokvprok.stg_twitter_cab_sheets"], "source.perekrestokvprok.sheets_data.rate_data_for_inside": [], "source.perekrestokvprok.sheets_data.mistake_cmp": ["model.perekrestokvprok.stg_mistake_cmp"], "source.perekrestokvprok.sheets_data.promo_dict_sheets": ["model.perekrestokvprok.stg_promo_dict_sheets"], "source.perekrestokvprok.sheets_data.promo_dict_data": [], "source.perekrestokvprok.sheets_data.rate_info": ["model.perekrestokvprok.stg_rate_info"], "source.perekrestokvprok.sheets_data.budget_and_plan": ["model.perekrestokvprok.stg_budget_and_plan"], "source.perekrestokvprok.sheets_data.promo_sheets": ["model.perekrestokvprok.stg_promo_sheets"], "source.perekrestokvprok.sheets_data.google_ads_costs_and_installs": ["model.perekrestokvprok.int_google_cab_sheets", "model.perekrestokvprok.stg_google_cab_sheets"], "source.perekrestokvprok.sheets_data.google_ads_costs_27_30_dec_2021": [], "source.perekrestokvprok.sheets_data.Asa_cost": ["model.perekrestokvprok.stg_asa_cab_sheets"], "source.perekrestokvprok.sheets_data.huawei_data": ["model.perekrestokvprok.stg_huawei_cab_sheets"], "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1605495720": ["model.perekrestokvprok.int_vk_cab_meta"], "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1607141417": ["model.perekrestokvprok.int_vk_cab_meta"], "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_x5perek_direct": ["model.perekrestokvprok.int_yandex_cab_meta"], "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_perek_vprok_sf": ["model.perekrestokvprok.int_yandex_cab_meta"], "source.perekrestokvprok.MetaCustom.mytarget_banner_stat_d0927adb05_agency_client": ["model.perekrestokvprok.int_mytarget_cab_meta"], "source.perekrestokvprok.MetaCustom.apple_search_ads_ASA_cost": ["model.perekrestokvprok.int_asa_cab_meta"], "source.perekrestokvprok.MetaCustom.google_dbm_google_dv360_cost_5807131": ["model.perekrestokvprok.int_google_dbm_dv360_cost"], "source.perekrestokvprok.MetaCustom.google_adwords_campaign_stat_4284985623": [], "source.perekrestokvprok.MetaCustom.google_adwords_campaign_label_4284985623": [], "source.perekrestokvprok.agg_data.AF_client_data": ["model.perekrestokvprok.stg_af_client_data"], "source.perekrestokvprok.agg_data.promocod_client_data": ["model.perekrestokvprok.stg_promocode_client_data"], "source.perekrestokvprok.agg_data.google_ads_costs_and_installs_sum": ["model.perekrestokvprok.stg_google_cab_sheets"], "source.perekrestokvprok.agg_data.vk_manual_data": ["model.perekrestokvprok.dim_ua"], "source.perekrestokvprok.agg_data.vk_manual_cost": ["model.perekrestokvprok.dim_ua"], "source.perekrestokvprok.DCM_impression_reach.google_dbm_existed_dbm_report_293044": ["model.perekrestokvprok.int_google_dcm_reach"], "source.perekrestokvprok.DCM.google_dbm_existed_dbm_report_293044": ["model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta"], "source.perekrestokvprok.DCM.Placemant_dict": ["model.perekrestokvprok.stg_placement_dict"], "source.perekrestokvprok.DCM.google_dcm_activitiIO": ["model.perekrestokvprok.int_google_dcm_activity_meta"], "source.perekrestokvprok.AF_data.af_atr_data_for_media_ads_TABLE": ["model.perekrestokvprok.stg_af_for_media"], "source.perekrestokvprok.AF_data.android_ua_partners_by_date_report_*": ["model.perekrestokvprok.stg_af_ua_partners_by_date"], "source.perekrestokvprok.AF_data.ios_ua_partners_by_date_report_*": ["model.perekrestokvprok.stg_af_ua_partners_by_date"], "source.perekrestokvprok.AF_data.ios_rtg_partners_by_date_report_*": ["model.perekrestokvprok.stg_af_rtg_partners_by_date"], "source.perekrestokvprok.AF_data.android_rtg_partners_by_date_report_*": ["model.perekrestokvprok.stg_af_rtg_partners_by_date"], "source.perekrestokvprok.test2.google_dbm_existed_dbm_report_123": ["model.perekrestokvprok.stg_google_dbm"], "source.perekrestokvprok.test2.facebook_ads_ad_stat_minimal_134923481805102": ["model.perekrestokvprok.stg_facebook_cab_meta"], "source.perekrestokvprok.test2.tiktok_perek_settings_6952834783391023106": ["model.perekrestokvprok.stg_tiktok_cab_meta"]}}