{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.1", "generated_at": "2023-02-16T11:18:26.962805Z", "invocation_id": "657471c2-4abd-4f7a-9807-1cdc57bfb5ef", "env": {}, "project_id": "3b7a3dc330177ae851ef292c7d9f8432", "user_id": "4fb95f48-483a-40da-87cc-93d1b23573d4", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.perekrestokvprok.my_first_dbt_model": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "example", "my_first_dbt_model"], "unique_id": "model.perekrestokvprok.my_first_dbt_model", "raw_code": "/*\r\n    Welcome to your first dbt model!\r\n    Did you know that you can also configure models directly within SQL files?\r\n    This will override configurations stated in dbt_project.yml\r\n\r\n    Try changing \"table\" to \"view\" below\r\n*/\r\n\r\n{{ config(materialized='table') }}\r\n\r\nwith source_data as (\r\n\r\n    select 1 as id\r\n    union all\r\n    select null as id\r\n\r\n)\r\n\r\nselect *\r\nfrom source_data\r\n\r\n/*\r\n    Uncomment the line below to remove records with null `id` values\r\n*/\r\n\r\n-- where id is not null", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "example\\my_first_dbt_model.sql", "original_file_path": "models\\example\\my_first_dbt_model.sql", "name": "my_first_dbt_model", "alias": "my_first_dbt_model", "checksum": {"name": "sha256", "checksum": "15579d5a1617e63faeb848841479ac49d3ef3addbd2783845fe7b39b8f07d50c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "A starter dbt model", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\example\\schema.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\example\\my_first_dbt_model.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\example\\my_first_dbt_model.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676546309.2626357, "compiled_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`my_first_dbt_model`"}, "model.perekrestokvprok.my_second_dbt_model": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.perekrestokvprok.my_first_dbt_model"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "example", "my_second_dbt_model"], "unique_id": "model.perekrestokvprok.my_second_dbt_model", "raw_code": "-- Use the `ref` function to select from other models\r\n\r\nselect *\r\nfrom {{ ref('my_first_dbt_model') }}\r\nwhere id = 1", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "example\\my_second_dbt_model.sql", "original_file_path": "models\\example\\my_second_dbt_model.sql", "name": "my_second_dbt_model", "alias": "my_second_dbt_model", "checksum": {"name": "sha256", "checksum": "5991c318f711e0315ca534919938c772207dd4f6fa36113e3d804e1af14cc099"}, "tags": [], "refs": [["my_first_dbt_model"]], "sources": [], "metrics": [], "description": "A starter dbt model", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\example\\schema.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\example\\my_second_dbt_model.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\example\\my_second_dbt_model.sql", "deferred": false, "unrendered_config": {}, "created_at": 1676546309.2646296, "compiled_code": "-- Use the `ref` function to select from other models\n\nselect *\nfrom `perekrestokvprok-bq`.`dbt_production`.`my_first_dbt_model`\nwhere id = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`my_second_dbt_model`"}, "model.perekrestokvprok.dim_client_promo": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.perekrestokvprok.stg_promocode_client_data", "model.perekrestokvprok.stg_promo_sheets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_client_promo"], "unique_id": "model.perekrestokvprok.dim_client_promo", "raw_code": "---\u043a\u043e\u0441\u0442\u043e\u0432 \u0437\u0434\u0435\u0441\u044c \u043d\u0435\u0442, \u0434\u043e\u0431\u0430\u0432\u044c \u0432 PBI---\r\nWITH promo_client_data AS (\r\n    SELECT\r\n        order_date,\r\n        region,\r\n        promo_name,\r\n        promo_name_full,\r\n        LOWER(promo_code) AS promo_code,\r\n        order_id,\r\n        platform,\r\n        revenue,\r\n        order_count\r\n    FROM {{ ref('stg_promocode_client_data') }}\r\n),\r\n\r\npromo_dict AS (\r\n    SELECT\r\n        LOWER(promocode) AS promo_code,\r\n        type,\r\n        channel\r\n    FROM {{ ref('stg_promo_sheets') }}\r\n)\r\n\r\nSELECT\r\n    DATE(order_date) AS date,\r\n    channel,\r\n    type,\r\n    UPPER(promo_code) AS promo_code,\r\n    promo_name,\r\n    region,\r\n    revenue,\r\n    order_count\r\nFROM promo_client_data\r\nLEFT JOIN promo_dict\r\nUSING(promo_code)\r\nWHERE type IS NOT NULL", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "marts\\dim_client_promo.sql", "original_file_path": "models\\marts\\dim_client_promo.sql", "name": "dim_client_promo", "alias": "dim_client_promo", "checksum": {"name": "sha256", "checksum": "70d1f902c6ccf1f387438fabcd426ecbd45a2c8a9db03e10887ef5b5578acdd3"}, "tags": [], "refs": [["stg_promocode_client_data"], ["stg_promo_sheets"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\marts\\dim_client_promo.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\marts\\dim_client_promo.sql", "deferred": false, "unrendered_config": {}, "created_at": 1676546308.7726042, "compiled_code": "---\u043a\u043e\u0441\u0442\u043e\u0432 \u0437\u0434\u0435\u0441\u044c \u043d\u0435\u0442, \u0434\u043e\u0431\u0430\u0432\u044c \u0432 PBI---\nWITH promo_client_data AS (\n    SELECT\n        order_date,\n        region,\n        promo_name,\n        promo_name_full,\n        LOWER(promo_code) AS promo_code,\n        order_id,\n        platform,\n        revenue,\n        order_count\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_promocode_client_data`\n),\n\npromo_dict AS (\n    SELECT\n        LOWER(promocode) AS promo_code,\n        type,\n        channel\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_promo_sheets`\n)\n\nSELECT\n    DATE(order_date) AS date,\n    channel,\n    type,\n    UPPER(promo_code) AS promo_code,\n    promo_name,\n    region,\n    revenue,\n    order_count\nFROM promo_client_data\nLEFT JOIN promo_dict\nUSING(promo_code)\nWHERE type IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`dim_client_promo`"}, "model.perekrestokvprok.dim_media": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta", "model.perekrestokvprok.stg_af_for_media", "model.perekrestokvprok.stg_placement_dict", "model.perekrestokvprok.int_google_dcm_activity_meta", "model.perekrestokvprok.int_google_dcm_reach"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_media"], "unique_id": "model.perekrestokvprok.dim_media", "raw_code": "WITH clicks_table AS (\r\n    SELECT\r\n        date,\r\n        insertion_order,\r\n        insertion_order_id,\r\n        impressions,\r\n        clicks,\r\n        revenue_adv_currency,\r\n        profit_advertiser_currency\r\n    FROM {{ ref('int_google_dbm_impressions_clicks_revenue_meta') }}\r\n),\r\n\r\naf AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        media_source,\r\n        SUM(IF(event_name = 'af_purchase' AND is_retargeting = FALSE, event_count, 0)) AS af_ua_purchase,\r\n        SUM(IF(event_name = 'af_purchase' AND is_retargeting = TRUE, event_count, 0)) AS af_rtg_purchase,\r\n        SUM(IF(event_name = 'install', event_count, 0)) AS af_install,\r\n        SUM(IF(event_name IN ('re-attribution','re-engagement'), event_count, 0)) AS af_re_engagement\r\n    FROM {{ ref('stg_af_for_media') }}\r\n    GROUP BY 1,2,3\r\n),\r\n\r\nplacement_dict AS (\r\n        SELECT\r\n        placement_id,\r\n        placement,\r\n        insertion_order_id\r\n    FROM {{ ref('stg_placement_dict') }}\r\n),\r\n\r\nactivity AS (\r\n    SELECT\r\n        interaction_date,\r\n        placement_id,\r\n        placement,\r\n        purchase,\r\n        retarget,\r\n        installs\r\n    FROM {{ ref('int_google_dcm_activity_meta') }}\r\n),\r\n\r\nreach AS (\r\n    SELECT\r\n        date,\r\n        insertion_order,\r\n        insertion_order_id,\r\n        impression_reach\r\n    FROM  {{ ref('int_google_dcm_reach') }}\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        clicks_table.date,\r\n        clicks_table.insertion_order,\r\n        clicks_table.insertion_order_id,\r\n        clicks_table.impressions,\r\n        clicks_table.clicks,\r\n        reach.impression_reach,\r\n        clicks_table.revenue_adv_currency,\r\n        clicks_table.profit_advertiser_currency,\r\n        SUM(activity.purchase) AS purchase,\r\n        SUM(activity.retarget) AS retarget,\r\n        SUM(activity.installs) AS installs,\r\n        SUM(af.af_ua_purchase) AS af_ua_purchase,\r\n        SUM(af.af_rtg_purchase) AS af_rtg_purchase,\r\n        SUM(af.af_install) AS af_install,\r\n        SUM(af.af_re_engagement) AS af_re_engagement\r\n    FROM clicks_table\r\n    LEFT JOIN reach ON reach.date = clicks_table.date \r\n        AND reach.insertion_order_id = clicks_table.insertion_order_id\r\n    LEFT JOIN placement_dict ON placement_dict.insertion_order_id = clicks_table.insertion_order_id\r\n    LEFT JOIN activity ON activity.interaction_date = clicks_table.date\r\n        AND placement_dict.placement_id = activity.placement_id\r\n    LEFT JOIN af ON af.date = clicks_table.date AND placement_dict.placement_id = af.campaign_name\r\n    GROUP BY 1,2,3,4,5,6,7,8\r\n    ORDER BY 1,2\r\n)\r\n\r\nSELECT\r\n    date,\r\n    insertion_order,\r\n    insertion_order_id,\r\n    impressions,\r\n    clicks,\r\n    impression_reach,\r\n    revenue_adv_currency,\r\n    profit_advertiser_currency,\r\n    purchase,\r\n    retarget,\r\n    installs,\r\n    af_ua_purchase,\r\n    af_rtg_purchase,\r\n    af_install,\r\n    af_re_engagement\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "marts\\dim_media.sql", "original_file_path": "models\\marts\\dim_media.sql", "name": "dim_media", "alias": "dim_media", "checksum": {"name": "sha256", "checksum": "458d53be707cea16008a8d9ecb30dced380714cee3a46c5dc3203a177ca398f4"}, "tags": [], "refs": [["int_google_dbm_impressions_clicks_revenue_meta"], ["stg_af_for_media"], ["stg_placement_dict"], ["int_google_dcm_activity_meta"], ["int_google_dcm_reach"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\marts\\dim_media.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\marts\\dim_media.sql", "deferred": false, "unrendered_config": {}, "created_at": 1676546308.77752, "compiled_code": "WITH clicks_table AS (\n    SELECT\n        date,\n        insertion_order,\n        insertion_order_id,\n        impressions,\n        clicks,\n        revenue_adv_currency,\n        profit_advertiser_currency\n    FROM `perekrestokvprok-bq`.`dbt_production`.`int_google_dbm_impressions_clicks_revenue_meta`\n),\n\naf AS (\n    SELECT\n        date,\n        campaign_name,\n        media_source,\n        SUM(IF(event_name = 'af_purchase' AND is_retargeting = FALSE, event_count, 0)) AS af_ua_purchase,\n        SUM(IF(event_name = 'af_purchase' AND is_retargeting = TRUE, event_count, 0)) AS af_rtg_purchase,\n        SUM(IF(event_name = 'install', event_count, 0)) AS af_install,\n        SUM(IF(event_name IN ('re-attribution','re-engagement'), event_count, 0)) AS af_re_engagement\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_af_for_media`\n    GROUP BY 1,2,3\n),\n\nplacement_dict AS (\n        SELECT\n        placement_id,\n        placement,\n        insertion_order_id\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_placement_dict`\n),\n\nactivity AS (\n    SELECT\n        interaction_date,\n        placement_id,\n        placement,\n        purchase,\n        retarget,\n        installs\n    FROM `perekrestokvprok-bq`.`dbt_production`.`int_google_dcm_activity_meta`\n),\n\nreach AS (\n    SELECT\n        date,\n        insertion_order,\n        insertion_order_id,\n        impression_reach\n    FROM  `perekrestokvprok-bq`.`dbt_production`.`int_google_dcm_reach`\n),\n\nfinal AS (\n    SELECT\n        clicks_table.date,\n        clicks_table.insertion_order,\n        clicks_table.insertion_order_id,\n        clicks_table.impressions,\n        clicks_table.clicks,\n        reach.impression_reach,\n        clicks_table.revenue_adv_currency,\n        clicks_table.profit_advertiser_currency,\n        SUM(activity.purchase) AS purchase,\n        SUM(activity.retarget) AS retarget,\n        SUM(activity.installs) AS installs,\n        SUM(af.af_ua_purchase) AS af_ua_purchase,\n        SUM(af.af_rtg_purchase) AS af_rtg_purchase,\n        SUM(af.af_install) AS af_install,\n        SUM(af.af_re_engagement) AS af_re_engagement\n    FROM clicks_table\n    LEFT JOIN reach ON reach.date = clicks_table.date \n        AND reach.insertion_order_id = clicks_table.insertion_order_id\n    LEFT JOIN placement_dict ON placement_dict.insertion_order_id = clicks_table.insertion_order_id\n    LEFT JOIN activity ON activity.interaction_date = clicks_table.date\n        AND placement_dict.placement_id = activity.placement_id\n    LEFT JOIN af ON af.date = clicks_table.date AND placement_dict.placement_id = af.campaign_name\n    GROUP BY 1,2,3,4,5,6,7,8\n    ORDER BY 1,2\n)\n\nSELECT\n    date,\n    insertion_order,\n    insertion_order_id,\n    impressions,\n    clicks,\n    impression_reach,\n    revenue_adv_currency,\n    profit_advertiser_currency,\n    purchase,\n    retarget,\n    installs,\n    af_ua_purchase,\n    af_rtg_purchase,\n    af_install,\n    af_re_engagement\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`dim_media`"}, "model.perekrestokvprok.dim_plan_budget": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.perekrestokvprok.stg_budget_and_plan"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_plan_budget"], "unique_id": "model.perekrestokvprok.dim_plan_budget", "raw_code": "WITH source AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        plan_budget,\r\n        plan_type,\r\n        plan_order\r\n    FROM {{ ref('stg_budget_and_plan') }}\r\n),\r\n\r\narray_table AS (\r\n    SELECT \r\n        GENERATE_DATE_ARRAY(start_date,end_date) AS date, \r\n        plan_budget, \r\n        plan_type, \r\n        plan_order \r\n    FROM source\r\n),\r\n\r\nplans AS (\r\n    SELECT\r\n        date,\r\n        plan_budget,\r\n        plan_order,\r\n        CASE\r\n            WHEN plan_type = \"UA\" THEN \"uac\"\r\n            WHEN plan_type = \"PROMO\" THEN \"promo\"\r\n            WHEN plan_type = \"RTG\" THEN \"rtg\"\r\n            WHEN plan_type = \"CPA\" THEN \"cpc\"\r\n            ELSE '-' END AS plan_type\r\n    FROM array_table, UNNEST(date) AS date\r\n)\r\n\r\nSELECT\r\n    date,\r\n    plan_budget,\r\n    plan_order,\r\n    plan_type\r\nFROM plans", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "marts\\dim_plan_budget.sql", "original_file_path": "models\\marts\\dim_plan_budget.sql", "name": "dim_plan_budget", "alias": "dim_plan_budget", "checksum": {"name": "sha256", "checksum": "ddeec66c0dba463843b0969c3d85a46a1ea54f3e4d6b5f75f4471e2524e9f90b"}, "tags": [], "refs": [["stg_budget_and_plan"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\marts\\dim_plan_budget.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\marts\\dim_plan_budget.sql", "deferred": false, "unrendered_config": {}, "created_at": 1676546308.7825003, "compiled_code": "WITH source AS (\n    SELECT\n        start_date,\n        end_date,\n        plan_budget,\n        plan_type,\n        plan_order\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_budget_and_plan`\n),\n\narray_table AS (\n    SELECT \n        GENERATE_DATE_ARRAY(start_date,end_date) AS date, \n        plan_budget, \n        plan_type, \n        plan_order \n    FROM source\n),\n\nplans AS (\n    SELECT\n        date,\n        plan_budget,\n        plan_order,\n        CASE\n            WHEN plan_type = \"UA\" THEN \"uac\"\n            WHEN plan_type = \"PROMO\" THEN \"promo\"\n            WHEN plan_type = \"RTG\" THEN \"rtg\"\n            WHEN plan_type = \"CPA\" THEN \"cpc\"\n            ELSE '-' END AS plan_type\n    FROM array_table, UNNEST(date) AS date\n)\n\nSELECT\n    date,\n    plan_budget,\n    plan_order,\n    plan_type\nFROM plans", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`dim_plan_budget`"}, "model.perekrestokvprok.dim_ret": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.promo_type", "macro.perekrestokvprok.promo_search", "macro.perekrestokvprok.aud", "macro.perekrestokvprok.platform", "macro.perekrestokvprok.geo", "macro.perekrestokvprok.partner"], "nodes": ["model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_facebook_cab_sheets", "model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.int_yandex_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.int_vk_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_twitter_cab_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_tiktok_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_asa_cab_sheets", "model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_google_cab_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_partner_limits", "model.perekrestokvprok.stg_appnext_cost"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_ret"], "unique_id": "model.perekrestokvprok.dim_ret", "raw_code": "/* \r\n\u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043b\u0443\u0447\u0448\u0435 \u0437\u0430\u0433\u043b\u044f\u043d\u0443\u0442\u044c \u0441\u044e\u0434\u0430: https://github.com/realweb-msk/perekrestokvprok-dbt\r\n\u0438\u043b\u0438 \u0441\u044e\u0434\u0430: https://brave-hermann-395dc3.netlify.app/#!/model/model.perekrestokvprok.dim_ret\r\n*/\r\n\r\nWITH af_conversions AS (\r\n    SELECT\r\n        date,\r\n        is_retargeting,\r\n        af_cid,\r\n        --adset_name,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\r\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\r\n        mediasource,\r\n        platform,\r\n        CASE\r\n            WHEN event_name IN ('re-attribution','re-engagement')\r\n            THEN 're-engagement' \r\n            WHEN event_name = \"af_purchase\"\r\n            THEN \"af_purchase\"\r\n            ELSE 'no' END AS event_name,\r\n        uniq_event_count,\r\n        event_revenue,\r\n        event_count,\r\n        campaign_name\r\n    FROM  {{ ref('stg_af_client_data') }}\r\n    WHERE event_name IN('re-attribution','re-engagement',\"af_purchase\")\r\n    -- WHERE is_retargeting = TRUE\r\n    -- AND REGEXP_CONTAINS(campaign_name, 'realweb')\r\n),\r\n\r\n----------------------- facebook -------------------------\r\n\r\nfacebook AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type, \r\n        {{ promo_search('campaign_name', 'adset_name', 'ad_name') }} as promo_search,\r\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\r\n        SUM(installs) AS re_engagement,\r\n        SUM(revenue) AS revenue,\r\n        SUM(purchase) AS purchase,\r\n        null AS first_purchase,\r\n        null AS first_purchase_revenue,\r\n        SUM(spend) AS spend,\r\n        'Other' as base,\r\n        'Facebook' AS source\r\n    FROM {{ ref('stg_facebook_cab_sheets') }}\r\n    --{{ ref('stg_facebook_cab_meta') }}\r\n    WHERE campaign_type = 'retargeting'\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\n----------------------- yandex -------------------------\r\n\r\nyandex_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type, \r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\r\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\r\n        -- SUM(impressions),\r\n        -- SUM(clicks),\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('int_yandex_cab_meta') }}\r\n    WHERE campaign_type = 'retargeting'\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nyandex_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        promo_search,\r\n        auditory,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\r\n    FROM af_conversions\r\n    WHERE mediasource ='yandexdirect_int'\r\n    AND is_retargeting = TRUE\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nyandex AS (\r\n    SELECT\r\n        COALESCE(yandex_convs.date, yandex_cost.date) AS date,\r\n        COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) AS campaign_name,\r\n        COALESCE(yandex_convs.platform, yandex_cost.platform) AS platform,\r\n        COALESCE(yandex_convs.promo_type, yandex_cost.promo_type) AS promo_type,\r\n        COALESCE(yandex_convs.promo_search, yandex_cost.promo_search) AS promo_search,\r\n        COALESCE(yandex_convs.auditory, yandex_cost.auditory) AS auditory,\r\n        COALESCE(re_engagement,0) AS re_engagement,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        null AS first_purchase,\r\n        null AS first_purchase_revenue,\r\n        COALESCE(spend,0) AS spend,\r\n        'Other' as base,\r\n        '\u042f\u043d\u0434\u0435\u043a\u0441.\u0414\u0438\u0440\u0435\u043a\u0442' AS source,\r\n    FROM yandex_convs\r\n    FULL OUTER JOIN yandex_cost\r\n    ON yandex_convs.date = yandex_cost.date \r\n    AND yandex_convs.campaign_name = yandex_cost.campaign_name\r\n    AND yandex_convs.promo_type = yandex_cost.promo_type\r\n    AND yandex_convs.promo_search = yandex_cost.promo_search\r\n    AND yandex_convs.auditory = yandex_cost.auditory\r\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\r\n    AND COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- vk -------------------------\r\n\r\nvk_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\r\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\r\n        -- SUM(impressions),\r\n        -- SUM(clicks),\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('int_vk_cab_meta') }}\r\n    WHERE campaign_type = 'retargeting'\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nvk_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        promo_search,\r\n        auditory,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\r\n    FROM af_conversions\r\n    WHERE mediasource ='vk_int'\r\n    AND is_retargeting = TRUE\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nvk AS (\r\n    SELECT\r\n        COALESCE(vk_convs.date, vk_cost.date) AS date,\r\n        COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) AS campaign_name,\r\n        COALESCE(vk_convs.platform, vk_cost.platform) AS platform,\r\n        COALESCE(vk_convs.promo_type, vk_cost.promo_type) AS promo_type,\r\n        COALESCE(vk_convs.promo_search, vk_cost.promo_search) AS promo_search,\r\n        COALESCE(vk_convs.auditory, vk_cost.auditory) AS auditory,\r\n        COALESCE(re_engagement,0) AS re_engagement,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        null AS first_purchase,\r\n        null AS first_purchase_revenue,\r\n        COALESCE(spend,0) AS spend,\r\n        'Other' as base,\r\n        '\u0412\u041a' AS source\r\n    FROM vk_convs\r\n    FULL OUTER JOIN vk_cost\r\n    ON vk_convs.date = vk_cost.date \r\n    AND vk_convs.campaign_name = vk_cost.campaign_name\r\n    AND vk_convs.promo_type = vk_cost.promo_type\r\n    AND vk_convs.promo_search = vk_cost.promo_search\r\n    AND vk_convs.auditory = vk_cost.auditory\r\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\r\n    AND COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- mytarget -------------------------\r\n\r\nmt_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\r\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\r\n        -- SUM(impressions),\r\n        -- SUM(clicks),\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('int_mytarget_cab_meta') }}\r\n    WHERE campaign_type = 'retargeting'\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nmt_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        promo_search,\r\n        auditory,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\r\n    FROM af_conversions\r\n    WHERE mediasource = 'mail.ru_int'\r\n    AND is_retargeting = TRUE\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nmt AS (\r\n    SELECT\r\n        COALESCE(mt_convs.date, mt_cost.date) AS date,\r\n        COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) AS campaign_name,\r\n        COALESCE(mt_convs.platform, mt_cost.platform) AS platform,\r\n        COALESCE(mt_convs.promo_type, mt_cost.promo_type) AS promo_type,\r\n        COALESCE(mt_convs.promo_search, mt_cost.promo_search) AS promo_search,\r\n        COALESCE(mt_convs.auditory, mt_cost.auditory) AS auditory,\r\n        COALESCE(re_engagement,0) AS re_engagement,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        null AS first_purchase,\r\n        null AS first_purchase_revenue,\r\n        COALESCE(spend,0) AS spend,\r\n        'Other' as base,\r\n        'MyTarget' AS source\r\n    FROM mt_convs\r\n    FULL OUTER JOIN mt_cost\r\n    ON mt_convs.date = mt_cost.date \r\n    AND mt_convs.campaign_name = mt_cost.campaign_name\r\n    AND mt_convs.promo_type = mt_cost.promo_type\r\n    AND mt_convs.promo_search = mt_cost.promo_search\r\n    AND mt_convs.auditory = mt_cost.auditory\r\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\r\n    AND COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- twitter -------------------------\r\n\r\ntw_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ promo_type('campaign_name', '\"-\"') }} as promo_type,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_search('campaign_name') }} as promo_search,\r\n        {{ aud('campaign_name') }} AS auditory,\r\n        -- SUM(impressions),\r\n        -- SUM(clicks),\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('stg_twitter_cab_sheets') }}\r\n    WHERE campaign_type = 'retargeting'\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_tw')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\ntw_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        promo_search,\r\n        auditory,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\r\n    FROM af_conversions\r\n    WHERE is_retargeting = TRUE\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_tw')\r\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\ntw AS (\r\n    SELECT\r\n        COALESCE(tw_convs.date, tw_cost.date) AS date,\r\n        COALESCE(tw_convs.campaign_name, tw_cost.campaign_name) AS campaign_name,\r\n        COALESCE(tw_convs.platform, tw_cost.platform) AS platform,\r\n        COALESCE(tw_convs.promo_type, tw_cost.promo_type) AS promo_type,\r\n        COALESCE(tw_convs.promo_search, tw_cost.promo_search) AS promo_search,\r\n        COALESCE(tw_convs.auditory, tw_cost.auditory) AS auditory,\r\n        COALESCE(re_engagement,0) AS re_engagement,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        null AS first_purchase,\r\n        null AS first_purchase_revenue,\r\n        COALESCE(spend,0) AS spend,\r\n        'Other' as base,\r\n        'Twitter' AS source\r\n    FROM tw_convs\r\n    FULL OUTER JOIN tw_cost\r\n    ON tw_convs.date = tw_cost.date \r\n    AND tw_convs.campaign_name = tw_cost.campaign_name\r\n    AND tw_convs.promo_type = tw_cost.promo_type\r\n    AND tw_convs.promo_search = tw_cost.promo_search\r\n    AND tw_convs.auditory = tw_cost.auditory\r\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\r\n    AND COALESCE(tw_convs.campaign_name, tw_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- tiktok -------------------------\r\n\r\ntiktok_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\r\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\r\n        -- SUM(impressions),\r\n        -- SUM(clicks),\r\n        SUM(spend) AS spend,\r\n        -- \u0434\u043b\u044f \u0442\u0438\u043a\u0442\u043e\u043a\u0430 \u0438\u0437 \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430:--\r\n        SUM(purchase) AS purchase\r\n    FROM {{ ref('stg_tiktok_cab_meta') }}\r\n    WHERE campaign_type = 'retargeting'\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\ntiktok_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        promo_search,\r\n        auditory,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        --SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\r\n    FROM af_conversions\r\n    WHERE  is_retargeting = TRUE\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_tiktok')\r\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\ntiktok AS (\r\n    SELECT\r\n        COALESCE(tiktok_convs.date, tiktok_cost.date) AS date,\r\n        COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) AS campaign_name,\r\n        COALESCE(tiktok_convs.platform, tiktok_cost.platform) AS platform,\r\n        COALESCE(tiktok_convs.promo_type, tiktok_cost.promo_type) AS promo_type,\r\n        COALESCE(tiktok_convs.promo_search, tiktok_cost.promo_search) AS promo_search,\r\n        COALESCE(tiktok_convs.auditory, tiktok_cost.auditory) AS auditory,\r\n        COALESCE(re_engagement,0) AS re_engagement,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        null AS first_purchase,\r\n        null AS first_purchase_revenue,\r\n        COALESCE(spend,0) AS spend,\r\n        'Other' as base,\r\n        'TikTok' AS source\r\n    FROM tiktok_convs\r\n    FULL OUTER JOIN tiktok_cost\r\n    ON tiktok_convs.date = tiktok_cost.date \r\n    AND tiktok_convs.campaign_name = tiktok_cost.campaign_name\r\n    AND tiktok_convs.promo_type = tiktok_cost.promo_type\r\n    AND tiktok_convs.promo_search = tiktok_cost.promo_search\r\n    AND tiktok_convs.auditory = tiktok_cost.auditory\r\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\r\n    AND COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- apple search ads -------------------------\r\n\r\nasa_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\r\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\r\n        'ios' as platform,\r\n        -- SUM(impressions),\r\n        -- SUM(clicks),\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('stg_asa_cab_sheets') }}\r\n    --{{ ref('int_asa_cab_meta') }}\r\n    WHERE campaign_type = 'retargeting'\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nasa_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        promo_search,\r\n        auditory,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'\\(r\\)')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nasa AS (\r\n    SELECT\r\n        COALESCE(asa_convs.date, asa_cost.date) AS date,\r\n        COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) AS campaign_name,\r\n        COALESCE(asa_convs.platform, asa_cost.platform) AS platform,\r\n        COALESCE(asa_convs.promo_type, asa_cost.promo_type) AS promo_type,\r\n        COALESCE(asa_convs.promo_search, asa_cost.promo_search) AS promo_search,\r\n        COALESCE(asa_convs.auditory, asa_cost.auditory) AS auditory,\r\n        COALESCE(re_engagement,0) AS re_engagement,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        null AS first_purchase,\r\n        null AS first_purchase_revenue,\r\n        COALESCE(spend,0) AS spend,\r\n        'Other' as base,\r\n        'Apple Search Ads' AS source\r\n    FROM asa_convs\r\n    FULL OUTER JOIN asa_cost\r\n    ON asa_convs.date = asa_cost.date \r\n    AND asa_convs.campaign_name = asa_cost.campaign_name\r\n    AND asa_convs.promo_type = asa_cost.promo_type\r\n    AND asa_convs.promo_search = asa_cost.promo_search\r\n    AND asa_convs.auditory = asa_cost.auditory\r\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\r\n    AND COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- Google Ads -------------------------\r\n\r\ngoogle_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\r\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\r\n        -- SUM(impressions),\r\n        -- SUM(clicks),\r\n        SUM(spend) AS spend,\r\n        SUM(installs) AS re_engagement\r\n    FROM {{ ref('stg_google_cab_sheets') }}\r\n    WHERE (campaign_type = 'retargeting'\r\n    --- \u043a\u043e\u0441\u0442\u044b\u043b\u044c 10.02.2022 X5RGPEREK-272 ---\r\n    OR campaign_name IN (\r\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\r\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]'))\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_|ohm')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\ngoogle_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        promo_search,\r\n        auditory,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n    FROM af_conversions\r\n    WHERE mediasource ='googleadwords_int'\r\n    AND is_retargeting = TRUE\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb|ohm')\r\n    AND (REGEXP_CONTAINS(campaign_name,  r'[_\\[]old[\\]_]')\r\n    OR campaign_name IN (\r\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\r\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]'))\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\ngoogle AS (\r\n    SELECT\r\n        COALESCE(google_convs.date, google_cost.date) AS date,\r\n        COALESCE(google_convs.campaign_name, google_cost.campaign_name) AS campaign_name,\r\n        COALESCE(google_convs.platform, google_cost.platform) AS platform,\r\n        COALESCE(google_convs.promo_type, google_cost.promo_type) AS promo_type,\r\n        COALESCE(google_convs.promo_search, google_cost.promo_search) AS promo_search,\r\n        COALESCE(google_convs.auditory, google_cost.auditory) AS auditory,\r\n        COALESCE(re_engagement,0) AS re_engagement,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        null AS first_purchase,\r\n        null AS first_purchase_revenue,\r\n        COALESCE(spend,0) AS spend,\r\n        'Other' as base,\r\n        'Google Ads' AS source\r\n    FROM google_convs\r\n    FULL OUTER JOIN google_cost\r\n    ON google_convs.date = google_cost.date \r\n    AND google_convs.campaign_name = google_cost.campaign_name\r\n    AND google_convs.promo_type = google_cost.promo_type\r\n    AND google_convs.promo_search = google_cost.promo_search\r\n    AND google_convs.auditory = google_cost.auditory\r\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\r\n    AND COALESCE(google_convs.campaign_name, google_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- inapp -------------------------\r\naf_inapp AS (\r\n    SELECT\r\n        date,\r\n        is_retargeting,\r\n        af_cid,\r\n        adset_name,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\r\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\r\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\r\n        mediasource,\r\n        platform,\r\n        CASE\r\n            WHEN event_name IN ('re-attribution','re-engagement')\r\n            THEN 're-engagement'\r\n            ELSE event_name END AS event_name,\r\n        uniq_event_count,\r\n        event_revenue,\r\n        event_count,\r\n        campaign_name\r\n    FROM {{ ref('stg_af_client_data') }}\r\n    WHERE REGEXP_CONTAINS(campaign_name, 'realweb_inapp') AND is_retargeting = TRUE\r\n    -- NOT REGEXP_CONTAINS(campaign_name, r'first_open_not_buy_rtg|installed_the_app_but_not_buy_rtg|registered_but_not_buy_rtg')\r\n    -- WHERE is_retargeting = FALSE\r\n    -- AND REGEXP_CONTAINS(campaign_name, 'realweb')\r\n),\r\n\r\nrate AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        platform,\r\n        rate_for_us,\r\n        base\r\nFROM {{ ref('stg_rate_info') }}\r\nWHERE type = 'RTG'\r\n),\r\n\r\nlimits_table AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        limits\r\n    FROM {{ ref('stg_partner_limits') }}\r\n    WHERE type = 'RTG'\r\n),\r\n\r\ninapp_convs_without_cumulation AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        {{ partner('campaign_name') }} AS partner,\r\n        auditory,\r\n        platform,\r\n        CASE\r\n      WHEN REGEXP_CONTAINS(campaign_name, r'deep_outflow') and date > '2022-10-04' THEN 'deep_outflow'\r\n      WHEN date >= '2022-10-01' and date <= '2022-10-04' THEN 'deep_outflow'\r\n      WHEN REGEXP_CONTAINS(campaign_name, r'first_open_not_buy_rtg') and date > '2022-10-04' THEN 'first_open_not_buy_rtg'\r\n      WHEN REGEXP_CONTAINS(campaign_name, r'installed_the_app_but_not_buy_rtg') and date > '2022-10-04' THEN 'installed_the_app_but_not_buy_rtg'\r\n      WHEN REGEXP_CONTAINS(campaign_name, r'registered_but_not_buy_rtg') and date > '2022-10-04' THEN 'registered_but_not_buy_rtg'\r\n      ELSE 'Other'\r\n    END as base,\r\n        promo_type,\r\n        promo_search,\r\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\r\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\r\n    FROM af_inapp\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_inapp')\r\n    AND is_retargeting = TRUE\r\n    GROUP BY 1,2,3,4,5,6,7,8\r\n),\r\n\r\ninapp_convs_with_cumulation AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        partner,\r\n        platform,\r\n        base,\r\n        promo_type,\r\n        auditory,\r\n        promo_search,\r\n        first_purchase_revenue,\r\n        first_purchase,\r\n        revenue,\r\n        purchase,\r\n        re_engagement,\r\n        SUM(first_purchase) \r\n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, first_purchase_revenue)\r\n            AS cum_first_purchase_count_by_prt,\r\n        SUM(first_purchase) \r\n            OVER(PARTITION BY DATE_TRUNC(date, MONTH) ORDER BY date, first_purchase_revenue)\r\n            AS cum_first_purchase,\r\n        SUM(purchase) \r\n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, revenue)\r\n            AS cum_purchase_count_by_prt,\r\n        SUM(purchase) \r\n            OVER(PARTITION BY DATE_TRUNC(date, MONTH) ORDER BY date, revenue)\r\n            AS cum_purchase\r\n    FROM inapp_convs_without_cumulation\r\n),\r\n\r\ninapp_convs AS (\r\n    SELECT\r\n        i.date,\r\n        i.campaign_name,\r\n        i.partner,\r\n        i.platform,\r\n        base,\r\n        auditory,\r\n        cum_purchase,\r\n        i.promo_type,\r\n        i.promo_search,\r\n        IF(cum_first_purchase_count_by_prt <= COALESCE(l.limits, 1000000), first_purchase_revenue, 0) AS first_purchase_revenue,\r\n        IF(cum_first_purchase_count_by_prt <= COALESCE(l.limits, 1000000), first_purchase, 0) AS first_purchase, \r\n        IF(cum_purchase_count_by_prt <= COALESCE(l.limits, 1000000), revenue, 0) AS revenue,\r\n        IF(cum_purchase_count_by_prt <= COALESCE(l.limits, 1000000), purchase, 0) AS purchase,\r\n        re_engagement\r\n    FROM inapp_convs_with_cumulation i\r\n    LEFT JOIN limits_table l\r\n    ON i.partner = l.partner \r\n    AND i.date BETWEEN l.start_date AND l.end_date\r\n),\r\n\r\ninapp AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        inapp_convs.platform AS platform,\r\n        promo_type,\r\n        promo_search,\r\n        auditory,\r\n        re_engagement,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        CASE\r\n                WHEN date BETWEEN '2021-10-01' AND '2021-10-31'\r\n                    AND cum_purchase >= 3000 THEN purchase * 140\r\n                WHEN date BETWEEN '2021-10-01' AND '2021-10-31'\r\n                    AND cum_purchase < 3000 THEN purchase * rate_for_us\r\n                WHEN date NOT BETWEEN '2021-10-01' AND '2021-10-31' AND date <= '2022-10-04'\r\n                    THEN purchase * rate_for_us\r\n                WHEN date > '2022-10-04'\r\n                    AND REGEXP_CONTAINS(inapp_convs.base, r'first_open_not_buy_rtg|installed_the_app_but_not_buy_rtg|registered_but_not_buy_rtg')\r\n                    THEN first_purchase * rate_for_us\r\n                WHEN date > '2022-10-04'\r\n                    AND REGEXP_CONTAINS(inapp_convs.base, r'deep_outflow')\r\n                    THEN purchase * rate_for_us\r\n                ELSE 0 END AS spend,\r\n        inapp_convs.base as base,\r\n        'inapp' AS source\r\n    FROM inapp_convs\r\n    LEFT JOIN rate\r\n    ON inapp_convs.partner = rate.partner \r\n    AND inapp_convs.date BETWEEN rate.start_date AND rate.end_date\r\n    AND inapp_convs.platform = rate.platform\r\n    AND inapp_convs.base = rate.base \r\n    WHERE campaign_name != 'None'\r\n),\r\n\r\n--------------------------------Appnext------------------------------------------\r\n\r\nappnext_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        type,\r\n        CASE \r\n            WHEN REGEXP_CONTAINS(campaign_name,'_p01_') THEN 'android'\r\n            WHEN REGEXP_CONTAINS(campaign_name,'_p02_') THEN 'ios'\r\n        END AS platform,\r\n        cost\r\n    FROM {{ ref('stg_appnext_cost') }}\r\n    WHERE\r\n        REGEXP_CONTAINS(campaign_name,r'_u2_')\r\n        AND cost != 0\r\n),\r\n\r\nAppnext_convs AS (\r\n    SELECT \r\n        date,\r\n        CASE\r\n          WHEN af_cid = '514529' THEN 'realweb_p01_a999_c211_m404_u2_vprok_test1'\r\n          ELSE campaign_name\r\n        END AS campaign_name,\r\n        platform,\r\n        promo_type,\r\n        promo_search,\r\n        auditory,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        --SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\r\n    FROM af_conversions\r\n    WHERE  is_retargeting = TRUE\r\n    AND (REGEXP_CONTAINS(campaign_name, r'_c211') OR REGEXP_CONTAINS(af_cid, r'514529'))\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nAppnext AS (\r\n    SELECT\r\n        COALESCE(Appnext_convs.date, Appnext_cost.date) AS date,\r\n        COALESCE(Appnext_convs.campaign_name, Appnext_cost.campaign_name) AS campaign_name,\r\n        COALESCE(Appnext_convs.platform, Appnext_cost.platform) AS platform,\r\n        Appnext_convs.promo_type AS promo_type,\r\n        Appnext_convs.promo_search AS promo_search,\r\n        Appnext_convs.auditory AS auditory,\r\n        COALESCE(re_engagement,0) AS re_engagement,\r\n        COALESCE(revenue,0) AS revenue,\r\n        null AS purchase,\r\n        null AS first_purchase,\r\n        null AS first_purchase_revenue,\r\n        appnext_cost.cost AS spend,\r\n        'Other' as base,\r\n        'Appnext' AS source\r\n    FROM Appnext_convs\r\n    FULL OUTER JOIN Appnext_cost\r\n    ON  Appnext_convs.date = Appnext_cost.date \r\n    AND Appnext_convs.campaign_name = Appnext_cost.campaign_name\r\n    AND appnext_cost.platform = appnext_convs.platform\r\n    --WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\r\n    --AND COALESCE(Appnext_convs.campaign_name, Appnext_cost.campaign_name) != 'None'\r\n),\r\n\r\n\r\n\r\nfinal AS (\r\n    SELECT * FROM yandex\r\n    UNION ALL \r\n    SELECT * FROM vk\r\n    UNION ALL \r\n    SELECT * FROM mt\r\n    UNION ALL \r\n    SELECT * FROM tw\r\n    UNION ALL \r\n    SELECT * FROM tiktok\r\n    UNION ALL\r\n    SELECT * FROM asa\r\n    WHERE date <= '2022-08-31'\r\n    UNION ALL\r\n    SELECT * FROM facebook\r\n    UNION ALL\r\n    SELECT * FROM inapp\r\n    UNION ALL\r\n    SELECT * FROM google\r\n    UNION ALL\r\n    SELECT * FROM Appnext\r\n)\r\n\r\nSELECT \r\n    date,\r\n    campaign_name,\r\n    platform,\r\n    promo_type,\r\n    promo_search,\r\n    auditory,\r\n    re_engagement,\r\n    revenue,\r\n    purchase,\r\n    first_purchase,\r\n    first_purchase_revenue,\r\n    spend,\r\n    base,\r\n    source,\r\n    {{ geo('campaign_name') }} AS geo\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "marts\\dim_ret.sql", "original_file_path": "models\\marts\\dim_ret.sql", "name": "dim_ret", "alias": "dim_ret", "checksum": {"name": "sha256", "checksum": "3e7558fca981dcdd115f3552f501acaf15e21dbcbed9a111fc3644ae10b03296"}, "tags": [], "refs": [["stg_promo_dict_sheets"], ["stg_af_client_data"], ["stg_promo_dict_sheets"], ["stg_facebook_cab_sheets"], ["stg_facebook_cab_meta"], ["stg_promo_dict_sheets"], ["int_yandex_cab_meta"], ["stg_promo_dict_sheets"], ["int_vk_cab_meta"], ["stg_promo_dict_sheets"], ["int_mytarget_cab_meta"], ["stg_promo_dict_sheets"], ["stg_twitter_cab_sheets"], ["stg_promo_dict_sheets"], ["stg_tiktok_cab_meta"], ["stg_promo_dict_sheets"], ["stg_asa_cab_sheets"], ["int_asa_cab_meta"], ["stg_promo_dict_sheets"], ["stg_google_cab_sheets"], ["stg_promo_dict_sheets"], ["stg_af_client_data"], ["stg_rate_info"], ["stg_partner_limits"], ["stg_appnext_cost"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\marts\\dim_ret.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\marts\\dim_ret.sql", "deferred": false, "unrendered_config": {}, "created_at": 1676546308.7863219, "compiled_code": "/* \n\u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043b\u0443\u0447\u0448\u0435 \u0437\u0430\u0433\u043b\u044f\u043d\u0443\u0442\u044c \u0441\u044e\u0434\u0430: https://github.com/realweb-msk/perekrestokvprok-dbt\n\u0438\u043b\u0438 \u0441\u044e\u0434\u0430: https://brave-hermann-395dc3.netlify.app/#!/model/model.perekrestokvprok.dim_ret\n*/\n\nWITH af_conversions AS (\n    SELECT\n        date,\n        is_retargeting,\n        af_cid,\n        --adset_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        mediasource,\n        platform,\n        CASE\n            WHEN event_name IN ('re-attribution','re-engagement')\n            THEN 're-engagement' \n            WHEN event_name = \"af_purchase\"\n            THEN \"af_purchase\"\n            ELSE 'no' END AS event_name,\n        uniq_event_count,\n        event_revenue,\n        event_count,\n        campaign_name\n    FROM  `perekrestokvprok-bq`.`dbt_production`.`stg_af_client_data`\n    WHERE event_name IN('re-attribution','re-engagement',\"af_purchase\")\n    -- WHERE is_retargeting = TRUE\n    -- AND REGEXP_CONTAINS(campaign_name, 'realweb')\n),\n\n----------------------- facebook -------------------------\n\nfacebook AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type, \n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        SUM(installs) AS re_engagement,\n        SUM(revenue) AS revenue,\n        SUM(purchase) AS purchase,\n        null AS first_purchase,\n        null AS first_purchase_revenue,\n        SUM(spend) AS spend,\n        'Other' as base,\n        'Facebook' AS source\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_facebook_cab_sheets`\n    --`perekrestokvprok-bq`.`dbt_production`.`stg_facebook_cab_meta`\n    WHERE campaign_type = 'retargeting'\n    GROUP BY 1,2,3,4,5,6\n),\n\n----------------------- yandex -------------------------\n\nyandex_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type, \n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        -- SUM(impressions),\n        -- SUM(clicks),\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`int_yandex_cab_meta`\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nyandex_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        promo_search,\n        auditory,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\n    FROM af_conversions\n    WHERE mediasource ='yandexdirect_int'\n    AND is_retargeting = TRUE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n    GROUP BY 1,2,3,4,5,6\n),\n\nyandex AS (\n    SELECT\n        COALESCE(yandex_convs.date, yandex_cost.date) AS date,\n        COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) AS campaign_name,\n        COALESCE(yandex_convs.platform, yandex_cost.platform) AS platform,\n        COALESCE(yandex_convs.promo_type, yandex_cost.promo_type) AS promo_type,\n        COALESCE(yandex_convs.promo_search, yandex_cost.promo_search) AS promo_search,\n        COALESCE(yandex_convs.auditory, yandex_cost.auditory) AS auditory,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        null AS first_purchase,\n        null AS first_purchase_revenue,\n        COALESCE(spend,0) AS spend,\n        'Other' as base,\n        '\u042f\u043d\u0434\u0435\u043a\u0441.\u0414\u0438\u0440\u0435\u043a\u0442' AS source,\n    FROM yandex_convs\n    FULL OUTER JOIN yandex_cost\n    ON yandex_convs.date = yandex_cost.date \n    AND yandex_convs.campaign_name = yandex_cost.campaign_name\n    AND yandex_convs.promo_type = yandex_cost.promo_type\n    AND yandex_convs.promo_search = yandex_cost.promo_search\n    AND yandex_convs.auditory = yandex_cost.auditory\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\n    AND COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) != 'None'\n),\n\n----------------------- vk -------------------------\n\nvk_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        -- SUM(impressions),\n        -- SUM(clicks),\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`int_vk_cab_meta`\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nvk_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        promo_search,\n        auditory,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\n    FROM af_conversions\n    WHERE mediasource ='vk_int'\n    AND is_retargeting = TRUE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n    GROUP BY 1,2,3,4,5,6\n),\n\nvk AS (\n    SELECT\n        COALESCE(vk_convs.date, vk_cost.date) AS date,\n        COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) AS campaign_name,\n        COALESCE(vk_convs.platform, vk_cost.platform) AS platform,\n        COALESCE(vk_convs.promo_type, vk_cost.promo_type) AS promo_type,\n        COALESCE(vk_convs.promo_search, vk_cost.promo_search) AS promo_search,\n        COALESCE(vk_convs.auditory, vk_cost.auditory) AS auditory,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        null AS first_purchase,\n        null AS first_purchase_revenue,\n        COALESCE(spend,0) AS spend,\n        'Other' as base,\n        '\u0412\u041a' AS source\n    FROM vk_convs\n    FULL OUTER JOIN vk_cost\n    ON vk_convs.date = vk_cost.date \n    AND vk_convs.campaign_name = vk_cost.campaign_name\n    AND vk_convs.promo_type = vk_cost.promo_type\n    AND vk_convs.promo_search = vk_cost.promo_search\n    AND vk_convs.auditory = vk_cost.auditory\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\n    AND COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) != 'None'\n),\n\n----------------------- mytarget -------------------------\n\nmt_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        -- SUM(impressions),\n        -- SUM(clicks),\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`int_mytarget_cab_meta`\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nmt_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        promo_search,\n        auditory,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\n    FROM af_conversions\n    WHERE mediasource = 'mail.ru_int'\n    AND is_retargeting = TRUE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n    GROUP BY 1,2,3,4,5,6\n),\n\nmt AS (\n    SELECT\n        COALESCE(mt_convs.date, mt_cost.date) AS date,\n        COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) AS campaign_name,\n        COALESCE(mt_convs.platform, mt_cost.platform) AS platform,\n        COALESCE(mt_convs.promo_type, mt_cost.promo_type) AS promo_type,\n        COALESCE(mt_convs.promo_search, mt_cost.promo_search) AS promo_search,\n        COALESCE(mt_convs.auditory, mt_cost.auditory) AS auditory,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        null AS first_purchase,\n        null AS first_purchase_revenue,\n        COALESCE(spend,0) AS spend,\n        'Other' as base,\n        'MyTarget' AS source\n    FROM mt_convs\n    FULL OUTER JOIN mt_cost\n    ON mt_convs.date = mt_cost.date \n    AND mt_convs.campaign_name = mt_cost.campaign_name\n    AND mt_convs.promo_type = mt_cost.promo_type\n    AND mt_convs.promo_search = mt_cost.promo_search\n    AND mt_convs.auditory = mt_cost.auditory\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\n    AND COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) != 'None'\n),\n\n----------------------- twitter -------------------------\n\ntw_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        -- SUM(impressions),\n        -- SUM(clicks),\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_twitter_cab_sheets`\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_tw')\n    GROUP BY 1,2,3,4,5,6\n),\n\ntw_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        promo_search,\n        auditory,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\n    FROM af_conversions\n    WHERE is_retargeting = TRUE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_tw')\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n    GROUP BY 1,2,3,4,5,6\n),\n\ntw AS (\n    SELECT\n        COALESCE(tw_convs.date, tw_cost.date) AS date,\n        COALESCE(tw_convs.campaign_name, tw_cost.campaign_name) AS campaign_name,\n        COALESCE(tw_convs.platform, tw_cost.platform) AS platform,\n        COALESCE(tw_convs.promo_type, tw_cost.promo_type) AS promo_type,\n        COALESCE(tw_convs.promo_search, tw_cost.promo_search) AS promo_search,\n        COALESCE(tw_convs.auditory, tw_cost.auditory) AS auditory,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        null AS first_purchase,\n        null AS first_purchase_revenue,\n        COALESCE(spend,0) AS spend,\n        'Other' as base,\n        'Twitter' AS source\n    FROM tw_convs\n    FULL OUTER JOIN tw_cost\n    ON tw_convs.date = tw_cost.date \n    AND tw_convs.campaign_name = tw_cost.campaign_name\n    AND tw_convs.promo_type = tw_cost.promo_type\n    AND tw_convs.promo_search = tw_cost.promo_search\n    AND tw_convs.auditory = tw_cost.auditory\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\n    AND COALESCE(tw_convs.campaign_name, tw_cost.campaign_name) != 'None'\n),\n\n----------------------- tiktok -------------------------\n\ntiktok_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        -- SUM(impressions),\n        -- SUM(clicks),\n        SUM(spend) AS spend,\n        -- \u0434\u043b\u044f \u0442\u0438\u043a\u0442\u043e\u043a\u0430 \u0438\u0437 \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430:--\n        SUM(purchase) AS purchase\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_tiktok_cab_meta`\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\ntiktok_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        promo_search,\n        auditory,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        --SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\n    FROM af_conversions\n    WHERE  is_retargeting = TRUE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_tiktok')\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n    GROUP BY 1,2,3,4,5,6\n),\n\ntiktok AS (\n    SELECT\n        COALESCE(tiktok_convs.date, tiktok_cost.date) AS date,\n        COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) AS campaign_name,\n        COALESCE(tiktok_convs.platform, tiktok_cost.platform) AS platform,\n        COALESCE(tiktok_convs.promo_type, tiktok_cost.promo_type) AS promo_type,\n        COALESCE(tiktok_convs.promo_search, tiktok_cost.promo_search) AS promo_search,\n        COALESCE(tiktok_convs.auditory, tiktok_cost.auditory) AS auditory,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        null AS first_purchase,\n        null AS first_purchase_revenue,\n        COALESCE(spend,0) AS spend,\n        'Other' as base,\n        'TikTok' AS source\n    FROM tiktok_convs\n    FULL OUTER JOIN tiktok_cost\n    ON tiktok_convs.date = tiktok_cost.date \n    AND tiktok_convs.campaign_name = tiktok_cost.campaign_name\n    AND tiktok_convs.promo_type = tiktok_cost.promo_type\n    AND tiktok_convs.promo_search = tiktok_cost.promo_search\n    AND tiktok_convs.auditory = tiktok_cost.auditory\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\n    AND COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) != 'None'\n),\n\n----------------------- apple search ads -------------------------\n\nasa_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        'ios' as platform,\n        -- SUM(impressions),\n        -- SUM(clicks),\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_asa_cab_sheets`\n    --`perekrestokvprok-bq`.`dbt_production`.`int_asa_cab_meta`\n    WHERE campaign_type = 'retargeting'\n    GROUP BY 1,2,3,4,5,6\n),\n\nasa_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        promo_search,\n        auditory,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'\\(r\\)')\n    GROUP BY 1,2,3,4,5,6\n),\n\nasa AS (\n    SELECT\n        COALESCE(asa_convs.date, asa_cost.date) AS date,\n        COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) AS campaign_name,\n        COALESCE(asa_convs.platform, asa_cost.platform) AS platform,\n        COALESCE(asa_convs.promo_type, asa_cost.promo_type) AS promo_type,\n        COALESCE(asa_convs.promo_search, asa_cost.promo_search) AS promo_search,\n        COALESCE(asa_convs.auditory, asa_cost.auditory) AS auditory,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        null AS first_purchase,\n        null AS first_purchase_revenue,\n        COALESCE(spend,0) AS spend,\n        'Other' as base,\n        'Apple Search Ads' AS source\n    FROM asa_convs\n    FULL OUTER JOIN asa_cost\n    ON asa_convs.date = asa_cost.date \n    AND asa_convs.campaign_name = asa_cost.campaign_name\n    AND asa_convs.promo_type = asa_cost.promo_type\n    AND asa_convs.promo_search = asa_cost.promo_search\n    AND asa_convs.auditory = asa_cost.auditory\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\n    AND COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) != 'None'\n),\n\n----------------------- Google Ads -------------------------\n\ngoogle_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        -- SUM(impressions),\n        -- SUM(clicks),\n        SUM(spend) AS spend,\n        SUM(installs) AS re_engagement\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_google_cab_sheets`\n    WHERE (campaign_type = 'retargeting'\n    --- \u043a\u043e\u0441\u0442\u044b\u043b\u044c 10.02.2022 X5RGPEREK-272 ---\n    OR campaign_name IN (\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]'))\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_|ohm')\n    GROUP BY 1,2,3,4,5,6\n),\n\ngoogle_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        promo_search,\n        auditory,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n    FROM af_conversions\n    WHERE mediasource ='googleadwords_int'\n    AND is_retargeting = TRUE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb|ohm')\n    AND (REGEXP_CONTAINS(campaign_name,  r'[_\\[]old[\\]_]')\n    OR campaign_name IN (\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]'))\n    GROUP BY 1,2,3,4,5,6\n),\n\ngoogle AS (\n    SELECT\n        COALESCE(google_convs.date, google_cost.date) AS date,\n        COALESCE(google_convs.campaign_name, google_cost.campaign_name) AS campaign_name,\n        COALESCE(google_convs.platform, google_cost.platform) AS platform,\n        COALESCE(google_convs.promo_type, google_cost.promo_type) AS promo_type,\n        COALESCE(google_convs.promo_search, google_cost.promo_search) AS promo_search,\n        COALESCE(google_convs.auditory, google_cost.auditory) AS auditory,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        null AS first_purchase,\n        null AS first_purchase_revenue,\n        COALESCE(spend,0) AS spend,\n        'Other' as base,\n        'Google Ads' AS source\n    FROM google_convs\n    FULL OUTER JOIN google_cost\n    ON google_convs.date = google_cost.date \n    AND google_convs.campaign_name = google_cost.campaign_name\n    AND google_convs.promo_type = google_cost.promo_type\n    AND google_convs.promo_search = google_cost.promo_search\n    AND google_convs.auditory = google_cost.auditory\n    WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\n    AND COALESCE(google_convs.campaign_name, google_cost.campaign_name) != 'None'\n),\n\n----------------------- inapp -------------------------\naf_inapp AS (\n    SELECT\n        date,\n        is_retargeting,\n        af_cid,\n        adset_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        mediasource,\n        platform,\n        CASE\n            WHEN event_name IN ('re-attribution','re-engagement')\n            THEN 're-engagement'\n            ELSE event_name END AS event_name,\n        uniq_event_count,\n        event_revenue,\n        event_count,\n        campaign_name\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_af_client_data`\n    WHERE REGEXP_CONTAINS(campaign_name, 'realweb_inapp') AND is_retargeting = TRUE\n    -- NOT REGEXP_CONTAINS(campaign_name, r'first_open_not_buy_rtg|installed_the_app_but_not_buy_rtg|registered_but_not_buy_rtg')\n    -- WHERE is_retargeting = FALSE\n    -- AND REGEXP_CONTAINS(campaign_name, 'realweb')\n),\n\nrate AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        platform,\n        rate_for_us,\n        base\nFROM `perekrestokvprok-bq`.`dbt_production`.`stg_rate_info`\nWHERE type = 'RTG'\n),\n\nlimits_table AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        limits\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_partner_limits`\n    WHERE type = 'RTG'\n),\n\ninapp_convs_without_cumulation AS (\n    SELECT \n        date,\n        campaign_name,\n        \n    CASE \n        WHEN REGEXP_CONTAINS(campaign_name, r'_ms_') THEN 'Mobisharks'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tl_') THEN '2leads'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_mx_') THEN 'MobX'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_sw_') THEN 'SW'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tm_') THEN 'Think Mobile'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_abc[_\\s]|_sf_') THEN 'Mediasurfer'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_a999') THEN 'In-house'\n    ELSE '-' END\n AS partner,\n        auditory,\n        platform,\n        CASE\n      WHEN REGEXP_CONTAINS(campaign_name, r'deep_outflow') and date > '2022-10-04' THEN 'deep_outflow'\n      WHEN date >= '2022-10-01' and date <= '2022-10-04' THEN 'deep_outflow'\n      WHEN REGEXP_CONTAINS(campaign_name, r'first_open_not_buy_rtg') and date > '2022-10-04' THEN 'first_open_not_buy_rtg'\n      WHEN REGEXP_CONTAINS(campaign_name, r'installed_the_app_but_not_buy_rtg') and date > '2022-10-04' THEN 'installed_the_app_but_not_buy_rtg'\n      WHEN REGEXP_CONTAINS(campaign_name, r'registered_but_not_buy_rtg') and date > '2022-10-04' THEN 'registered_but_not_buy_rtg'\n      ELSE 'Other'\n    END as base,\n        promo_type,\n        promo_search,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\n    FROM af_inapp\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_inapp')\n    AND is_retargeting = TRUE\n    GROUP BY 1,2,3,4,5,6,7,8\n),\n\ninapp_convs_with_cumulation AS (\n    SELECT\n        date,\n        campaign_name,\n        partner,\n        platform,\n        base,\n        promo_type,\n        auditory,\n        promo_search,\n        first_purchase_revenue,\n        first_purchase,\n        revenue,\n        purchase,\n        re_engagement,\n        SUM(first_purchase) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, first_purchase_revenue)\n            AS cum_first_purchase_count_by_prt,\n        SUM(first_purchase) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH) ORDER BY date, first_purchase_revenue)\n            AS cum_first_purchase,\n        SUM(purchase) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, revenue)\n            AS cum_purchase_count_by_prt,\n        SUM(purchase) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH) ORDER BY date, revenue)\n            AS cum_purchase\n    FROM inapp_convs_without_cumulation\n),\n\ninapp_convs AS (\n    SELECT\n        i.date,\n        i.campaign_name,\n        i.partner,\n        i.platform,\n        base,\n        auditory,\n        cum_purchase,\n        i.promo_type,\n        i.promo_search,\n        IF(cum_first_purchase_count_by_prt <= COALESCE(l.limits, 1000000), first_purchase_revenue, 0) AS first_purchase_revenue,\n        IF(cum_first_purchase_count_by_prt <= COALESCE(l.limits, 1000000), first_purchase, 0) AS first_purchase, \n        IF(cum_purchase_count_by_prt <= COALESCE(l.limits, 1000000), revenue, 0) AS revenue,\n        IF(cum_purchase_count_by_prt <= COALESCE(l.limits, 1000000), purchase, 0) AS purchase,\n        re_engagement\n    FROM inapp_convs_with_cumulation i\n    LEFT JOIN limits_table l\n    ON i.partner = l.partner \n    AND i.date BETWEEN l.start_date AND l.end_date\n),\n\ninapp AS (\n    SELECT\n        date,\n        campaign_name,\n        inapp_convs.platform AS platform,\n        promo_type,\n        promo_search,\n        auditory,\n        re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        CASE\n                WHEN date BETWEEN '2021-10-01' AND '2021-10-31'\n                    AND cum_purchase >= 3000 THEN purchase * 140\n                WHEN date BETWEEN '2021-10-01' AND '2021-10-31'\n                    AND cum_purchase < 3000 THEN purchase * rate_for_us\n                WHEN date NOT BETWEEN '2021-10-01' AND '2021-10-31' AND date <= '2022-10-04'\n                    THEN purchase * rate_for_us\n                WHEN date > '2022-10-04'\n                    AND REGEXP_CONTAINS(inapp_convs.base, r'first_open_not_buy_rtg|installed_the_app_but_not_buy_rtg|registered_but_not_buy_rtg')\n                    THEN first_purchase * rate_for_us\n                WHEN date > '2022-10-04'\n                    AND REGEXP_CONTAINS(inapp_convs.base, r'deep_outflow')\n                    THEN purchase * rate_for_us\n                ELSE 0 END AS spend,\n        inapp_convs.base as base,\n        'inapp' AS source\n    FROM inapp_convs\n    LEFT JOIN rate\n    ON inapp_convs.partner = rate.partner \n    AND inapp_convs.date BETWEEN rate.start_date AND rate.end_date\n    AND inapp_convs.platform = rate.platform\n    AND inapp_convs.base = rate.base \n    WHERE campaign_name != 'None'\n),\n\n--------------------------------Appnext------------------------------------------\n\nappnext_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        type,\n        CASE \n            WHEN REGEXP_CONTAINS(campaign_name,'_p01_') THEN 'android'\n            WHEN REGEXP_CONTAINS(campaign_name,'_p02_') THEN 'ios'\n        END AS platform,\n        cost\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_appnext_cost`\n    WHERE\n        REGEXP_CONTAINS(campaign_name,r'_u2_')\n        AND cost != 0\n),\n\nAppnext_convs AS (\n    SELECT \n        date,\n        CASE\n          WHEN af_cid = '514529' THEN 'realweb_p01_a999_c211_m404_u2_vprok_test1'\n          ELSE campaign_name\n        END AS campaign_name,\n        platform,\n        promo_type,\n        promo_search,\n        auditory,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        --SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = 're-engagement', event_count, 0)) AS re_engagement\n    FROM af_conversions\n    WHERE  is_retargeting = TRUE\n    AND (REGEXP_CONTAINS(campaign_name, r'_c211') OR REGEXP_CONTAINS(af_cid, r'514529'))\n    GROUP BY 1,2,3,4,5,6\n),\n\nAppnext AS (\n    SELECT\n        COALESCE(Appnext_convs.date, Appnext_cost.date) AS date,\n        COALESCE(Appnext_convs.campaign_name, Appnext_cost.campaign_name) AS campaign_name,\n        COALESCE(Appnext_convs.platform, Appnext_cost.platform) AS platform,\n        Appnext_convs.promo_type AS promo_type,\n        Appnext_convs.promo_search AS promo_search,\n        Appnext_convs.auditory AS auditory,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        null AS purchase,\n        null AS first_purchase,\n        null AS first_purchase_revenue,\n        appnext_cost.cost AS spend,\n        'Other' as base,\n        'Appnext' AS source\n    FROM Appnext_convs\n    FULL OUTER JOIN Appnext_cost\n    ON  Appnext_convs.date = Appnext_cost.date \n    AND Appnext_convs.campaign_name = Appnext_cost.campaign_name\n    AND appnext_cost.platform = appnext_convs.platform\n    --WHERE COALESCE(re_engagement,0) + COALESCE(revenue,0) + COALESCE(purchase,0) + COALESCE(spend,0) > 0\n    --AND COALESCE(Appnext_convs.campaign_name, Appnext_cost.campaign_name) != 'None'\n),\n\n\n\nfinal AS (\n    SELECT * FROM yandex\n    UNION ALL \n    SELECT * FROM vk\n    UNION ALL \n    SELECT * FROM mt\n    UNION ALL \n    SELECT * FROM tw\n    UNION ALL \n    SELECT * FROM tiktok\n    UNION ALL\n    SELECT * FROM asa\n    WHERE date <= '2022-08-31'\n    UNION ALL\n    SELECT * FROM facebook\n    UNION ALL\n    SELECT * FROM inapp\n    UNION ALL\n    SELECT * FROM google\n    UNION ALL\n    SELECT * FROM Appnext\n)\n\nSELECT \n    date,\n    campaign_name,\n    platform,\n    promo_type,\n    promo_search,\n    auditory,\n    re_engagement,\n    revenue,\n    purchase,\n    first_purchase,\n    first_purchase_revenue,\n    spend,\n    base,\n    source,\n    \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`dim_ret`"}, "model.perekrestokvprok.dim_ret_crm": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_promocode_client_data", "model.perekrestokvprok.stg_promo_sheets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_ret_crm"], "unique_id": "model.perekrestokvprok.dim_ret_crm", "raw_code": "WITH af_orders AS (\r\n    SELECT\r\n        REGEXP_EXTRACT(REGEXP_REPLACE(event_value,'\"',''), 'af_order_id:(.*?),') AS order_id\r\n    FROM  {{ ref('stg_af_client_data') }}\r\n    WHERE event_name = \"af_purchase\"\r\n),\r\n\r\nclient_data AS (\r\n    SELECT\r\n        order_date,\r\n        promo_name,\r\n        promo_code,\r\n        order_id,\r\n        platform,\r\n        revenue,\r\n        order_count\r\n    FROM {{ ref('stg_promocode_client_data') }}\r\n),\r\n\r\npromo_data AS (\r\n    SELECT\r\n        date_start,\r\n        date_end,\r\n        promocode,\r\n        type,\r\n        channel\r\n    FROM {{ ref('stg_promo_sheets') }}\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        order_date AS date,\r\n        promo_name AS campaign_name,\r\n        platform,\r\n        CASE\r\n            WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name],'')), r'promo.*regular') THEN 'promo regular'\r\n            WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name],'')), r'promo.*global') THEN 'promo global'\r\n            WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name],'')), r'promo.*feed') THEN 'promo feed'\r\n        ELSE '-' END as promo_type,\r\n        0 AS re_engagement,\r\n        SUM(revenue) AS revenue,\r\n        SUM(order_count) AS purchase,\r\n        0 AS spend,\r\n        channel AS source,\r\n        'CRM' AS conversion_source_type\r\n    FROM client_data\r\n    LEFT JOIN promo_data\r\n    ON LOWER(client_data.promo_code) = LOWER(promo_data.promocode)\r\n    AND DATE(client_data.order_date) BETWEEN promo_data.date_start AND promo_data.date_end\r\n    WHERE type is not null\r\n    AND order_id NOT IN (\r\n        SELECT DISTINCT order_id\r\n        FROM af_orders\r\n    )\r\n    GROUP BY 1,2,3,4,9\r\n)\r\n\r\nSELECT\r\n    date,\r\n    campaign_name,\r\n    platform,\r\n    promo_type,\r\n    re_engagement,\r\n    revenue,\r\n    purchase,\r\n    spend,\r\n    source,\r\n    conversion_source_type\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "marts\\dim_ret_crm.sql", "original_file_path": "models\\marts\\dim_ret_crm.sql", "name": "dim_ret_crm", "alias": "dim_ret_crm", "checksum": {"name": "sha256", "checksum": "cca08ced060fe6ddaba00b6bb682551ae7ef552e0f2fb60e68585eb273751cc8"}, "tags": [], "refs": [["stg_af_client_data"], ["stg_promocode_client_data"], ["stg_promo_sheets"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\marts\\dim_ret_crm.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\marts\\dim_ret_crm.sql", "deferred": false, "unrendered_config": {}, "created_at": 1676546308.8335767, "compiled_code": "WITH af_orders AS (\n    SELECT\n        REGEXP_EXTRACT(REGEXP_REPLACE(event_value,'\"',''), 'af_order_id:(.*?),') AS order_id\n    FROM  `perekrestokvprok-bq`.`dbt_production`.`stg_af_client_data`\n    WHERE event_name = \"af_purchase\"\n),\n\nclient_data AS (\n    SELECT\n        order_date,\n        promo_name,\n        promo_code,\n        order_id,\n        platform,\n        revenue,\n        order_count\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_promocode_client_data`\n),\n\npromo_data AS (\n    SELECT\n        date_start,\n        date_end,\n        promocode,\n        type,\n        channel\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_promo_sheets`\n),\n\nfinal AS (\n    SELECT\n        order_date AS date,\n        promo_name AS campaign_name,\n        platform,\n        CASE\n            WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name],'')), r'promo.*regular') THEN 'promo regular'\n            WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name],'')), r'promo.*global') THEN 'promo global'\n            WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name],'')), r'promo.*feed') THEN 'promo feed'\n        ELSE '-' END as promo_type,\n        0 AS re_engagement,\n        SUM(revenue) AS revenue,\n        SUM(order_count) AS purchase,\n        0 AS spend,\n        channel AS source,\n        'CRM' AS conversion_source_type\n    FROM client_data\n    LEFT JOIN promo_data\n    ON LOWER(client_data.promo_code) = LOWER(promo_data.promocode)\n    AND DATE(client_data.order_date) BETWEEN promo_data.date_start AND promo_data.date_end\n    WHERE type is not null\n    AND order_id NOT IN (\n        SELECT DISTINCT order_id\n        FROM af_orders\n    )\n    GROUP BY 1,2,3,4,9\n)\n\nSELECT\n    date,\n    campaign_name,\n    platform,\n    promo_type,\n    re_engagement,\n    revenue,\n    purchase,\n    spend,\n    source,\n    conversion_source_type\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`dim_ret_crm`"}, "model.perekrestokvprok.dim_rtg_agg": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.promo_type", "macro.perekrestokvprok.aud", "macro.perekrestokvprok.platform", "macro.perekrestokvprok.partner", "macro.perekrestokvprok.geo"], "nodes": ["model.perekrestokvprok.stg_af_rtg_partners_by_date", "model.perekrestokvprok.stg_facebook_cab_sheets", "model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.int_yandex_cab_meta", "model.perekrestokvprok.int_vk_cab_meta", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.stg_tiktok_cab_meta", "model.perekrestokvprok.stg_asa_cab_sheets", "model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.stg_google_cab_sheets", "model.perekrestokvprok.stg_twitter_cab_sheets", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_partner_limits"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_rtg_agg"], "unique_id": "model.perekrestokvprok.dim_rtg_agg", "raw_code": "/* \r\n\u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043b\u0443\u0447\u0448\u0435 \u0437\u0430\u0433\u043b\u044f\u043d\u0443\u0442\u044c \u0441\u044e\u0434\u0430: https://github.com/realweb-msk/perekrestokvprok-dbt\r\n\u0438\u043b\u0438 \u0441\u044e\u0434\u0430: https://brave-hermann-395dc3.netlify.app/#!/model/model.perekrestokvprok.dim_rtg_agg\r\n*/\r\n\r\nWITH af_conversions AS (\r\n    SELECT\r\n        date,\r\n        media_source AS mediasource,\r\n        campaign_name,\r\n        report_type AS campaign_type,\r\n        platform,\r\n        {{ promo_type('campaign_name') }} as promo_type,\r\n        {{ aud('campaign_name') }} AS auditory,\r\n        purchase,\r\n        revenue,\r\n        conversions AS re_engagement,\r\n    FROM  {{ ref('stg_af_rtg_partners_by_date') }}\r\n),\r\n\r\n----------------------- facebook -------------------------\r\n\r\nfacebook_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\r\n        campaign_type,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('stg_facebook_cab_sheets') }}\r\n    --{{ ref('stg_facebook_cab_meta') }}\r\n    WHERE campaign_type = 'retargeting'\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nfacebook_convs AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        campaign_type,\r\n        auditory,\r\n        revenue,\r\n        purchase,\r\n        re_engagement\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_fb')\r\n),\r\n\r\nfacebook AS (\r\n    SELECT\r\n        COALESCE(facebook_convs.date, facebook_cost.date) AS date,\r\n        COALESCE(facebook_convs.campaign_name, facebook_cost.campaign_name) AS campaign_name,\r\n        COALESCE(facebook_convs.platform, facebook_cost.platform) AS platform,\r\n        COALESCE(facebook_convs.promo_type, facebook_cost.promo_type) AS promo_type,\r\n        COALESCE(facebook_convs.auditory, facebook_cost.auditory) AS auditory,\r\n        COALESCE(facebook_convs.campaign_type, facebook_cost.campaign_type) AS campaign_type,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(re_engagement,0) AS re_engagement,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(spend,0) AS spend,\r\n        'Facebook' AS source,\r\n    FROM facebook_convs\r\n    FULL OUTER JOIN facebook_cost\r\n    ON facebook_convs.date = facebook_cost.date \r\n    AND facebook_convs.campaign_name = facebook_cost.campaign_name\r\n    AND facebook_convs.promo_type = facebook_cost.promo_type\r\n    AND facebook_convs.auditory = facebook_cost.auditory\r\n    WHERE \r\n        COALESCE(re_engagement,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(facebook_convs.campaign_name, facebook_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- yandex -------------------------\r\n\r\nyandex_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\r\n        campaign_type,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('int_yandex_cab_meta') }}\r\n    WHERE campaign_type = 'retargeting'\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nyandex_convs AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        campaign_type,\r\n        auditory,\r\n        revenue,\r\n        purchase,\r\n        re_engagement\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_ya')\r\n),\r\n\r\nyandex AS (\r\n    SELECT\r\n        COALESCE(yandex_convs.date, yandex_cost.date) AS date,\r\n        COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) AS campaign_name,\r\n        COALESCE(yandex_convs.platform, yandex_cost.platform) AS platform,\r\n        COALESCE(yandex_convs.promo_type, yandex_cost.promo_type) AS promo_type,\r\n        COALESCE(yandex_convs.auditory, yandex_cost.auditory) AS auditory,\r\n        COALESCE(yandex_convs.campaign_type, yandex_cost.campaign_type) AS campaign_type,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(re_engagement,0) AS re_engagement,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(spend,0) AS spend,\r\n        '\u042f\u043d\u0434\u0435\u043a\u0441.\u0414\u0438\u0440\u0435\u043a\u0442' AS source,\r\n    FROM yandex_convs\r\n    FULL OUTER JOIN yandex_cost\r\n    ON yandex_convs.date = yandex_cost.date \r\n    AND yandex_convs.campaign_name = yandex_cost.campaign_name\r\n    AND yandex_convs.promo_type = yandex_cost.promo_type\r\n    AND yandex_convs.auditory = yandex_cost.auditory\r\n    WHERE \r\n        COALESCE(re_engagement,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- vk -------------------------\r\n\r\nvk_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\r\n        campaign_type,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('int_vk_cab_meta') }}\r\n    WHERE campaign_type = 'retargeting'\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nvk_convs AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        campaign_type,\r\n        auditory,\r\n        revenue,\r\n        purchase,\r\n        re_engagement\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_vk')\r\n),\r\n\r\nvk AS (\r\n    SELECT\r\n        COALESCE(vk_convs.date, vk_cost.date) AS date,\r\n        COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) AS campaign_name,\r\n        COALESCE(vk_convs.platform, vk_cost.platform) AS platform,\r\n        COALESCE(vk_convs.promo_type, vk_cost.promo_type) AS promo_type,\r\n        COALESCE(vk_convs.auditory, vk_cost.auditory) AS auditory,\r\n        COALESCE(vk_convs.campaign_type, vk_cost.campaign_type) AS campaign_type,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(re_engagement,0) AS re_engagement,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(spend,0) AS spend,\r\n        '\u0412\u041a' AS source,\r\n    FROM vk_convs\r\n    FULL OUTER JOIN vk_cost\r\n    ON vk_convs.date = vk_cost.date \r\n    AND vk_convs.campaign_name = vk_cost.campaign_name\r\n    AND vk_convs.promo_type = vk_cost.promo_type\r\n    AND vk_convs.auditory = vk_cost.auditory\r\n    WHERE \r\n        COALESCE(re_engagement,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- mytarget -------------------------\r\n\r\nmt_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\r\n        campaign_type,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('int_mytarget_cab_meta') }}\r\n    WHERE campaign_type = 'retargeting'\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nmt_convs AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        campaign_type,\r\n        auditory,\r\n        revenue,\r\n        purchase,\r\n        re_engagement\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_mt')\r\n),\r\n\r\nmt AS (\r\n    SELECT\r\n        COALESCE(mt_convs.date, mt_cost.date) AS date,\r\n        COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) AS campaign_name,\r\n        COALESCE(mt_convs.platform, mt_cost.platform) AS platform,\r\n        COALESCE(mt_convs.promo_type, mt_cost.promo_type) AS promo_type,\r\n        COALESCE(mt_convs.auditory, mt_cost.auditory) AS auditory,\r\n        COALESCE(mt_convs.campaign_type, mt_cost.campaign_type) AS campaign_type,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(re_engagement,0) AS re_engagement,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(spend,0) AS spend,\r\n        'MyTarget' AS source,\r\n    FROM mt_convs\r\n    FULL OUTER JOIN mt_cost\r\n    ON mt_convs.date = mt_cost.date \r\n    AND mt_convs.campaign_name = mt_cost.campaign_name\r\n    AND mt_convs.promo_type = mt_cost.promo_type\r\n    AND mt_convs.auditory = mt_cost.auditory\r\n    WHERE \r\n        COALESCE(re_engagement,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- tiktok -------------------------\r\n\r\ntiktok_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\r\n        campaign_type,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('stg_tiktok_cab_meta') }}\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    AND campaign_type = 'retargeting'\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\ntiktok_convs AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        campaign_type,\r\n        auditory,\r\n        revenue,\r\n        purchase,\r\n        re_engagement\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_tiktok')\r\n),\r\n\r\ntiktok AS (\r\n    SELECT\r\n        COALESCE(tiktok_convs.date, tiktok_cost.date) AS date,\r\n        COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) AS campaign_name,\r\n        COALESCE(tiktok_convs.platform, tiktok_cost.platform) AS platform,\r\n        COALESCE(tiktok_convs.promo_type, tiktok_cost.promo_type) AS promo_type,\r\n        COALESCE(tiktok_convs.auditory, tiktok_cost.auditory) AS auditory,\r\n        COALESCE(tiktok_convs.campaign_type, tiktok_cost.campaign_type) AS campaign_type,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(re_engagement,0) AS re_engagement,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(spend,0) AS spend,\r\n        'TikTok' AS source,\r\n    FROM tiktok_convs\r\n    FULL OUTER JOIN tiktok_cost\r\n    ON tiktok_convs.date = tiktok_cost.date \r\n    AND tiktok_convs.campaign_name = tiktok_cost.campaign_name\r\n    AND tiktok_convs.promo_type = tiktok_cost.promo_type\r\n    AND tiktok_convs.auditory = tiktok_cost.auditory\r\n    WHERE \r\n        COALESCE(re_engagement,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- apple search ads -------------------------\r\n\r\nasa_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        'ios' as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\r\n        campaign_type,\r\n        SUM(meta.impressions) AS impressions,\r\n        SUM(sheet.clicks) AS clicks,\r\n        SUM(sheet.spend) AS spend\r\n    FROM {{ ref('stg_asa_cab_sheets') }} sheet\r\n    LEFT JOIN {{ ref('int_asa_cab_meta') }} meta\r\n    USING(date, campaign_name, campaign_type, adset_name)\r\n    WHERE campaign_type = 'retargeting'\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nasa_convs AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        campaign_type,\r\n        auditory,\r\n        revenue,\r\n        purchase,\r\n        re_engagement\r\n    FROM af_conversions\r\n    WHERE \r\n    --REGEXP_CONTAINS(campaign_name, r'\\(r\\)') AND\r\n    (\r\n        REGEXP_CONTAINS(campaign_name, r'\\(exact\\)|\u0437\u043e\u043e') OR\r\n        mediasource = 'Apple Search Ads'\r\n    )\r\n),\r\n\r\nasa AS (\r\n    SELECT\r\n        COALESCE(asa_convs.date, asa_cost.date) AS date,\r\n        COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) AS campaign_name,\r\n        COALESCE(asa_convs.platform, asa_cost.platform) AS platform,\r\n        COALESCE(asa_convs.promo_type, asa_cost.promo_type) AS promo_type,\r\n        COALESCE(asa_convs.auditory, asa_cost.auditory) AS auditory,\r\n        COALESCE(asa_convs.campaign_type, asa_cost.campaign_type) AS campaign_type,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(re_engagement,0) AS re_engagement,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(spend,0) AS spend,\r\n        'Apple Search Ads' AS source,\r\n    FROM asa_convs\r\n    FULL OUTER JOIN asa_cost\r\n    ON asa_convs.date = asa_cost.date \r\n    AND asa_convs.campaign_name = asa_cost.campaign_name\r\n    AND asa_convs.promo_type = asa_cost.promo_type\r\n    AND asa_convs.auditory = asa_cost.auditory\r\n    WHERE \r\n        COALESCE(re_engagement,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- google -------------------------\r\n\r\ngoogle_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ aud('campaign_name', 'adset_name') }} AS auditory,\r\n        campaign_type,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('stg_google_cab_sheets') }}\r\n    WHERE (campaign_type = 'retargeting'\r\n    OR campaign_name IN (\r\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\r\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]'\r\n            ))\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\ngoogle_convs AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        campaign_type,\r\n        auditory,\r\n        revenue,\r\n        purchase,\r\n        re_engagement\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_uac')\r\n),\r\n\r\ngoogle AS (\r\n    SELECT\r\n        COALESCE(google_convs.date, google_cost.date) AS date,\r\n        COALESCE(google_convs.campaign_name, google_cost.campaign_name) AS campaign_name,\r\n        COALESCE(google_convs.platform, google_cost.platform) AS platform,\r\n        COALESCE(google_convs.promo_type, google_cost.promo_type) AS promo_type,\r\n        COALESCE(google_convs.auditory, google_cost.auditory) AS auditory,\r\n        COALESCE(google_convs.campaign_type, google_cost.campaign_type) AS campaign_type,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(re_engagement,0) AS re_engagement,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(spend,0) AS spend,\r\n        'Google Ads' AS source,\r\n    FROM google_convs\r\n    FULL OUTER JOIN google_cost\r\n    ON google_convs.date = google_cost.date \r\n    AND google_convs.campaign_name = google_cost.campaign_name\r\n    AND google_convs.promo_type = google_cost.promo_type\r\n    AND google_convs.auditory = google_cost.auditory\r\n    WHERE \r\n        COALESCE(re_engagement,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(google_convs.campaign_name, google_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- Twitter -------------------------\r\n\r\ntw_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name') }} as promo_type,\r\n        {{ aud('campaign_name') }} AS auditory,\r\n        campaign_type,\r\n        SUM(impressions) AS impressions,\r\n        0 AS clicks,\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('stg_twitter_cab_sheets') }}\r\n    WHERE campaign_type = 'retargeting'\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_tw')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\ntw_convs AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        campaign_type,\r\n        auditory,\r\n        revenue,\r\n        purchase,\r\n        re_engagement\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_tw')\r\n),\r\n\r\ntw AS (\r\n    SELECT\r\n        COALESCE(tw_convs.date, tw_cost.date) AS date,\r\n        COALESCE(tw_convs.campaign_name, tw_cost.campaign_name) AS campaign_name,\r\n        COALESCE(tw_convs.platform, tw_cost.platform) AS platform,\r\n        COALESCE(tw_convs.promo_type, tw_cost.promo_type) AS promo_type,\r\n        COALESCE(tw_convs.auditory, tw_cost.auditory) AS auditory,\r\n        COALESCE(tw_convs.campaign_type, tw_cost.campaign_type) AS campaign_type,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(re_engagement,0) AS re_engagement,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(spend,0) AS spend,\r\n        'Twitter' AS source,\r\n    FROM tw_convs\r\n    FULL OUTER JOIN tw_cost\r\n    ON tw_convs.date = tw_cost.date \r\n    AND tw_convs.campaign_name = tw_cost.campaign_name\r\n    AND tw_convs.promo_type = tw_cost.promo_type\r\n    AND tw_convs.auditory = tw_cost.auditory\r\n    WHERE \r\n        COALESCE(re_engagement,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(tw_convs.campaign_name, tw_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------inapp----------------------------\r\n\r\nrate AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        platform,\r\n        rate_for_us\r\nFROM {{ ref('stg_rate_info') }}\r\nWHERE type = 'RTG'\r\n),\r\n\r\nlimits_table AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        limits\r\n    FROM {{ ref('stg_partner_limits') }}\r\n    WHERE type = 'RTG'\r\n),\r\n\r\ninapp_convs_without_cumulation AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        {{ partner('campaign_name') }} AS partner,\r\n        promo_type,\r\n        campaign_type,\r\n        auditory,\r\n        revenue,\r\n        purchase,\r\n        re_engagement\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_inapp')\r\n),\r\n\r\ninapp_convs_with_cumulation AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        partner,\r\n        platform,\r\n        promo_type,\r\n        campaign_type,\r\n        auditory,\r\n        revenue,\r\n        purchase,\r\n        re_engagement,\r\n        SUM(purchase) \r\n            OVER(PARTITION BY DATE_TRUNC(date, MONTH) ORDER BY date, revenue)\r\n            AS cum_event_count,\r\n        SUM(purchase) \r\n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, revenue)\r\n            AS cum_event_count_by_prt\r\n    FROM inapp_convs_without_cumulation\r\n),\r\n\r\ninapp_convs AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        inapp_convs_with_cumulation.partner,\r\n        platform,\r\n        promo_type,\r\n        auditory,\r\n        campaign_type,\r\n        re_engagement,\r\n        cum_event_count,\r\n        cum_event_count_by_prt,\r\n        limits,\r\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), purchase, 0) AS purchase,\r\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), revenue, 0) AS revenue,\r\n    FROM inapp_convs_with_cumulation\r\n    LEFT JOIN limits_table\r\n    ON inapp_convs_with_cumulation.partner = limits_table.partner \r\n    AND inapp_convs_with_cumulation.date BETWEEN limits_table.start_date AND limits_table.end_date\r\n),\r\n\r\ninapp AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        inapp_convs.platform AS platform,\r\n        promo_type,\r\n        auditory,\r\n        campaign_type,\r\n        0 AS impressions,\r\n        0 AS clicks,\r\n        SUM(COALESCE(re_engagement,0)) AS re_engagement,\r\n        SUM(COALESCE(revenue,0)) AS revenue,\r\n        SUM(COALESCE(purchase,0)) AS purchase,\r\n        SUM(\r\n            CASE\r\n                WHEN date BETWEEN '2021-10-01' AND '2021-10-31'\r\n                    AND cum_event_count >= 3000 THEN purchase * 140\r\n                WHEN date BETWEEN '2021-10-01' AND '2021-10-31'\r\n                    AND cum_event_count < 3000 THEN purchase * rate_for_us\r\n                WHEN date NOT BETWEEN '2021-10-01' AND '2021-10-31'\r\n                    AND cum_event_count_by_prt <= COALESCE(limits, 1000000)\r\n                    THEN purchase * rate_for_us\r\n                ELSE 0 END\r\n            ) AS spend,\r\n        'inapp' AS source,\r\n    FROM inapp_convs\r\n    LEFT JOIN rate\r\n    ON inapp_convs.partner = rate.partner \r\n    AND inapp_convs.date BETWEEN rate.start_date AND rate.end_date\r\n    AND inapp_convs.platform = rate.platform \r\n    WHERE \r\n        COALESCE(re_engagement,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) > 0\r\n    AND campaign_name != 'None'\r\n    GROUP BY 1,2,3,4,5,6,7,8\r\n),\r\n\r\n----------------------final----------------------------\r\n\r\nunions AS (\r\n    SELECT * FROM yandex\r\n    UNION ALL \r\n    SELECT * FROM vk\r\n    UNION ALL \r\n    SELECT * FROM mt\r\n    UNION ALL  \r\n    SELECT * FROM tiktok\r\n    UNION ALL\r\n    SELECT * FROM asa\r\n    WHERE date <= '2022-08-31'\r\n    UNION ALL\r\n    SELECT * FROM facebook\r\n    UNION ALL\r\n    SELECT * FROM google\r\n    UNION ALL\r\n    SELECT * FROM tw\r\n    UNION ALL\r\n    SELECT * FROM inapp\r\n),\r\n\r\nfinal AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        auditory,\r\n        impressions,\r\n        clicks,\r\n        re_engagement,\r\n        revenue,\r\n        purchase,\r\n        spend,\r\n        source,\r\n        {{ geo('campaign_name') }} AS geo\r\n    FROM unions\r\n)\r\n\r\nSELECT \r\n    date,\r\n    campaign_name,\r\n    platform,\r\n    promo_type,\r\n    auditory,\r\n    impressions,\r\n    clicks,\r\n    re_engagement,\r\n    revenue,\r\n    purchase,\r\n    spend,\r\n    source,\r\n    geo\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "marts\\dim_rtg_agg.sql", "original_file_path": "models\\marts\\dim_rtg_agg.sql", "name": "dim_rtg_agg", "alias": "dim_rtg_agg", "checksum": {"name": "sha256", "checksum": "c631da2e7ce64c318f32073ff16665eeeaa8cd058220904ee28f9369b525174b"}, "tags": [], "refs": [["stg_af_rtg_partners_by_date"], ["stg_facebook_cab_sheets"], ["stg_facebook_cab_meta"], ["int_yandex_cab_meta"], ["int_vk_cab_meta"], ["int_mytarget_cab_meta"], ["stg_tiktok_cab_meta"], ["stg_asa_cab_sheets"], ["int_asa_cab_meta"], ["stg_google_cab_sheets"], ["stg_twitter_cab_sheets"], ["stg_rate_info"], ["stg_partner_limits"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\marts\\dim_rtg_agg.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\marts\\dim_rtg_agg.sql", "deferred": false, "unrendered_config": {}, "created_at": 1676546308.83959, "compiled_code": "/* \n\u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043b\u0443\u0447\u0448\u0435 \u0437\u0430\u0433\u043b\u044f\u043d\u0443\u0442\u044c \u0441\u044e\u0434\u0430: https://github.com/realweb-msk/perekrestokvprok-dbt\n\u0438\u043b\u0438 \u0441\u044e\u0434\u0430: https://brave-hermann-395dc3.netlify.app/#!/model/model.perekrestokvprok.dim_rtg_agg\n*/\n\nWITH af_conversions AS (\n    SELECT\n        date,\n        media_source AS mediasource,\n        campaign_name,\n        report_type AS campaign_type,\n        platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        purchase,\n        revenue,\n        conversions AS re_engagement,\n    FROM  `perekrestokvprok-bq`.`dbt_production`.`stg_af_rtg_partners_by_date`\n),\n\n----------------------- facebook -------------------------\n\nfacebook_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_facebook_cab_sheets`\n    --`perekrestokvprok-bq`.`dbt_production`.`stg_facebook_cab_meta`\n    WHERE campaign_type = 'retargeting'\n    GROUP BY 1,2,3,4,5,6\n),\n\nfacebook_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_fb')\n),\n\nfacebook AS (\n    SELECT\n        COALESCE(facebook_convs.date, facebook_cost.date) AS date,\n        COALESCE(facebook_convs.campaign_name, facebook_cost.campaign_name) AS campaign_name,\n        COALESCE(facebook_convs.platform, facebook_cost.platform) AS platform,\n        COALESCE(facebook_convs.promo_type, facebook_cost.promo_type) AS promo_type,\n        COALESCE(facebook_convs.auditory, facebook_cost.auditory) AS auditory,\n        COALESCE(facebook_convs.campaign_type, facebook_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        'Facebook' AS source,\n    FROM facebook_convs\n    FULL OUTER JOIN facebook_cost\n    ON facebook_convs.date = facebook_cost.date \n    AND facebook_convs.campaign_name = facebook_cost.campaign_name\n    AND facebook_convs.promo_type = facebook_cost.promo_type\n    AND facebook_convs.auditory = facebook_cost.auditory\n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(spend,0) > 0\n    AND COALESCE(facebook_convs.campaign_name, facebook_cost.campaign_name) != 'None'\n),\n\n----------------------- yandex -------------------------\n\nyandex_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`int_yandex_cab_meta`\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nyandex_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_ya')\n),\n\nyandex AS (\n    SELECT\n        COALESCE(yandex_convs.date, yandex_cost.date) AS date,\n        COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) AS campaign_name,\n        COALESCE(yandex_convs.platform, yandex_cost.platform) AS platform,\n        COALESCE(yandex_convs.promo_type, yandex_cost.promo_type) AS promo_type,\n        COALESCE(yandex_convs.auditory, yandex_cost.auditory) AS auditory,\n        COALESCE(yandex_convs.campaign_type, yandex_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        '\u042f\u043d\u0434\u0435\u043a\u0441.\u0414\u0438\u0440\u0435\u043a\u0442' AS source,\n    FROM yandex_convs\n    FULL OUTER JOIN yandex_cost\n    ON yandex_convs.date = yandex_cost.date \n    AND yandex_convs.campaign_name = yandex_cost.campaign_name\n    AND yandex_convs.promo_type = yandex_cost.promo_type\n    AND yandex_convs.auditory = yandex_cost.auditory\n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(spend,0) > 0\n    AND COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) != 'None'\n),\n\n----------------------- vk -------------------------\n\nvk_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`int_vk_cab_meta`\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nvk_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_vk')\n),\n\nvk AS (\n    SELECT\n        COALESCE(vk_convs.date, vk_cost.date) AS date,\n        COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) AS campaign_name,\n        COALESCE(vk_convs.platform, vk_cost.platform) AS platform,\n        COALESCE(vk_convs.promo_type, vk_cost.promo_type) AS promo_type,\n        COALESCE(vk_convs.auditory, vk_cost.auditory) AS auditory,\n        COALESCE(vk_convs.campaign_type, vk_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        '\u0412\u041a' AS source,\n    FROM vk_convs\n    FULL OUTER JOIN vk_cost\n    ON vk_convs.date = vk_cost.date \n    AND vk_convs.campaign_name = vk_cost.campaign_name\n    AND vk_convs.promo_type = vk_cost.promo_type\n    AND vk_convs.auditory = vk_cost.auditory\n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(spend,0) > 0\n    AND COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) != 'None'\n),\n\n----------------------- mytarget -------------------------\n\nmt_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`int_mytarget_cab_meta`\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nmt_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_mt')\n),\n\nmt AS (\n    SELECT\n        COALESCE(mt_convs.date, mt_cost.date) AS date,\n        COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) AS campaign_name,\n        COALESCE(mt_convs.platform, mt_cost.platform) AS platform,\n        COALESCE(mt_convs.promo_type, mt_cost.promo_type) AS promo_type,\n        COALESCE(mt_convs.auditory, mt_cost.auditory) AS auditory,\n        COALESCE(mt_convs.campaign_type, mt_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        'MyTarget' AS source,\n    FROM mt_convs\n    FULL OUTER JOIN mt_cost\n    ON mt_convs.date = mt_cost.date \n    AND mt_convs.campaign_name = mt_cost.campaign_name\n    AND mt_convs.promo_type = mt_cost.promo_type\n    AND mt_convs.auditory = mt_cost.auditory\n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(spend,0) > 0\n    AND COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) != 'None'\n),\n\n----------------------- tiktok -------------------------\n\ntiktok_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_tiktok_cab_meta`\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb')\n    AND campaign_type = 'retargeting'\n    GROUP BY 1,2,3,4,5,6\n),\n\ntiktok_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_tiktok')\n),\n\ntiktok AS (\n    SELECT\n        COALESCE(tiktok_convs.date, tiktok_cost.date) AS date,\n        COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) AS campaign_name,\n        COALESCE(tiktok_convs.platform, tiktok_cost.platform) AS platform,\n        COALESCE(tiktok_convs.promo_type, tiktok_cost.promo_type) AS promo_type,\n        COALESCE(tiktok_convs.auditory, tiktok_cost.auditory) AS auditory,\n        COALESCE(tiktok_convs.campaign_type, tiktok_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        'TikTok' AS source,\n    FROM tiktok_convs\n    FULL OUTER JOIN tiktok_cost\n    ON tiktok_convs.date = tiktok_cost.date \n    AND tiktok_convs.campaign_name = tiktok_cost.campaign_name\n    AND tiktok_convs.promo_type = tiktok_cost.promo_type\n    AND tiktok_convs.auditory = tiktok_cost.auditory\n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(spend,0) > 0\n    AND COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) != 'None'\n),\n\n----------------------- apple search ads -------------------------\n\nasa_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        'ios' as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        campaign_type,\n        SUM(meta.impressions) AS impressions,\n        SUM(sheet.clicks) AS clicks,\n        SUM(sheet.spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_asa_cab_sheets` sheet\n    LEFT JOIN `perekrestokvprok-bq`.`dbt_production`.`int_asa_cab_meta` meta\n    USING(date, campaign_name, campaign_type, adset_name)\n    WHERE campaign_type = 'retargeting'\n    GROUP BY 1,2,3,4,5,6\n),\n\nasa_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE \n    --REGEXP_CONTAINS(campaign_name, r'\\(r\\)') AND\n    (\n        REGEXP_CONTAINS(campaign_name, r'\\(exact\\)|\u0437\u043e\u043e') OR\n        mediasource = 'Apple Search Ads'\n    )\n),\n\nasa AS (\n    SELECT\n        COALESCE(asa_convs.date, asa_cost.date) AS date,\n        COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) AS campaign_name,\n        COALESCE(asa_convs.platform, asa_cost.platform) AS platform,\n        COALESCE(asa_convs.promo_type, asa_cost.promo_type) AS promo_type,\n        COALESCE(asa_convs.auditory, asa_cost.auditory) AS auditory,\n        COALESCE(asa_convs.campaign_type, asa_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        'Apple Search Ads' AS source,\n    FROM asa_convs\n    FULL OUTER JOIN asa_cost\n    ON asa_convs.date = asa_cost.date \n    AND asa_convs.campaign_name = asa_cost.campaign_name\n    AND asa_convs.promo_type = asa_cost.promo_type\n    AND asa_convs.auditory = asa_cost.auditory\n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(spend,0) > 0\n    AND COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) != 'None'\n),\n\n----------------------- google -------------------------\n\ngoogle_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_google_cab_sheets`\n    WHERE (campaign_type = 'retargeting'\n    OR campaign_name IN (\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]'\n            ))\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\ngoogle_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_uac')\n),\n\ngoogle AS (\n    SELECT\n        COALESCE(google_convs.date, google_cost.date) AS date,\n        COALESCE(google_convs.campaign_name, google_cost.campaign_name) AS campaign_name,\n        COALESCE(google_convs.platform, google_cost.platform) AS platform,\n        COALESCE(google_convs.promo_type, google_cost.promo_type) AS promo_type,\n        COALESCE(google_convs.auditory, google_cost.auditory) AS auditory,\n        COALESCE(google_convs.campaign_type, google_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        'Google Ads' AS source,\n    FROM google_convs\n    FULL OUTER JOIN google_cost\n    ON google_convs.date = google_cost.date \n    AND google_convs.campaign_name = google_cost.campaign_name\n    AND google_convs.promo_type = google_cost.promo_type\n    AND google_convs.auditory = google_cost.auditory\n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(spend,0) > 0\n    AND COALESCE(google_convs.campaign_name, google_cost.campaign_name) != 'None'\n),\n\n----------------------- Twitter -------------------------\n\ntw_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'minusfrequency2')\n        THEN 'All buyers minus frequency 2'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'aud.cart')\n        THEN 'Add to cart not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'core_promo_5')\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'reg_not_buy')\n        THEN 'Registered but not buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purchase15_22')\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purchase23_73')\n        THEN '\u041e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purchase74_130')\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purchase_aft130')\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'notused_30d')\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purch_less_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'purch_from_2')\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'deep_outflow_rtg')\n        THEN 'Deep_outflow_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'cpo_outflow_rtg')\n        THEN 'outflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'cpo_preflow_rtg')\n        THEN 'preflow'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'cpo_installed_the_app_but_not_buy_')\n        THEN 'Installed_the_app_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'first_open_.ot_buy_rtg')\n        THEN 'First_open_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'installed_the_app_but_not_buy_rtg')\n        THEN 'Installed_the_app_but_not_buy_rtg'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'registered_but_not_buy')\n        THEN 'Registered_but_not_buy'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), 'firebase')\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), 'inapp')\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\n AS auditory,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        0 AS clicks,\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_twitter_cab_sheets`\n    WHERE campaign_type = 'retargeting'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_tw')\n    GROUP BY 1,2,3,4,5,6\n),\n\ntw_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_tw')\n),\n\ntw AS (\n    SELECT\n        COALESCE(tw_convs.date, tw_cost.date) AS date,\n        COALESCE(tw_convs.campaign_name, tw_cost.campaign_name) AS campaign_name,\n        COALESCE(tw_convs.platform, tw_cost.platform) AS platform,\n        COALESCE(tw_convs.promo_type, tw_cost.promo_type) AS promo_type,\n        COALESCE(tw_convs.auditory, tw_cost.auditory) AS auditory,\n        COALESCE(tw_convs.campaign_type, tw_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(re_engagement,0) AS re_engagement,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(spend,0) AS spend,\n        'Twitter' AS source,\n    FROM tw_convs\n    FULL OUTER JOIN tw_cost\n    ON tw_convs.date = tw_cost.date \n    AND tw_convs.campaign_name = tw_cost.campaign_name\n    AND tw_convs.promo_type = tw_cost.promo_type\n    AND tw_convs.auditory = tw_cost.auditory\n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(spend,0) > 0\n    AND COALESCE(tw_convs.campaign_name, tw_cost.campaign_name) != 'None'\n),\n\n----------------------inapp----------------------------\n\nrate AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        platform,\n        rate_for_us\nFROM `perekrestokvprok-bq`.`dbt_production`.`stg_rate_info`\nWHERE type = 'RTG'\n),\n\nlimits_table AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        limits\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_partner_limits`\n    WHERE type = 'RTG'\n),\n\ninapp_convs_without_cumulation AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        \n    CASE \n        WHEN REGEXP_CONTAINS(campaign_name, r'_ms_') THEN 'Mobisharks'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tl_') THEN '2leads'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_mx_') THEN 'MobX'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_sw_') THEN 'SW'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tm_') THEN 'Think Mobile'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_abc[_\\s]|_sf_') THEN 'Mediasurfer'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_a999') THEN 'In-house'\n    ELSE '-' END\n AS partner,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_inapp')\n),\n\ninapp_convs_with_cumulation AS (\n    SELECT\n        date,\n        campaign_name,\n        partner,\n        platform,\n        promo_type,\n        campaign_type,\n        auditory,\n        revenue,\n        purchase,\n        re_engagement,\n        SUM(purchase) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH) ORDER BY date, revenue)\n            AS cum_event_count,\n        SUM(purchase) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, revenue)\n            AS cum_event_count_by_prt\n    FROM inapp_convs_without_cumulation\n),\n\ninapp_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        inapp_convs_with_cumulation.partner,\n        platform,\n        promo_type,\n        auditory,\n        campaign_type,\n        re_engagement,\n        cum_event_count,\n        cum_event_count_by_prt,\n        limits,\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), purchase, 0) AS purchase,\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), revenue, 0) AS revenue,\n    FROM inapp_convs_with_cumulation\n    LEFT JOIN limits_table\n    ON inapp_convs_with_cumulation.partner = limits_table.partner \n    AND inapp_convs_with_cumulation.date BETWEEN limits_table.start_date AND limits_table.end_date\n),\n\ninapp AS (\n    SELECT\n        date,\n        campaign_name,\n        inapp_convs.platform AS platform,\n        promo_type,\n        auditory,\n        campaign_type,\n        0 AS impressions,\n        0 AS clicks,\n        SUM(COALESCE(re_engagement,0)) AS re_engagement,\n        SUM(COALESCE(revenue,0)) AS revenue,\n        SUM(COALESCE(purchase,0)) AS purchase,\n        SUM(\n            CASE\n                WHEN date BETWEEN '2021-10-01' AND '2021-10-31'\n                    AND cum_event_count >= 3000 THEN purchase * 140\n                WHEN date BETWEEN '2021-10-01' AND '2021-10-31'\n                    AND cum_event_count < 3000 THEN purchase * rate_for_us\n                WHEN date NOT BETWEEN '2021-10-01' AND '2021-10-31'\n                    AND cum_event_count_by_prt <= COALESCE(limits, 1000000)\n                    THEN purchase * rate_for_us\n                ELSE 0 END\n            ) AS spend,\n        'inapp' AS source,\n    FROM inapp_convs\n    LEFT JOIN rate\n    ON inapp_convs.partner = rate.partner \n    AND inapp_convs.date BETWEEN rate.start_date AND rate.end_date\n    AND inapp_convs.platform = rate.platform \n    WHERE \n        COALESCE(re_engagement,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) > 0\n    AND campaign_name != 'None'\n    GROUP BY 1,2,3,4,5,6,7,8\n),\n\n----------------------final----------------------------\n\nunions AS (\n    SELECT * FROM yandex\n    UNION ALL \n    SELECT * FROM vk\n    UNION ALL \n    SELECT * FROM mt\n    UNION ALL  \n    SELECT * FROM tiktok\n    UNION ALL\n    SELECT * FROM asa\n    WHERE date <= '2022-08-31'\n    UNION ALL\n    SELECT * FROM facebook\n    UNION ALL\n    SELECT * FROM google\n    UNION ALL\n    SELECT * FROM tw\n    UNION ALL\n    SELECT * FROM inapp\n),\n\nfinal AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        auditory,\n        impressions,\n        clicks,\n        re_engagement,\n        revenue,\n        purchase,\n        spend,\n        source,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo\n    FROM unions\n)\n\nSELECT \n    date,\n    campaign_name,\n    platform,\n    promo_type,\n    auditory,\n    impressions,\n    clicks,\n    re_engagement,\n    revenue,\n    purchase,\n    spend,\n    source,\n    geo\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`dim_rtg_agg`"}, "model.perekrestokvprok.dim_ua": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.promo_type", "macro.perekrestokvprok.geo", "macro.perekrestokvprok.promo_search", "macro.perekrestokvprok.platform", "macro.perekrestokvprok.partner", "macro.perekrestokvprok.conversion_source_type"], "nodes": ["source.perekrestokvprok.agg_data.vk_manual_cost", "source.perekrestokvprok.agg_data.vk_manual_data", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_facebook_cab_sheets", "model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.int_yandex_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_vk_beta_sheet", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_tiktok_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_asa_cab_sheets", "model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_google_cab_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_huawei_cab_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.int_vk_cab_meta", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_zen_data_sheets", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_partner_limits", "model.perekrestokvprok.stg_campaign_limits", "model.perekrestokvprok.stg_crm_orders", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_partner_limits", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_partner_limits", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_appnext_cost", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_crm_orders_realwebcpa", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_partner_limits"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_ua"], "unique_id": "model.perekrestokvprok.dim_ua", "raw_code": "/* \r\n\u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043b\u0443\u0447\u0448\u0435 \u0437\u0430\u0433\u043b\u044f\u043d\u0443\u0442\u044c \u0441\u044e\u0434\u0430: https://github.com/realweb-msk/perekrestokvprok-dbt\r\n\u0438\u043b\u0438 \u0441\u044e\u0434\u0430: https://brave-hermann-395dc3.netlify.app/#!/model/model.perekrestokvprok.dim_ua\r\n*/\r\n\r\nWITH af_conversions AS (\r\n    SELECT\r\n        date,\r\n        is_retargeting,\r\n        af_cid,\r\n        --adset_name,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\r\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\r\n        mediasource,\r\n        platform,\r\n        event_name,\r\n        uniq_event_count,\r\n        event_revenue,\r\n        event_count,\r\n        CASE \r\n            WHEN REGEXP_CONTAINS(campaign_name, r'realwebcpa_inapp_2022_as_and_cpo_qsm') AND date > '2022-08-31' THEN 'deleted'\r\n            ELSE campaign_name \r\n        END campaign_name\r\n    FROM  {{ ref('stg_af_client_data') }}\r\n    -- WHERE is_retargeting = FALSE\r\n    -- AND REGEXP_CONTAINS(campaign_name, 'realweb')\r\n),\r\n\r\n----------------------- facebook -------------------------\r\n\r\nfacebook AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\r\n        campaign_type,\r\n        {{ promo_search('campaign_name', 'adset_name', 'ad_name') }} as promo_search,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(IF(campaign_type = 'UA', installs, 0)) AS installs,\r\n        SUM(revenue) AS revenue,\r\n        SUM(purchase) AS purchase,\r\n        SUM(purchase) AS uniq_purchase,\r\n        SUM(first_purchase_revenue) AS first_purchase_revenue,\r\n        SUM(first_purchase) AS first_purchase,\r\n        SUM(first_purchase) AS uniq_first_purchase,\r\n        0 as orders,\r\n        SUM(IF(campaign_type = 'UA', spend, 0)) AS spend,\r\n        'Facebook' AS source,\r\n        \"social\" as adv_type\r\n    FROM {{ ref('stg_facebook_cab_sheets') }}\r\n    --{{ ref('stg_facebook_cab_meta') }}\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\n----------------------- yandex -------------------------\r\n\r\nyandex_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\r\n        campaign_type,\r\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('int_yandex_cab_meta') }}\r\n    WHERE campaign_type = 'UA'\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\nyandex_convs_ua AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        'UA' as campaign_type,\r\n        promo_search,\r\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\r\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\r\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\r\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\r\n    FROM af_conversions\r\n    WHERE is_retargeting = FALSE\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_ya')\r\n    AND NOT REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\nyandex_convs_rtg AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        'retargeting' AS campaign_type,\r\n        promo_search,\r\n        -- \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u043f\u043e\u043a\u0443\u043f\u043a\u0430\u043c \u0432 \u0440\u0435\u0442 \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u044f\u0445 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432 \u0434\u0430\u0448\u0431\u043e\u0440\u0434\u0435 UA\r\n        SUM(IF(event_name = 'install', 0,0)) AS installs,\r\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\r\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\r\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\r\n    FROM af_conversions\r\n    WHERE is_retargeting = TRUE --? \r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_ya')\r\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\nyandex_convs AS (\r\n    SELECT * FROM yandex_convs_ua\r\n    UNION ALL \r\n    SELECT * FROM yandex_convs_rtg\r\n),\r\n\r\nyandex AS (\r\n    SELECT\r\n        COALESCE(yandex_convs.date, yandex_cost.date) AS date,\r\n        COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) AS campaign_name,\r\n        COALESCE(yandex_convs.platform, yandex_cost.platform) AS platform,\r\n        COALESCE(yandex_convs.promo_type, yandex_cost.promo_type) AS promo_type,\r\n        COALESCE(yandex_convs.geo, yandex_cost.geo) AS geo,\r\n        COALESCE(yandex_convs.campaign_type, yandex_cost.campaign_type) AS campaign_type,\r\n        COALESCE(yandex_convs.promo_search, yandex_cost.promo_search) AS promo_search,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        0 as orders,\r\n        COALESCE(spend,0) AS spend,\r\n        '\u042f\u043d\u0434\u0435\u043a\u0441.\u0414\u0438\u0440\u0435\u043a\u0442' AS source,\r\n        'context' AS adv_type\r\n    FROM yandex_convs\r\n    FULL OUTER JOIN yandex_cost\r\n    ON yandex_convs.date = yandex_cost.date \r\n    AND yandex_convs.campaign_name = yandex_cost.campaign_name\r\n    AND yandex_convs.promo_type = yandex_cost.promo_type\r\n    AND yandex_convs.geo = yandex_cost.geo\r\n    AND yandex_convs.promo_search = yandex_cost.promo_search\r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- VK \u0420\u0435\u043a\u043b\u0430\u043c\u0430 / MyTarget -------------------------\r\n\r\nmt_main_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\r\n        campaign_type,\r\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('int_mytarget_cab_meta') }}\r\n    WHERE campaign_type = 'UA'\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\nmt_beta_cost AS (\r\n    SELECT DISTINCT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name') }} as promo_type,\r\n        {{ geo('campaign_name') }} AS geo,\r\n        {{ promo_search('campaign_name') }} as promo_search,\r\n        campaign_type,\r\n        --SUM(impressions) AS impressions,\r\n        --SUM(clicks) AS clicks,\r\n        --SUM(spend) AS spend\r\n        0 impressions,\r\n        0 clicks,\r\n        cost AS spend\r\n    FROM {{ ref('stg_vk_beta_sheet') }}\r\n    WHERE campaign_type = 'UA'\r\n),\r\n\r\nmt_cost AS (\r\n    SELECT * FROM mt_main_cost\r\n    UNION ALL\r\n    SELECT * FROM mt_beta_cost\r\n),\r\n\r\nmt_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        'UA' as campaign_type,\r\n        promo_search,\r\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\r\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\r\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\r\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\r\n    FROM af_conversions\r\n    WHERE (is_retargeting = FALSE\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_mt')\r\n    AND REGEXP_CONTAINS(campaign_name, r'new')) OR (is_retargeting = FALSE AND REGEXP_CONTAINS(mediasource, r'mail.ru_int') \r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb'))\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\nmt AS (\r\n    SELECT\r\n        COALESCE(mt_convs.date, mt_cost.date) AS date,\r\n        COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) AS campaign_name,\r\n        COALESCE(mt_convs.platform, mt_cost.platform) AS platform,\r\n        COALESCE(mt_convs.promo_type, mt_cost.promo_type) AS promo_type,\r\n        COALESCE(mt_convs.geo, mt_cost.geo) AS geo,\r\n        COALESCE(mt_convs.campaign_type, mt_cost.campaign_type) AS campaign_type,\r\n        COALESCE(mt_convs.promo_search, mt_cost.promo_search) AS promo_search,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        0 as orders,\r\n        COALESCE(spend,0) AS spend,\r\n        'VK Ads' AS source,\r\n        'social' AS adv_type\r\n    FROM mt_convs\r\n    FULL OUTER JOIN mt_cost\r\n    ON mt_convs.date = mt_cost.date \r\n    AND mt_convs.campaign_name = mt_cost.campaign_name\r\n    AND mt_convs.promo_type = mt_cost.promo_type\r\n    AND mt_convs.geo = mt_cost.geo\r\n    AND mt_convs.promo_search = mt_cost.promo_search\r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- tiktok -------------------------\r\n\r\ntiktok_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\r\n        campaign_type,\r\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\r\n        -- \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u043f\u043e\u043a\u0443\u043f\u043a\u0430\u043c \u0432 \u0440\u0435\u0442 \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u044f\u0445 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432 \u0434\u0430\u0448\u0431\u043e\u0440\u0434\u0435 UA\r\n        SUM(IF(campaign_type = 'UA',impressions,0)) AS impressions,\r\n        SUM(IF(campaign_type = 'UA',clicks,0)) AS clicks,\r\n        SUM(IF(campaign_type = 'UA',spend,0)) AS spend,\r\n        SUM(purchase) AS purchase,\r\n        SUM(first_purchase) AS first_purchase,\r\n        SUM(SAFE_CAST(app_install AS INT64)) AS app_install\r\n    FROM {{ ref('stg_tiktok_cab_meta') }}\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\ntiktok_convs AS (\r\n    SELECT  \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        'UA' as campaign_type,\r\n        promo_search,\r\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\r\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\r\n        --SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\r\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        --SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\r\n    FROM af_conversions\r\n    WHERE is_retargeting = FALSE\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_tiktok')\r\n    AND NOT REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\ntiktok AS (\r\n    SELECT\r\n        COALESCE(tiktok_convs.date, tiktok_cost.date) AS date,\r\n        COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) AS campaign_name,\r\n        COALESCE(tiktok_convs.platform, tiktok_cost.platform) AS platform,\r\n        COALESCE(tiktok_convs.promo_type, tiktok_cost.promo_type) AS promo_type,\r\n        COALESCE(tiktok_convs.geo, tiktok_cost.geo) AS geo,\r\n        COALESCE(tiktok_convs.campaign_type, tiktok_cost.campaign_type) AS campaign_type,\r\n        COALESCE(tiktok_convs.promo_search, tiktok_cost.promo_search) AS promo_search,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(installs, app_install, 0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        0 as orders,\r\n        COALESCE(spend,0) AS spend,\r\n        'TikTok' AS source,\r\n        'social' AS adv_type\r\n    FROM tiktok_convs\r\n    FULL OUTER JOIN tiktok_cost\r\n    ON tiktok_convs.date = tiktok_cost.date \r\n    AND tiktok_convs.campaign_name = tiktok_cost.campaign_name\r\n    AND tiktok_convs.promo_type = tiktok_cost.promo_type\r\n    AND tiktok_convs.geo = tiktok_cost.geo\r\n    AND tiktok_convs.promo_search = tiktok_cost.promo_search\r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- apple search ads -------------------------\r\n\r\nasa_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        'ios' as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\r\n        campaign_type,\r\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\r\n        SUM(meta.impressions) AS impressions,\r\n        SUM(sheet.clicks) AS clicks,\r\n        SUM(sheet.spend) AS spend\r\n    FROM {{ ref('stg_asa_cab_sheets') }} sheet\r\n    --{{ ref('int_asa_cab_meta') }}\r\n    LEFT JOIN {{ ref('int_asa_cab_meta') }} meta\r\n    USING(date, campaign_name, campaign_type, adset_name)\r\n    WHERE campaign_type = 'UA'\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\nasa_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        'UA' as campaign_type,\r\n        promo_search,\r\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\r\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\r\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\r\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\r\n    FROM af_conversions\r\n    WHERE NOT REGEXP_CONTAINS(campaign_name, r'\\(r\\)')\r\n    AND (\r\n        REGEXP_CONTAINS(campaign_name, r'\\(exact\\)|\u0437\u043e\u043e') OR\r\n        mediasource = 'Apple Search Ads'\r\n    )\r\n    AND is_retargeting = FALSE\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\nasa AS (\r\n    SELECT\r\n        COALESCE(asa_convs.date, asa_cost.date) AS date,\r\n        COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) AS campaign_name,\r\n        COALESCE(asa_convs.platform, asa_cost.platform) AS platform,\r\n        COALESCE(asa_convs.promo_type, asa_cost.promo_type) AS promo_type,\r\n        COALESCE(asa_convs.geo, asa_cost.geo) AS geo,\r\n        COALESCE(asa_convs.campaign_type, asa_cost.campaign_type) AS campaign_type,\r\n        COALESCE(asa_convs.promo_search, asa_cost.promo_search) AS promo_search,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        0 as orders,\r\n        COALESCE(spend,0) AS spend,\r\n        'Apple Search Ads' AS source,\r\n        'context' AS adv_type\r\n    FROM asa_convs\r\n    FULL OUTER JOIN asa_cost\r\n    ON asa_convs.date = asa_cost.date \r\n    AND asa_convs.campaign_name = asa_cost.campaign_name\r\n    AND asa_convs.promo_type = asa_cost.promo_type\r\n    AND asa_convs.geo = asa_cost.geo\r\n    AND asa_convs.promo_search = asa_cost.promo_search\r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- google -------------------------\r\n\r\ngoogle_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\r\n        campaign_type,\r\n        {{ promo_search('campaign_name', 'adset_name') }} as promo_search,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spend) AS spend,\r\n        SUM(IF({{ platform('campaign_name') }} = 'ios', installs, NULL)) AS installs\r\n    FROM {{ ref('stg_google_cab_sheets') }}\r\n    WHERE campaign_type = 'UA'\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    AND campaign_name NOT IN (\r\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\r\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]')\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\ngoogle_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        'UA' as campaign_type,\r\n        promo_search,\r\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\r\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\r\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\r\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_uac_')\r\n    AND is_retargeting = FALSE\r\n    AND campaign_name NOT IN (\r\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\r\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]')\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\ngoogle AS (\r\n    SELECT\r\n        COALESCE(google_convs.date, google_cost.date) AS date,\r\n        COALESCE(google_convs.campaign_name, google_cost.campaign_name) AS campaign_name,\r\n        COALESCE(google_convs.platform, google_cost.platform) AS platform,\r\n        COALESCE(google_convs.promo_type, google_cost.promo_type) AS promo_type,\r\n        COALESCE(google_convs.geo, google_cost.geo) AS geo,\r\n        COALESCE(google_convs.campaign_type, google_cost.campaign_type) AS campaign_type,\r\n        COALESCE(google_convs.promo_search, google_cost.promo_search) AS promo_search,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(google_cost.installs,google_convs.installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        0 as orders,\r\n        COALESCE(spend,0) AS spend,\r\n        'Google Ads' AS source,\r\n        'context' AS adv_type\r\n    FROM google_convs\r\n    FULL OUTER JOIN google_cost\r\n    ON google_convs.date = google_cost.date \r\n    AND google_convs.campaign_name = google_cost.campaign_name\r\n    AND google_convs.promo_type = google_cost.promo_type\r\n    AND google_convs.geo = google_cost.geo\r\n    AND google_convs.promo_search = google_cost.promo_search\r\n    WHERE \r\n        COALESCE(google_cost.installs,google_convs.installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(google_convs.campaign_name, google_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- huawei -------------------------\r\n\r\nhuawei_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name') }} as promo_type,\r\n        {{ geo('campaign_name') }} AS geo,\r\n        {{ promo_search('campaign_name') }} as promo_search,\r\n        campaign_type,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('stg_huawei_cab_sheets') }}\r\n    WHERE campaign_type = 'UA'\r\n    AND status != \"Deleted\"\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\nhuawei_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        'UA' as campaign_type,\r\n        promo_search,\r\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\r\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\r\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\r\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\r\n    FROM af_conversions\r\n    WHERE is_retargeting = FALSE\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_hw')\r\n    AND REGEXP_CONTAINS(campaign_name, r'new')\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\nhuawei AS (\r\n    SELECT\r\n        COALESCE(huawei_convs.date, huawei_cost.date) AS date,\r\n        COALESCE(huawei_convs.campaign_name, huawei_cost.campaign_name) AS campaign_name,\r\n        COALESCE(huawei_convs.platform, huawei_cost.platform) AS platform,\r\n        COALESCE(huawei_convs.promo_type, huawei_cost.promo_type) AS promo_type,\r\n        COALESCE(huawei_convs.geo, huawei_cost.geo) AS geo,\r\n        COALESCE(huawei_convs.campaign_type, huawei_cost.campaign_type) AS campaign_type,\r\n        COALESCE(huawei_convs.promo_search, huawei_cost.promo_search) AS promo_search,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        0 as orders,\r\n        COALESCE(spend,0) AS spend,\r\n        'Huawei' AS source,\r\n        'context' AS adv_type\r\n    FROM huawei_convs\r\n    FULL OUTER JOIN huawei_cost\r\n    ON huawei_convs.date = huawei_cost.date \r\n    AND huawei_convs.campaign_name = huawei_cost.campaign_name\r\n    AND huawei_convs.promo_type = huawei_cost.promo_type\r\n    AND huawei_convs.geo = huawei_cost.geo\r\n    AND huawei_convs.promo_search = huawei_cost.promo_search\r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(huawei_convs.campaign_name, huawei_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- vk -------------------------\r\n\r\nvk_cost_pre AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name') }} as promo_type,\r\n        {{ geo('campaign_name') }} AS geo,\r\n        {{ promo_search('campaign_name') }} as promo_search,\r\n        campaign_type,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('int_vk_cab_meta') }}\r\n    WHERE campaign_type = 'UA'\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\nvk_cost AS (\r\n    SELECT * FROM vk_cost_pre\r\n    UNION ALL\r\n    SELECT * FROM {{ source('agg_data', 'vk_manual_cost') }} -- \u0440\u0443\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\r\n),\r\n\r\nvk_convs_pre AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        'UA' as campaign_type,\r\n        promo_search,\r\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\r\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\r\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\r\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\r\n    FROM af_conversions\r\n    WHERE is_retargeting = FALSE\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_vk')\r\n    AND REGEXP_CONTAINS(campaign_name, r'new')\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\nvk_convs AS (\r\n    SELECT * FROM vk_convs_pre\r\n    UNION ALL \r\n    SELECT * FROM {{ source('agg_data', 'vk_manual_data') }} -- \u0440\u0443\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\r\n),\r\n\r\nvk AS (\r\n    SELECT\r\n        COALESCE(vk_convs.date, vk_cost.date) AS date,\r\n        COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) AS campaign_name,\r\n        COALESCE(vk_convs.platform, vk_cost.platform) AS platform,\r\n        COALESCE(vk_convs.promo_type, vk_cost.promo_type) AS promo_type,\r\n        COALESCE(vk_convs.geo, vk_cost.geo) AS geo,\r\n        COALESCE(vk_convs.campaign_type, vk_cost.campaign_type) AS campaign_type,\r\n        COALESCE(vk_convs.promo_search, vk_cost.promo_search) AS promo_search,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        0 as orders,\r\n        COALESCE(spend,0) / 1.2 AS spend, --\u0411\u0435\u0437 \u041d\u0414\u0421\r\n        '\u0412\u041a' AS source,\r\n        'social' AS adv_type\r\n    FROM vk_convs\r\n    FULL OUTER JOIN vk_cost\r\n    ON vk_convs.date = vk_cost.date \r\n    AND vk_convs.campaign_name = vk_cost.campaign_name\r\n    AND vk_convs.promo_type = vk_cost.promo_type\r\n    AND vk_convs.geo = vk_cost.geo\r\n    AND vk_convs.promo_search = vk_cost.promo_search\r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- zen -------------------------\r\n\r\nzen_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name') }} as promo_type,\r\n        {{ geo('campaign_name') }} AS geo,\r\n        {{ promo_search('campaign_name') }} as promo_search,\r\n        campaign_type,\r\n        --SUM(impressions) AS impressions,\r\n        --SUM(clicks) AS clicks,\r\n        --SUM(spend) AS spend\r\n        0 impressions,\r\n        0 clicks,\r\n        SUM(cost) AS spend\r\n    FROM {{ ref('stg_zen_data_sheets') }}\r\n    WHERE campaign_type = 'UA'\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\nzen_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        'UA' as campaign_type,\r\n        promo_search,\r\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\r\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\r\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\r\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\r\n    FROM af_conversions\r\n    WHERE is_retargeting = FALSE\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_dz')\r\n    AND REGEXP_CONTAINS(campaign_name, r'_new_')\r\n    GROUP BY 1,2,3,4,5,6,7\r\n),\r\n\r\nzen AS (\r\n    SELECT\r\n        COALESCE(zen_convs.date, zen_cost.date) AS date,\r\n        COALESCE(zen_convs.campaign_name, zen_cost.campaign_name) AS campaign_name,\r\n        COALESCE(zen_convs.platform, zen_cost.platform) AS platform,\r\n        COALESCE(zen_convs.promo_type, zen_cost.promo_type) AS promo_type,\r\n        COALESCE(zen_convs.geo, zen_cost.geo) AS geo,\r\n        COALESCE(zen_convs.campaign_type, zen_cost.campaign_type) AS campaign_type,\r\n        COALESCE(zen_convs.promo_search, zen_cost.promo_search) AS promo_search,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        0 as orders,\r\n        COALESCE(spend,0) AS spend,\r\n        'Zen' AS source,\r\n        '\u042f\u043d\u0434\u0435\u043a\u0441.\u0414\u0437\u0435\u043d' AS adv_type\r\n    FROM zen_convs\r\n    FULL OUTER JOIN zen_cost\r\n    ON zen_convs.date = zen_cost.date \r\n    AND zen_convs.campaign_name = zen_cost.campaign_name\r\n    AND zen_convs.promo_type = zen_cost.promo_type\r\n    AND zen_convs.geo = zen_cost.geo\r\n    AND zen_convs.promo_search = zen_cost.promo_search\r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(zen_convs.campaign_name, zen_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------inapp----------------------------\r\n\r\nrate AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        platform,\r\n        rate_for_us,\r\n        base\r\n    FROM {{ ref('stg_rate_info') }}\r\n    WHERE source = 'inapp'),\r\n\r\nlimits_table AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        limits\r\n    FROM {{ ref('stg_partner_limits') }}\r\n    WHERE type = 'UA'\r\n    AND source = 'inapp'\r\n),\r\n\r\ncampaign_limits AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        campaign as campaign_name,\r\n        limits\r\n    FROM {{ ref('stg_campaign_limits') }}\r\n),\r\n\r\ninapp_orders AS (\r\n    SELECT\r\n        date,\r\n        campaign,\r\n        orders\r\n    FROM {{ ref('stg_crm_orders') }}\r\n),\r\n\r\ninapp_convs_without_cumulation AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        {{ partner('campaign_name') }} AS partner,\r\n        platform,\r\n        CASE\r\n      WHEN REGEXP_CONTAINS(campaign_name, r'deep_outflow') and date > '2022-10-04' THEN 'deep_outflow'\r\n      WHEN REGEXP_CONTAINS(campaign_name, r'first_open_not_buy_rtg') and date > '2022-10-04' THEN 'first_open_not_buy_rtg'\r\n      WHEN REGEXP_CONTAINS(campaign_name, r'installed_the_app_but_not_buy_rtg') and date > '2022-10-04' THEN 'installed_the_app_but_not_buy_rtg'\r\n      WHEN REGEXP_CONTAINS(campaign_name, r'registered_but_not_buy_rtg') and date > '2022-10-04' THEN 'registered_but_not_buy_rtg'\r\n      ELSE 'Other'\r\n    END as base,\r\n        promo_type,\r\n        geo,\r\n        'UA' as campaign_type,\r\n        promo_search,\r\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\r\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\r\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\r\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase\r\n    FROM af_conversions\r\n    WHERE (REGEXP_CONTAINS(campaign_name, r'realweb_inapp') AND is_retargeting = FALSE)\r\n    OR REGEXP_CONTAINS(campaign_name, r'first_open_not_buy_rtg|installed_the_app_but_not_buy_rtg|registered_but_not_buy_rtg') AND is_retargeting = FALSE\r\n    GROUP BY 1,2,3,4,5,6,7,8,9\r\n),\r\n\r\ninapp_convs_with_cumulation AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        partner,\r\n        platform,\r\n        base,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        installs,\r\n        first_purchase_revenue,\r\n        CASE\r\n            WHEN REGEXP_CONTAINS(campaign_name, r'first_open_not_buy_rtg|installed_the_app_but_not_buy_rtg|registered_but_not_buy_rtg') \r\n            AND date >= '2022-10-01' AND date < '2022-12-01'THEN 0\r\n            ELSE first_purchase\r\n        END as first_purchase,\r\n        uniq_first_purchase,\r\n        revenue,\r\n        purchase,\r\n        uniq_purchase,\r\n        SUM(first_purchase) \r\n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, first_purchase_revenue)\r\n            AS cum_event_count_by_prt,\r\n        SUM(first_purchase) \r\n            OVER(PARTITION BY DATE_TRUNC(date, MONTH) ORDER BY date, first_purchase_revenue)\r\n            AS cum_first_purchase\r\n    FROM inapp_convs_without_cumulation\r\n),\r\n\r\ninapp_convs AS (\r\n    SELECT\r\n        i.date,\r\n        i.campaign_name,\r\n        i.partner,\r\n        i.platform,\r\n        i.promo_type,\r\n        base,\r\n        i.geo,\r\n        i.campaign_type,\r\n        i.promo_search,\r\n        i.installs,\r\n        IF(cum_event_count_by_prt <= COALESCE(l.limits, 1000000), first_purchase_revenue, 0) AS first_purchase_revenue,\r\n        IF(cum_event_count_by_prt <= COALESCE(l.limits, 1000000) AND cum_first_purchase <= COALESCE(c.limits, 1000000), first_purchase, 0) AS first_purchase,\r\n        IF(cum_event_count_by_prt <= COALESCE(l.limits, 1000000), uniq_first_purchase, 0) AS uniq_first_purchase,\r\n        i.revenue,\r\n        i.purchase,\r\n        i.uniq_purchase,\r\n        io.orders\r\n    FROM inapp_convs_with_cumulation i\r\n    LEFT JOIN limits_table l\r\n    ON i.partner = l.partner \r\n    AND i.date BETWEEN l.start_date AND l.end_date\r\n    LEFT JOIN campaign_limits c ON i.campaign_name = c.campaign_name \r\n    AND i.date BETWEEN c.start_date AND c.end_date\r\n    LEFT JOIN inapp_orders io ON\r\n    i.campaign_name = io.campaign AND\r\n    i.date = io.date\r\n),\r\n\r\ninapp AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        inapp_convs.platform AS platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        0 AS impressions,\r\n        0 AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        COALESCE(orders,0) AS orders,\r\n        COALESCE(orders * rate_for_us,0)  AS spend,\r\n        'inapp' AS source,\r\n        'inapp' AS adv_type\r\n    FROM inapp_convs\r\n    LEFT JOIN rate\r\n    ON inapp_convs.partner = rate.partner \r\n    AND inapp_convs.date BETWEEN rate.start_date AND rate.end_date\r\n    AND inapp_convs.platform = rate.platform\r\n    AND inapp_convs.base = rate.base \r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(orders * rate_for_us,0) > 0\r\n    AND campaign_name != 'None'\r\n),\r\n\r\n----------------------Xiaomi----------------------------\r\n\r\nx_rate AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        platform,\r\n        rate_for_us\r\n    FROM {{ ref('stg_rate_info') }}\r\n    WHERE type = 'UA'\r\n    AND source = 'Xiaomi'\r\n),\r\n\r\nx_limits_table AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        limits\r\n    FROM {{ ref('stg_partner_limits') }}\r\n    WHERE type = 'UA'\r\n    AND source = 'Xiaomi'\r\n),\r\n\r\nxiaomi_convs_without_cumulation AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        {{ partner('campaign_name') }} AS partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        'UA' as campaign_type,\r\n        promo_search,\r\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\r\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\r\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\r\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_xiaomi')\r\n    AND is_retargeting = FALSE\r\n    GROUP BY 1,2,3,4,5,6,7,8\r\n),\r\n\r\nxiaomi_convs_with_cumulation AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        installs,\r\n        first_purchase_revenue,\r\n        first_purchase,\r\n        uniq_first_purchase,\r\n        revenue,\r\n        purchase,\r\n        uniq_purchase,\r\n        SUM(installs) \r\n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, installs)\r\n            AS cum_event_count_by_prt\r\n    FROM xiaomi_convs_without_cumulation\r\n),\r\n\r\nxiaomi_convs AS (\r\n    SELECT\r\n        xiaomi_convs_with_cumulation.date,\r\n        campaign_name,\r\n        xiaomi_convs_with_cumulation.partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), installs, 0) AS installs,\r\n        first_purchase_revenue,\r\n        first_purchase,\r\n        uniq_first_purchase,\r\n        revenue,\r\n        purchase,\r\n        uniq_purchase,\r\n        orders,\r\n    FROM xiaomi_convs_with_cumulation\r\n    LEFT JOIN x_limits_table\r\n    ON xiaomi_convs_with_cumulation.partner = x_limits_table.partner \r\n    AND xiaomi_convs_with_cumulation.date BETWEEN x_limits_table.start_date AND x_limits_table.end_date\r\n    LEFT JOIN inapp_orders io ON\r\n    xiaomi_convs_with_cumulation.campaign_name = io.campaign AND\r\n    xiaomi_convs_with_cumulation.date = io.date\r\n),\r\n\r\nxiaomi AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        xiaomi_convs.platform AS platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        0 AS impressions,\r\n        0 AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        COALESCE(orders,0) AS orders,\r\n        COALESCE(orders * rate_for_us,0)  AS spend,\r\n        'Xiaomi' AS source,\r\n        'Xiaomi' AS adv_type\r\n    FROM xiaomi_convs\r\n    LEFT JOIN x_rate\r\n    ON xiaomi_convs.partner = x_rate.partner \r\n    AND xiaomi_convs.date BETWEEN x_rate.start_date AND x_rate.end_date\r\n    AND xiaomi_convs.platform = x_rate.platform \r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(installs * rate_for_us,0) > 0\r\n    AND campaign_name != 'None'\r\n),\r\n\r\n-----------------------------Bigo Ads--------------------------------\r\n\r\nbig_rate AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        platform,\r\n        rate_for_us\r\n    FROM {{ ref('stg_rate_info') }}\r\n    WHERE type = 'UA'\r\n    AND source = 'Bigo Ads'\r\n),\r\n\r\nbig_limits_table AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        limits\r\n    FROM {{ ref('stg_partner_limits') }}\r\n    WHERE type = 'UA'\r\n    AND source = 'Bigo Ads'\r\n),\r\n\r\nbigo_convs_without_cumulation AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        {{ partner('campaign_name') }} AS partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        'UA' as campaign_type,\r\n        promo_search,\r\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\r\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\r\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\r\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_bigoads')\r\n    AND is_retargeting = FALSE\r\n    GROUP BY 1,2,3,4,5,6,7,8\r\n),\r\n\r\nbigo_convs_with_cumulation AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        installs,\r\n        first_purchase_revenue,\r\n        first_purchase,\r\n        uniq_first_purchase,\r\n        revenue,\r\n        purchase,\r\n        uniq_purchase,\r\n        SUM(installs) OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, installs) AS cum_event_count_by_prt\r\n    FROM bigo_convs_without_cumulation\r\n),\r\n\r\nbigo_convs AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        bc.partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), installs, 0) AS installs,\r\n        first_purchase_revenue,\r\n        first_purchase,\r\n        uniq_first_purchase,\r\n        revenue,\r\n        purchase,\r\n        uniq_purchase,\r\n    FROM bigo_convs_with_cumulation bc\r\n    LEFT JOIN big_limits_table bl\r\n    ON bc.partner = bl.partner \r\n    AND bc.date BETWEEN bl.start_date AND bl.end_date\r\n),\r\n\r\nbigo_ads AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        bi.platform AS platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        0 AS impressions,\r\n        0 AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        0 as orders,\r\n        COALESCE(installs * rate_for_us,0)  AS spend,\r\n        'Bigo Ads' AS source,\r\n        'Bigo Ads' AS adv_type\r\n    FROM bigo_convs bi\r\n    LEFT JOIN big_rate br\r\n    ON bi.partner = br.partner \r\n    AND bi.date BETWEEN br.start_date AND br.end_date\r\n    AND bi.platform = br.platform \r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(installs * rate_for_us,0) > 0\r\n    AND campaign_name != 'None'\r\n),\r\n\r\n-----------------------------Mintegral--------------------------------\r\n\r\nmintegral_rate AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        platform,\r\n        rate_for_us\r\n    FROM {{ ref('stg_rate_info') }}\r\n    WHERE type = 'UA'\r\n    AND source = 'mintegral'\r\n),\r\n\r\nmintegral_convs_without_cumulation AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        {{ partner('campaign_name') }} AS partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        'UA' as campaign_type,\r\n        promo_search,\r\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\r\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\r\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\r\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_') AND REGEXP_CONTAINS(campaign_name, r'_mtg')\r\n    AND is_retargeting = FALSE\r\n    GROUP BY 1,2,3,4,5,6,7,8\r\n),\r\n\r\nmintegral_convs_with_cumulation AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        installs,\r\n        first_purchase_revenue,\r\n        first_purchase,\r\n        uniq_first_purchase,\r\n        revenue,\r\n        purchase,\r\n        uniq_purchase,\r\n        SUM(installs) \r\n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, installs)\r\n            AS cum_event_count_by_prt\r\n    FROM mintegral_convs_without_cumulation\r\n),\r\n\r\nmintegral_convs AS (\r\n    SELECT\r\n        m.date,\r\n        campaign_name,\r\n        m.partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        installs,\r\n        first_purchase_revenue,\r\n        first_purchase,\r\n        uniq_first_purchase,\r\n        revenue,\r\n        purchase,\r\n        uniq_purchase,\r\n        orders\r\n    FROM mintegral_convs_with_cumulation m\r\n    LEFT JOIN inapp_orders io ON\r\n    m.campaign_name = io.campaign AND\r\n    m.date = io.date\r\n\r\n),\r\n\r\nmintegral AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        mintegral_convs.platform AS platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        0 AS impressions,\r\n        0 AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        COALESCE(orders,0) AS orders,\r\n        COALESCE(orders * rate_for_us,0)  AS spend,\r\n        'Mintegral' AS source,\r\n        'Mintegral' AS adv_type\r\n    FROM mintegral_convs\r\n    LEFT JOIN mintegral_rate\r\n    ON mintegral_convs.partner = mintegral_rate.partner \r\n    AND mintegral_convs.date BETWEEN mintegral_rate.start_date AND mintegral_rate.end_date\r\n    AND mintegral_convs.platform = mintegral_rate.platform \r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(orders * rate_for_us,0) > 0\r\n    AND campaign_name != 'None'\r\n),\r\n\r\n-----------------------------Appnext--------------------------------\r\nappnext_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        type,\r\n        CASE \r\n            WHEN REGEXP_CONTAINS(campaign_name,'_p01_') THEN 'android'\r\n            WHEN REGEXP_CONTAINS(campaign_name,'_p02_') THEN 'ios'\r\n        END AS platform,\r\n        cost\r\n    FROM {{ ref('stg_appnext_cost') }}\r\n    WHERE\r\n        NOT REGEXP_CONTAINS(campaign_name,r'_u2_')\r\n        AND cost != 0\r\n),\r\n\r\nappnext_convs_without_cumulation AS (\r\n    SELECT \r\n        date,\r\n        CASE\r\n            WHEN af_cid = '514529' THEN 'realweb_p01_a999_c211_m404_u2_vprok_test1'\r\n            ELSE campaign_name\r\n        END AS campaign_name,\r\n        {{ partner('campaign_name') }} AS partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        'UA' as campaign_type,\r\n        promo_search,\r\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\r\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\r\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\r\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\r\n    FROM af_conversions\r\n    WHERE (REGEXP_CONTAINS(campaign_name, r'_c211') OR REGEXP_CONTAINS(af_cid, r'514529'))\r\n    AND is_retargeting = FALSE\r\n    GROUP BY 1,2,3,4,5,6,7,8\r\n),\r\n\r\nappnext_convs_with_cumulation AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        installs,\r\n        first_purchase_revenue,\r\n        first_purchase,\r\n        uniq_first_purchase,\r\n        revenue,\r\n        purchase,\r\n        uniq_purchase,\r\n        SUM(installs) \r\n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, installs)\r\n            AS cum_event_count_by_prt\r\n    FROM appnext_convs_without_cumulation\r\n),\r\n\r\nappnext_convs AS (\r\n    SELECT\r\n        m.date,\r\n        campaign_name,\r\n        m.partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        installs,\r\n        first_purchase_revenue,\r\n        first_purchase,\r\n        uniq_first_purchase,\r\n        revenue,\r\n        purchase,\r\n        uniq_purchase,\r\n        orders\r\n    FROM appnext_convs_with_cumulation m\r\n    LEFT JOIN inapp_orders io ON\r\n    m.campaign_name = io.campaign AND\r\n    m.date = io.date\r\n\r\n),\r\n\r\nappnext AS (\r\n    SELECT\r\n        COALESCE(appnext_convs.date,appnext_cost.date) AS date,\r\n        COALESCE(appnext_convs.campaign_name,appnext_cost.campaign_name) AS campaign_name,\r\n        COALESCE(appnext_convs.platform, appnext_cost.platform) AS platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        0 AS impressions,\r\n        0 AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        COALESCE(orders,0) AS orders,\r\n        appnext_cost.cost AS spend,\r\n        'Appnext' AS source,\r\n        'Appnext' AS adv_type\r\n    FROM appnext_convs\r\n    FULL OUTER JOIN appnext_cost\r\n    ON appnext_cost.date = appnext_convs.date\r\n       AND appnext_cost.campaign_name = appnext_convs.campaign_name\r\n       AND appnext_cost.platform = appnext_convs.platform   \r\n    WHERE \r\n        (COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) > 0\r\n        AND appnext_convs.campaign_name != 'None')\r\n        OR appnext_cost.cost != 0\r\n),\r\n\r\n----------------------Realweb CPA----------------------------\r\n\r\nrealwebcpa_rate AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        platform,\r\n        rate_for_us\r\n    FROM {{ ref('stg_rate_info') }}\r\n    WHERE type = 'UA'\r\n    AND source = 'realweb_cpa'\r\n),\r\n\r\nrealwebcpa_orders AS (\r\n    SELECT\r\n        date,\r\n        campaign,\r\n        orders\r\n    FROM {{ ref('stg_crm_orders_realwebcpa') }}\r\n),\r\n\r\nrealwebcpa_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        'Realweb CPA' AS partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        'UA' as campaign_type,\r\n        promo_search,\r\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\r\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\r\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\r\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\r\n    FROM af_conversions \r\n    WHERE is_retargeting = FALSE\r\n    AND REGEXP_CONTAINS(campaign_name, r'realwebcpa')\r\n    \r\n    \r\n    GROUP BY 1,2,3,4,5,6,7,8\r\n),\r\n\r\nrealwebcpa AS (\r\n    SELECT\r\n        rwc.date,\r\n        campaign_name,\r\n        rwc.platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        0 AS impressions,\r\n        0 AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        COALESCE(orders,0) AS orders,\r\n        CASE \r\n            WHEN rwc.date < '2022-10-01' and rwc.date > '2022-08-18' THEN COALESCE(first_purchase * 1200, 0)\r\n            WHEN rwc.date <= '2022-08-18' THEN COALESCE(first_purchase * 1000, 0)\r\n            WHEN rwc.date < '2022-11-01' and rwc.date >= '2022-10-01' THEN COALESCE(first_purchase * rate_for_us, 0)\r\n            ELSE COALESCE(orders * rate_for_us, 0)\r\n        END AS spend,\r\n        'Realweb CPA' AS source,\r\n        'Realweb CPA' AS adv_type\r\n    FROM realwebcpa_convs rwc\r\n    LEFT JOIN realwebcpa_rate rwr\r\n    ON rwc.partner = rwr.partner \r\n    AND rwc.date BETWEEN rwr.start_date AND rwr.end_date\r\n    AND rwc.platform = rwr.platform\r\n    LEFT JOIN realwebcpa_orders io ON\r\n    rwc.campaign_name = io.campaign AND\r\n    rwc.date = io.date\r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(first_purchase * rate_for_us,0) > 0\r\n    AND campaign_name != 'None'\r\n),\r\n\r\n----------------------Xapads----------------------------\r\n\r\nxapads_rate AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        platform,\r\n        rate_for_us\r\n    FROM {{ ref('stg_rate_info') }}\r\n    WHERE type = 'UA'\r\n    AND source = 'Xapads'\r\n),\r\n\r\nxapads_limits_table AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        limits\r\n    FROM {{ ref('stg_partner_limits') }}\r\n    WHERE type = 'UA'\r\n    AND source = 'Xapads'\r\n),\r\n\r\nxapads_convs_without_cumulation AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        {{ partner('campaign_name') }} AS partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        'UA' as campaign_type,\r\n        promo_search,\r\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\r\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\r\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\r\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\r\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\r\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\r\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'perekrestok_vprok_xapads')\r\n    AND is_retargeting = FALSE\r\n    GROUP BY 1,2,3,4,5,6,7,8\r\n),\r\n\r\nxapads_convs_with_cumulation AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        installs,\r\n        first_purchase_revenue,\r\n        first_purchase,\r\n        uniq_first_purchase,\r\n        revenue,\r\n        purchase,\r\n        uniq_purchase,\r\n        SUM(installs) \r\n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, installs)\r\n            AS cum_event_count_by_prt\r\n    FROM xapads_convs_without_cumulation\r\n),\r\n\r\nxapads_convs AS (\r\n    SELECT\r\n        xapads_convs_with_cumulation.date,\r\n        campaign_name,\r\n        xapads_convs_with_cumulation.partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), installs, 0) AS installs,\r\n        first_purchase_revenue,\r\n        first_purchase,\r\n        uniq_first_purchase,\r\n        revenue,\r\n        purchase,\r\n        uniq_purchase,\r\n        orders\r\n    FROM xapads_convs_with_cumulation\r\n    LEFT JOIN xapads_limits_table\r\n    ON xapads_convs_with_cumulation.partner = xapads_limits_table.partner \r\n    AND xapads_convs_with_cumulation.date BETWEEN xapads_limits_table.start_date AND xapads_limits_table.end_date\r\n    LEFT JOIN inapp_orders io ON\r\n    xapads_convs_with_cumulation.campaign_name = io.campaign AND\r\n    xapads_convs_with_cumulation.date = io.date\r\n\r\n),\r\n\r\nxapads AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        xapads_convs.platform AS platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        0 AS impressions,\r\n        0 AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        COALESCE(orders,0) AS orders,\r\n        COALESCE(orders * rate_for_us,0)  AS spend,\r\n        'Xapads' AS source,\r\n        'Xapads' AS adv_type\r\n    FROM xapads_convs\r\n    LEFT JOIN xapads_rate\r\n    ON xapads_convs.partner = xapads_rate.partner \r\n    AND xapads_convs.date BETWEEN xapads_rate.start_date AND xapads_rate.end_date\r\n    AND xapads_convs.platform = xapads_rate.platform \r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(first_purchase * rate_for_us,0) > 0\r\n    AND campaign_name != 'None'\r\n),\r\n\r\n\r\n\r\n----------------------final----------------------------\r\n\r\nunions AS (\r\n    SELECT * FROM yandex\r\n    UNION ALL \r\n    SELECT * FROM mt\r\n    UNION ALL  \r\n    SELECT * FROM tiktok\r\n    UNION ALL\r\n    SELECT * FROM asa\r\n    WHERE date <= '2022-08-31'\r\n    UNION ALL\r\n    SELECT * FROM facebook\r\n    UNION ALL\r\n    SELECT * FROM google\r\n    UNION ALL\r\n    SELECT * FROM huawei\r\n    UNION ALL\r\n    SELECT * FROM vk\r\n    UNION ALL\r\n    SELECT * FROM inapp\r\n    UNION ALL\r\n    SELECT * FROM xiaomi\r\n    UNION ALL\r\n    SELECT * FROM zen\r\n    UNION ALL\r\n    SELECT * FROM realwebcpa\r\n    UNION ALL\r\n    SELECT * FROM bigo_ads\r\n    WHERE date <= '2022-08-31'\r\n    UNION ALL\r\n    SELECT * FROM xapads\r\n    UNION ALL\r\n    SELECT * FROM mintegral\r\n    UNION ALL\r\n    SELECT * FROM appnext\r\n),\r\n\r\nfinal AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        promo_search,\r\n        impressions,\r\n        clicks,\r\n        installs,\r\n        revenue,\r\n        purchase,\r\n        uniq_purchase,\r\n        first_purchase_revenue,\r\n        first_purchase,\r\n        uniq_first_purchase,\r\n        orders,\r\n        spend,\r\n        source,\r\n        {{ conversion_source_type('campaign_name', 'source') }} AS conversion_source_type,\r\n        adv_type\r\n    FROM unions\r\n)\r\n\r\nSELECT \r\n    date,\r\n    campaign_name,\r\n    platform,\r\n    promo_type,\r\n    geo,\r\n    campaign_type,\r\n    promo_search,\r\n    impressions,\r\n    clicks,\r\n    installs,\r\n    revenue,\r\n    purchase,\r\n    uniq_purchase,\r\n    first_purchase_revenue,\r\n    first_purchase,\r\n    uniq_first_purchase,\r\n    orders,\r\n    spend,\r\n    source,\r\n    'Other' as base,\r\n    conversion_source_type,\r\n    adv_type\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "marts\\dim_ua.sql", "original_file_path": "models\\marts\\dim_ua.sql", "name": "dim_ua", "alias": "dim_ua", "checksum": {"name": "sha256", "checksum": "315644ef4863a07af25d91ac43465f01d0e309c6740bac236980f21885615bb1"}, "tags": [], "refs": [["stg_promo_dict_sheets"], ["stg_af_client_data"], ["stg_promo_dict_sheets"], ["stg_facebook_cab_sheets"], ["stg_facebook_cab_meta"], ["stg_promo_dict_sheets"], ["int_yandex_cab_meta"], ["stg_promo_dict_sheets"], ["int_mytarget_cab_meta"], ["stg_promo_dict_sheets"], ["stg_vk_beta_sheet"], ["stg_promo_dict_sheets"], ["stg_tiktok_cab_meta"], ["stg_promo_dict_sheets"], ["stg_asa_cab_sheets"], ["int_asa_cab_meta"], ["int_asa_cab_meta"], ["stg_promo_dict_sheets"], ["stg_google_cab_sheets"], ["stg_promo_dict_sheets"], ["stg_huawei_cab_sheets"], ["stg_promo_dict_sheets"], ["int_vk_cab_meta"], ["stg_promo_dict_sheets"], ["stg_zen_data_sheets"], ["stg_rate_info"], ["stg_partner_limits"], ["stg_campaign_limits"], ["stg_crm_orders"], ["stg_rate_info"], ["stg_partner_limits"], ["stg_rate_info"], ["stg_partner_limits"], ["stg_rate_info"], ["stg_appnext_cost"], ["stg_rate_info"], ["stg_crm_orders_realwebcpa"], ["stg_rate_info"], ["stg_partner_limits"]], "sources": [["agg_data", "vk_manual_cost"], ["agg_data", "vk_manual_data"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\marts\\dim_ua.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\marts\\dim_ua.sql", "deferred": false, "unrendered_config": {}, "created_at": 1676546308.8582642, "compiled_code": "/* \n\u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043b\u0443\u0447\u0448\u0435 \u0437\u0430\u0433\u043b\u044f\u043d\u0443\u0442\u044c \u0441\u044e\u0434\u0430: https://github.com/realweb-msk/perekrestokvprok-dbt\n\u0438\u043b\u0438 \u0441\u044e\u0434\u0430: https://brave-hermann-395dc3.netlify.app/#!/model/model.perekrestokvprok.dim_ua\n*/\n\nWITH af_conversions AS (\n    SELECT\n        date,\n        is_retargeting,\n        af_cid,\n        --adset_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        mediasource,\n        platform,\n        event_name,\n        uniq_event_count,\n        event_revenue,\n        event_count,\n        CASE \n            WHEN REGEXP_CONTAINS(campaign_name, r'realwebcpa_inapp_2022_as_and_cpo_qsm') AND date > '2022-08-31' THEN 'deleted'\n            ELSE campaign_name \n        END campaign_name\n    FROM  `perekrestokvprok-bq`.`dbt_production`.`stg_af_client_data`\n    -- WHERE is_retargeting = FALSE\n    -- AND REGEXP_CONTAINS(campaign_name, 'realweb')\n),\n\n----------------------- facebook -------------------------\n\nfacebook AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        campaign_type,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, ad_name], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(IF(campaign_type = 'UA', installs, 0)) AS installs,\n        SUM(revenue) AS revenue,\n        SUM(purchase) AS purchase,\n        SUM(purchase) AS uniq_purchase,\n        SUM(first_purchase_revenue) AS first_purchase_revenue,\n        SUM(first_purchase) AS first_purchase,\n        SUM(first_purchase) AS uniq_first_purchase,\n        0 as orders,\n        SUM(IF(campaign_type = 'UA', spend, 0)) AS spend,\n        'Facebook' AS source,\n        \"social\" as adv_type\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_facebook_cab_sheets`\n    --`perekrestokvprok-bq`.`dbt_production`.`stg_facebook_cab_meta`\n    GROUP BY 1,2,3,4,5,6,7\n),\n\n----------------------- yandex -------------------------\n\nyandex_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        campaign_type,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`int_yandex_cab_meta`\n    WHERE campaign_type = 'UA'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nyandex_convs_ua AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE is_retargeting = FALSE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_ya')\n    AND NOT REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nyandex_convs_rtg AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        'retargeting' AS campaign_type,\n        promo_search,\n        -- \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u043f\u043e\u043a\u0443\u043f\u043a\u0430\u043c \u0432 \u0440\u0435\u0442 \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u044f\u0445 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432 \u0434\u0430\u0448\u0431\u043e\u0440\u0434\u0435 UA\n        SUM(IF(event_name = 'install', 0,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE is_retargeting = TRUE --? \n    AND REGEXP_CONTAINS(campaign_name, r'realweb_ya')\n    AND REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nyandex_convs AS (\n    SELECT * FROM yandex_convs_ua\n    UNION ALL \n    SELECT * FROM yandex_convs_rtg\n),\n\nyandex AS (\n    SELECT\n        COALESCE(yandex_convs.date, yandex_cost.date) AS date,\n        COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) AS campaign_name,\n        COALESCE(yandex_convs.platform, yandex_cost.platform) AS platform,\n        COALESCE(yandex_convs.promo_type, yandex_cost.promo_type) AS promo_type,\n        COALESCE(yandex_convs.geo, yandex_cost.geo) AS geo,\n        COALESCE(yandex_convs.campaign_type, yandex_cost.campaign_type) AS campaign_type,\n        COALESCE(yandex_convs.promo_search, yandex_cost.promo_search) AS promo_search,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        0 as orders,\n        COALESCE(spend,0) AS spend,\n        '\u042f\u043d\u0434\u0435\u043a\u0441.\u0414\u0438\u0440\u0435\u043a\u0442' AS source,\n        'context' AS adv_type\n    FROM yandex_convs\n    FULL OUTER JOIN yandex_cost\n    ON yandex_convs.date = yandex_cost.date \n    AND yandex_convs.campaign_name = yandex_cost.campaign_name\n    AND yandex_convs.promo_type = yandex_cost.promo_type\n    AND yandex_convs.geo = yandex_cost.geo\n    AND yandex_convs.promo_search = yandex_cost.promo_search\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) != 'None'\n),\n\n----------------------- VK \u0420\u0435\u043a\u043b\u0430\u043c\u0430 / MyTarget -------------------------\n\nmt_main_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        campaign_type,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`int_mytarget_cab_meta`\n    WHERE campaign_type = 'UA'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nmt_beta_cost AS (\n    SELECT DISTINCT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        campaign_type,\n        --SUM(impressions) AS impressions,\n        --SUM(clicks) AS clicks,\n        --SUM(spend) AS spend\n        0 impressions,\n        0 clicks,\n        cost AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_vk_beta_sheet`\n    WHERE campaign_type = 'UA'\n),\n\nmt_cost AS (\n    SELECT * FROM mt_main_cost\n    UNION ALL\n    SELECT * FROM mt_beta_cost\n),\n\nmt_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE (is_retargeting = FALSE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_mt')\n    AND REGEXP_CONTAINS(campaign_name, r'new')) OR (is_retargeting = FALSE AND REGEXP_CONTAINS(mediasource, r'mail.ru_int') \n    AND REGEXP_CONTAINS(campaign_name, r'realweb'))\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nmt AS (\n    SELECT\n        COALESCE(mt_convs.date, mt_cost.date) AS date,\n        COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) AS campaign_name,\n        COALESCE(mt_convs.platform, mt_cost.platform) AS platform,\n        COALESCE(mt_convs.promo_type, mt_cost.promo_type) AS promo_type,\n        COALESCE(mt_convs.geo, mt_cost.geo) AS geo,\n        COALESCE(mt_convs.campaign_type, mt_cost.campaign_type) AS campaign_type,\n        COALESCE(mt_convs.promo_search, mt_cost.promo_search) AS promo_search,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        0 as orders,\n        COALESCE(spend,0) AS spend,\n        'VK Ads' AS source,\n        'social' AS adv_type\n    FROM mt_convs\n    FULL OUTER JOIN mt_cost\n    ON mt_convs.date = mt_cost.date \n    AND mt_convs.campaign_name = mt_cost.campaign_name\n    AND mt_convs.promo_type = mt_cost.promo_type\n    AND mt_convs.geo = mt_cost.geo\n    AND mt_convs.promo_search = mt_cost.promo_search\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) != 'None'\n),\n\n----------------------- tiktok -------------------------\n\ntiktok_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        campaign_type,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        -- \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u043f\u043e\u043a\u0443\u043f\u043a\u0430\u043c \u0432 \u0440\u0435\u0442 \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u044f\u0445 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432 \u0434\u0430\u0448\u0431\u043e\u0440\u0434\u0435 UA\n        SUM(IF(campaign_type = 'UA',impressions,0)) AS impressions,\n        SUM(IF(campaign_type = 'UA',clicks,0)) AS clicks,\n        SUM(IF(campaign_type = 'UA',spend,0)) AS spend,\n        SUM(purchase) AS purchase,\n        SUM(first_purchase) AS first_purchase,\n        SUM(SAFE_CAST(app_install AS INT64)) AS app_install\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_tiktok_cab_meta`\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\ntiktok_convs AS (\n    SELECT  \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        --SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        --SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE is_retargeting = FALSE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_tiktok')\n    AND NOT REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\ntiktok AS (\n    SELECT\n        COALESCE(tiktok_convs.date, tiktok_cost.date) AS date,\n        COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) AS campaign_name,\n        COALESCE(tiktok_convs.platform, tiktok_cost.platform) AS platform,\n        COALESCE(tiktok_convs.promo_type, tiktok_cost.promo_type) AS promo_type,\n        COALESCE(tiktok_convs.geo, tiktok_cost.geo) AS geo,\n        COALESCE(tiktok_convs.campaign_type, tiktok_cost.campaign_type) AS campaign_type,\n        COALESCE(tiktok_convs.promo_search, tiktok_cost.promo_search) AS promo_search,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs, app_install, 0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        0 as orders,\n        COALESCE(spend,0) AS spend,\n        'TikTok' AS source,\n        'social' AS adv_type\n    FROM tiktok_convs\n    FULL OUTER JOIN tiktok_cost\n    ON tiktok_convs.date = tiktok_cost.date \n    AND tiktok_convs.campaign_name = tiktok_cost.campaign_name\n    AND tiktok_convs.promo_type = tiktok_cost.promo_type\n    AND tiktok_convs.geo = tiktok_cost.geo\n    AND tiktok_convs.promo_search = tiktok_cost.promo_search\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) != 'None'\n),\n\n----------------------- apple search ads -------------------------\n\nasa_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        'ios' as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        campaign_type,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        SUM(meta.impressions) AS impressions,\n        SUM(sheet.clicks) AS clicks,\n        SUM(sheet.spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_asa_cab_sheets` sheet\n    --`perekrestokvprok-bq`.`dbt_production`.`int_asa_cab_meta`\n    LEFT JOIN `perekrestokvprok-bq`.`dbt_production`.`int_asa_cab_meta` meta\n    USING(date, campaign_name, campaign_type, adset_name)\n    WHERE campaign_type = 'UA'\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nasa_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE NOT REGEXP_CONTAINS(campaign_name, r'\\(r\\)')\n    AND (\n        REGEXP_CONTAINS(campaign_name, r'\\(exact\\)|\u0437\u043e\u043e') OR\n        mediasource = 'Apple Search Ads'\n    )\n    AND is_retargeting = FALSE\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nasa AS (\n    SELECT\n        COALESCE(asa_convs.date, asa_cost.date) AS date,\n        COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) AS campaign_name,\n        COALESCE(asa_convs.platform, asa_cost.platform) AS platform,\n        COALESCE(asa_convs.promo_type, asa_cost.promo_type) AS promo_type,\n        COALESCE(asa_convs.geo, asa_cost.geo) AS geo,\n        COALESCE(asa_convs.campaign_type, asa_cost.campaign_type) AS campaign_type,\n        COALESCE(asa_convs.promo_search, asa_cost.promo_search) AS promo_search,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        0 as orders,\n        COALESCE(spend,0) AS spend,\n        'Apple Search Ads' AS source,\n        'context' AS adv_type\n    FROM asa_convs\n    FULL OUTER JOIN asa_cost\n    ON asa_convs.date = asa_cost.date \n    AND asa_convs.campaign_name = asa_cost.campaign_name\n    AND asa_convs.promo_type = asa_cost.promo_type\n    AND asa_convs.geo = asa_cost.geo\n    AND asa_convs.promo_search = asa_cost.promo_search\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) != 'None'\n),\n\n----------------------- google -------------------------\n\ngoogle_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        campaign_type,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name, \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend,\n        SUM(IF(\n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n = 'ios', installs, NULL)) AS installs\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_google_cab_sheets`\n    WHERE campaign_type = 'UA'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    AND campaign_name NOT IN (\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\ngoogle_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_uac_')\n    AND is_retargeting = FALSE\n    AND campaign_name NOT IN (\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\ngoogle AS (\n    SELECT\n        COALESCE(google_convs.date, google_cost.date) AS date,\n        COALESCE(google_convs.campaign_name, google_cost.campaign_name) AS campaign_name,\n        COALESCE(google_convs.platform, google_cost.platform) AS platform,\n        COALESCE(google_convs.promo_type, google_cost.promo_type) AS promo_type,\n        COALESCE(google_convs.geo, google_cost.geo) AS geo,\n        COALESCE(google_convs.campaign_type, google_cost.campaign_type) AS campaign_type,\n        COALESCE(google_convs.promo_search, google_cost.promo_search) AS promo_search,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(google_cost.installs,google_convs.installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        0 as orders,\n        COALESCE(spend,0) AS spend,\n        'Google Ads' AS source,\n        'context' AS adv_type\n    FROM google_convs\n    FULL OUTER JOIN google_cost\n    ON google_convs.date = google_cost.date \n    AND google_convs.campaign_name = google_cost.campaign_name\n    AND google_convs.promo_type = google_cost.promo_type\n    AND google_convs.geo = google_cost.geo\n    AND google_convs.promo_search = google_cost.promo_search\n    WHERE \n        COALESCE(google_cost.installs,google_convs.installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(google_convs.campaign_name, google_cost.campaign_name) != 'None'\n),\n\n----------------------- huawei -------------------------\n\nhuawei_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_huawei_cab_sheets`\n    WHERE campaign_type = 'UA'\n    AND status != \"Deleted\"\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nhuawei_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE is_retargeting = FALSE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_hw')\n    AND REGEXP_CONTAINS(campaign_name, r'new')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nhuawei AS (\n    SELECT\n        COALESCE(huawei_convs.date, huawei_cost.date) AS date,\n        COALESCE(huawei_convs.campaign_name, huawei_cost.campaign_name) AS campaign_name,\n        COALESCE(huawei_convs.platform, huawei_cost.platform) AS platform,\n        COALESCE(huawei_convs.promo_type, huawei_cost.promo_type) AS promo_type,\n        COALESCE(huawei_convs.geo, huawei_cost.geo) AS geo,\n        COALESCE(huawei_convs.campaign_type, huawei_cost.campaign_type) AS campaign_type,\n        COALESCE(huawei_convs.promo_search, huawei_cost.promo_search) AS promo_search,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        0 as orders,\n        COALESCE(spend,0) AS spend,\n        'Huawei' AS source,\n        'context' AS adv_type\n    FROM huawei_convs\n    FULL OUTER JOIN huawei_cost\n    ON huawei_convs.date = huawei_cost.date \n    AND huawei_convs.campaign_name = huawei_cost.campaign_name\n    AND huawei_convs.promo_type = huawei_cost.promo_type\n    AND huawei_convs.geo = huawei_cost.geo\n    AND huawei_convs.promo_search = huawei_cost.promo_search\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(huawei_convs.campaign_name, huawei_cost.campaign_name) != 'None'\n),\n\n----------------------- vk -------------------------\n\nvk_cost_pre AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`int_vk_cab_meta`\n    WHERE campaign_type = 'UA'\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nvk_cost AS (\n    SELECT * FROM vk_cost_pre\n    UNION ALL\n    SELECT * FROM `perekrestokvprok-bq`.`agg_data`.`vk_manual_cost` -- \u0440\u0443\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n),\n\nvk_convs_pre AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE is_retargeting = FALSE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_vk')\n    AND REGEXP_CONTAINS(campaign_name, r'new')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nvk_convs AS (\n    SELECT * FROM vk_convs_pre\n    UNION ALL \n    SELECT * FROM `perekrestokvprok-bq`.`agg_data`.`vk_manual_data` -- \u0440\u0443\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n),\n\nvk AS (\n    SELECT\n        COALESCE(vk_convs.date, vk_cost.date) AS date,\n        COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) AS campaign_name,\n        COALESCE(vk_convs.platform, vk_cost.platform) AS platform,\n        COALESCE(vk_convs.promo_type, vk_cost.promo_type) AS promo_type,\n        COALESCE(vk_convs.geo, vk_cost.geo) AS geo,\n        COALESCE(vk_convs.campaign_type, vk_cost.campaign_type) AS campaign_type,\n        COALESCE(vk_convs.promo_search, vk_cost.promo_search) AS promo_search,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        0 as orders,\n        COALESCE(spend,0) / 1.2 AS spend, --\u0411\u0435\u0437 \u041d\u0414\u0421\n        '\u0412\u041a' AS source,\n        'social' AS adv_type\n    FROM vk_convs\n    FULL OUTER JOIN vk_cost\n    ON vk_convs.date = vk_cost.date \n    AND vk_convs.campaign_name = vk_cost.campaign_name\n    AND vk_convs.promo_type = vk_cost.promo_type\n    AND vk_convs.geo = vk_cost.geo\n    AND vk_convs.promo_search = vk_cost.promo_search\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(vk_convs.campaign_name, vk_cost.campaign_name) != 'None'\n),\n\n----------------------- zen -------------------------\n\nzen_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'yagoda_14.09-28.09') THEN 'yagoda_14.09-28.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'tovar_rub_13.09-19.09') THEN 'tovar_rub_13.09-19.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'season_orange') THEN 'season_orange'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'season_mandarin') THEN 'season_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'season_lemon') THEN 'season_lemon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_ios_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_reg1_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_and_cpi_nn_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_nn_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global') THEN 'realweb_ya_2022_and_cpi_mskspb_brand_display_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular') THEN 'realweb_ya_2021_and_cpi_rf_general_display_install_promo_regular'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday') THEN 'realweb_vk_2022_and_cpo_rf_old_ret_promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_tiktok_2022_mskspb_and_new_promo_global') THEN 'realweb_tiktok_2022_mskspb_and_new_promo_global'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]') THEN 'realweb_mt_2021 [p:and] [cpa] [mskspb] [old] [minusfrequency2] [promo_global]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:ios] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpo] [feed] [discount] [old] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpi] [feed] [discount] [new] [general] [darkstore] [install] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]') THEN 'realweb_fb_2021 [p:ios] [cpa] [feed] [discount] [new] [general] [darkstore] [forder] [i14]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [old] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]') THEN 'realweb_fb_2021 [p:and] [g:msk] [cpo] [feed] [new] [general] [darkstore] [ng]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo_catalog] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [old] [general] [darkstore] [forder]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpo] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]') THEN 'realweb_fb_2021 [p:and] [cpi] [feed] [discount] [new] [general] [darkstore] [install]'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promofeed') THEN 'promofeed'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_zavtrak') THEN 'promo_zavtrak'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_watermelon') THEN 'promo_watermelon'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_vsepo99') THEN 'promo_vsepo99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_vse_po_49_i_99') THEN 'promo_vse_po_49_i_99'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_tea_coffee') THEN 'promo_tea_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_tea_and_cofee') THEN 'promo_tea_and_cofee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_sun') THEN 'promo_sun'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_strawberry') THEN 'promo_strawberry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_smoothies') THEN 'promo_smoothies'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_school') THEN 'promo_school'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_regular_present_vid') THEN 'promo_regular_present_vid'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_regular_present_2') THEN 'promo_regular_present_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_regular_present') THEN 'promo_regular_present'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_plov') THEN 'promo_plov'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_okroshka') THEN 'promo_okroshka'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_nemoloko') THEN 'promo_nemoloko'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_napitok') THEN 'promo_napitok'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_more_lososya') THEN 'promo_more_lososya'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_moloko_parmalat') THEN 'promo_moloko_parmalat'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_meet') THEN 'promo_meet'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_meat_21.07 - 02.08') THEN 'promo_meat_21.07 - 02.08'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_lisichki') THEN 'promo_lisichki'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_linzy') THEN 'promo_linzy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_limonad') THEN 'promo_limonad'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_lego_december') THEN 'promo_lego_december'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_lego') THEN 'promo_lego'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_kvas') THEN 'promo_kvas'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_kolbasa') THEN 'promo_kolbasa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_kasha') THEN 'promo_kasha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_karamel_tokio') THEN 'promo_karamel_tokio'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_icecream') THEN 'promo_icecream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_ice_cream') THEN 'promo_ice_cream'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_him') THEN 'promo_him'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_grill') THEN 'promo_grill'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_dyson_ret') THEN 'promo_global_dyson_ret'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_zewa') THEN 'promo_global_cyber_monday_zewa'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_vid2') THEN 'promo_global_cyber_monday_vid2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_vid1') THEN 'promo_global_cyber_monday_vid1'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_pepsi') THEN 'promo_global_cyber_monday_pepsi'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_losos') THEN 'promo_global_cyber_monday_losos'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_drink') THEN 'promo_global_cyber_monday_drink'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday_25.01') THEN 'promo_global_cyber_monday_25.01'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_cyber_monday') THEN 'promo_global_cyber_monday'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_auto_carusel_2') THEN 'promo_global_auto_carusel_2'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_auto_carusel') THEN 'promo_global_auto_carusel'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_global_auto') THEN 'promo_global_auto'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_fruits_ berries') THEN 'promo_fruits_ berries'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_fish') THEN 'promo_fish'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_festmorozh') THEN 'promo_festmorozh'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_dostavka_dacha') THEN 'promo_dostavka_dacha'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_diapers') THEN 'promo_diapers'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cosmetics') THEN 'promo_cosmetics'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_coffee') THEN 'promo_coffee'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_choco_ball') THEN 'promo_choco_ball'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_children') THEN 'promo_children'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cherry') THEN 'promo_cherry'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cheese_chechil') THEN 'promo_cheese_chechil'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_cheese') THEN 'promo_cheese'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_baton_alpin') THEN 'promo_baton_alpin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_baton') THEN 'promo_baton'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_aurora') THEN 'promo_aurora'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'promo_arbuz') THEN 'promo_arbuz'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_olivier') THEN 'ng_olivier'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_mandarin') THEN 'ng_mandarin'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_kura') THEN 'ng_kura'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'ng_granata') THEN 'ng_granata'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'fixprice_17.09-27.09') THEN 'fixprice_17.09-27.09'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'express') THEN 'express'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'coffee_illy') THEN 'coffee_illy'\n\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\", \"-\"], ' ')), r'black_friday') THEN 'black_friday'\n\n    ELSE '-' END\n\n as promo_search,\n        campaign_type,\n        --SUM(impressions) AS impressions,\n        --SUM(clicks) AS clicks,\n        --SUM(spend) AS spend\n        0 impressions,\n        0 clicks,\n        SUM(cost) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_zen_data_sheets`\n    WHERE campaign_type = 'UA'\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nzen_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE is_retargeting = FALSE\n    AND REGEXP_CONTAINS(campaign_name, r'realweb_dz')\n    AND REGEXP_CONTAINS(campaign_name, r'_new_')\n    GROUP BY 1,2,3,4,5,6,7\n),\n\nzen AS (\n    SELECT\n        COALESCE(zen_convs.date, zen_cost.date) AS date,\n        COALESCE(zen_convs.campaign_name, zen_cost.campaign_name) AS campaign_name,\n        COALESCE(zen_convs.platform, zen_cost.platform) AS platform,\n        COALESCE(zen_convs.promo_type, zen_cost.promo_type) AS promo_type,\n        COALESCE(zen_convs.geo, zen_cost.geo) AS geo,\n        COALESCE(zen_convs.campaign_type, zen_cost.campaign_type) AS campaign_type,\n        COALESCE(zen_convs.promo_search, zen_cost.promo_search) AS promo_search,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        0 as orders,\n        COALESCE(spend,0) AS spend,\n        'Zen' AS source,\n        '\u042f\u043d\u0434\u0435\u043a\u0441.\u0414\u0437\u0435\u043d' AS adv_type\n    FROM zen_convs\n    FULL OUTER JOIN zen_cost\n    ON zen_convs.date = zen_cost.date \n    AND zen_convs.campaign_name = zen_cost.campaign_name\n    AND zen_convs.promo_type = zen_cost.promo_type\n    AND zen_convs.geo = zen_cost.geo\n    AND zen_convs.promo_search = zen_cost.promo_search\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(zen_convs.campaign_name, zen_cost.campaign_name) != 'None'\n),\n\n----------------------inapp----------------------------\n\nrate AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        platform,\n        rate_for_us,\n        base\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_rate_info`\n    WHERE source = 'inapp'),\n\nlimits_table AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        limits\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_partner_limits`\n    WHERE type = 'UA'\n    AND source = 'inapp'\n),\n\ncampaign_limits AS (\n    SELECT\n        start_date,\n        end_date,\n        campaign as campaign_name,\n        limits\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_campaign_limits`\n),\n\ninapp_orders AS (\n    SELECT\n        date,\n        campaign,\n        orders\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_crm_orders`\n),\n\ninapp_convs_without_cumulation AS (\n    SELECT \n        date,\n        campaign_name,\n        \n    CASE \n        WHEN REGEXP_CONTAINS(campaign_name, r'_ms_') THEN 'Mobisharks'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tl_') THEN '2leads'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_mx_') THEN 'MobX'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_sw_') THEN 'SW'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tm_') THEN 'Think Mobile'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_abc[_\\s]|_sf_') THEN 'Mediasurfer'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_a999') THEN 'In-house'\n    ELSE '-' END\n AS partner,\n        platform,\n        CASE\n      WHEN REGEXP_CONTAINS(campaign_name, r'deep_outflow') and date > '2022-10-04' THEN 'deep_outflow'\n      WHEN REGEXP_CONTAINS(campaign_name, r'first_open_not_buy_rtg') and date > '2022-10-04' THEN 'first_open_not_buy_rtg'\n      WHEN REGEXP_CONTAINS(campaign_name, r'installed_the_app_but_not_buy_rtg') and date > '2022-10-04' THEN 'installed_the_app_but_not_buy_rtg'\n      WHEN REGEXP_CONTAINS(campaign_name, r'registered_but_not_buy_rtg') and date > '2022-10-04' THEN 'registered_but_not_buy_rtg'\n      ELSE 'Other'\n    END as base,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase\n    FROM af_conversions\n    WHERE (REGEXP_CONTAINS(campaign_name, r'realweb_inapp') AND is_retargeting = FALSE)\n    OR REGEXP_CONTAINS(campaign_name, r'first_open_not_buy_rtg|installed_the_app_but_not_buy_rtg|registered_but_not_buy_rtg') AND is_retargeting = FALSE\n    GROUP BY 1,2,3,4,5,6,7,8,9\n),\n\ninapp_convs_with_cumulation AS (\n    SELECT\n        date,\n        campaign_name,\n        partner,\n        platform,\n        base,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        installs,\n        first_purchase_revenue,\n        CASE\n            WHEN REGEXP_CONTAINS(campaign_name, r'first_open_not_buy_rtg|installed_the_app_but_not_buy_rtg|registered_but_not_buy_rtg') \n            AND date >= '2022-10-01' AND date < '2022-12-01'THEN 0\n            ELSE first_purchase\n        END as first_purchase,\n        uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n        SUM(first_purchase) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, first_purchase_revenue)\n            AS cum_event_count_by_prt,\n        SUM(first_purchase) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH) ORDER BY date, first_purchase_revenue)\n            AS cum_first_purchase\n    FROM inapp_convs_without_cumulation\n),\n\ninapp_convs AS (\n    SELECT\n        i.date,\n        i.campaign_name,\n        i.partner,\n        i.platform,\n        i.promo_type,\n        base,\n        i.geo,\n        i.campaign_type,\n        i.promo_search,\n        i.installs,\n        IF(cum_event_count_by_prt <= COALESCE(l.limits, 1000000), first_purchase_revenue, 0) AS first_purchase_revenue,\n        IF(cum_event_count_by_prt <= COALESCE(l.limits, 1000000) AND cum_first_purchase <= COALESCE(c.limits, 1000000), first_purchase, 0) AS first_purchase,\n        IF(cum_event_count_by_prt <= COALESCE(l.limits, 1000000), uniq_first_purchase, 0) AS uniq_first_purchase,\n        i.revenue,\n        i.purchase,\n        i.uniq_purchase,\n        io.orders\n    FROM inapp_convs_with_cumulation i\n    LEFT JOIN limits_table l\n    ON i.partner = l.partner \n    AND i.date BETWEEN l.start_date AND l.end_date\n    LEFT JOIN campaign_limits c ON i.campaign_name = c.campaign_name \n    AND i.date BETWEEN c.start_date AND c.end_date\n    LEFT JOIN inapp_orders io ON\n    i.campaign_name = io.campaign AND\n    i.date = io.date\n),\n\ninapp AS (\n    SELECT\n        date,\n        campaign_name,\n        inapp_convs.platform AS platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        0 AS impressions,\n        0 AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(orders,0) AS orders,\n        COALESCE(orders * rate_for_us,0)  AS spend,\n        'inapp' AS source,\n        'inapp' AS adv_type\n    FROM inapp_convs\n    LEFT JOIN rate\n    ON inapp_convs.partner = rate.partner \n    AND inapp_convs.date BETWEEN rate.start_date AND rate.end_date\n    AND inapp_convs.platform = rate.platform\n    AND inapp_convs.base = rate.base \n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(orders * rate_for_us,0) > 0\n    AND campaign_name != 'None'\n),\n\n----------------------Xiaomi----------------------------\n\nx_rate AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        platform,\n        rate_for_us\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_rate_info`\n    WHERE type = 'UA'\n    AND source = 'Xiaomi'\n),\n\nx_limits_table AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        limits\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_partner_limits`\n    WHERE type = 'UA'\n    AND source = 'Xiaomi'\n),\n\nxiaomi_convs_without_cumulation AS (\n    SELECT \n        date,\n        campaign_name,\n        \n    CASE \n        WHEN REGEXP_CONTAINS(campaign_name, r'_ms_') THEN 'Mobisharks'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tl_') THEN '2leads'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_mx_') THEN 'MobX'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_sw_') THEN 'SW'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tm_') THEN 'Think Mobile'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_abc[_\\s]|_sf_') THEN 'Mediasurfer'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_a999') THEN 'In-house'\n    ELSE '-' END\n AS partner,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_xiaomi')\n    AND is_retargeting = FALSE\n    GROUP BY 1,2,3,4,5,6,7,8\n),\n\nxiaomi_convs_with_cumulation AS (\n    SELECT\n        date,\n        campaign_name,\n        partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        installs,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n        SUM(installs) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, installs)\n            AS cum_event_count_by_prt\n    FROM xiaomi_convs_without_cumulation\n),\n\nxiaomi_convs AS (\n    SELECT\n        xiaomi_convs_with_cumulation.date,\n        campaign_name,\n        xiaomi_convs_with_cumulation.partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), installs, 0) AS installs,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n        orders,\n    FROM xiaomi_convs_with_cumulation\n    LEFT JOIN x_limits_table\n    ON xiaomi_convs_with_cumulation.partner = x_limits_table.partner \n    AND xiaomi_convs_with_cumulation.date BETWEEN x_limits_table.start_date AND x_limits_table.end_date\n    LEFT JOIN inapp_orders io ON\n    xiaomi_convs_with_cumulation.campaign_name = io.campaign AND\n    xiaomi_convs_with_cumulation.date = io.date\n),\n\nxiaomi AS (\n    SELECT\n        date,\n        campaign_name,\n        xiaomi_convs.platform AS platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        0 AS impressions,\n        0 AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(orders,0) AS orders,\n        COALESCE(orders * rate_for_us,0)  AS spend,\n        'Xiaomi' AS source,\n        'Xiaomi' AS adv_type\n    FROM xiaomi_convs\n    LEFT JOIN x_rate\n    ON xiaomi_convs.partner = x_rate.partner \n    AND xiaomi_convs.date BETWEEN x_rate.start_date AND x_rate.end_date\n    AND xiaomi_convs.platform = x_rate.platform \n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(installs * rate_for_us,0) > 0\n    AND campaign_name != 'None'\n),\n\n-----------------------------Bigo Ads--------------------------------\n\nbig_rate AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        platform,\n        rate_for_us\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_rate_info`\n    WHERE type = 'UA'\n    AND source = 'Bigo Ads'\n),\n\nbig_limits_table AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        limits\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_partner_limits`\n    WHERE type = 'UA'\n    AND source = 'Bigo Ads'\n),\n\nbigo_convs_without_cumulation AS (\n    SELECT \n        date,\n        campaign_name,\n        \n    CASE \n        WHEN REGEXP_CONTAINS(campaign_name, r'_ms_') THEN 'Mobisharks'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tl_') THEN '2leads'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_mx_') THEN 'MobX'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_sw_') THEN 'SW'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tm_') THEN 'Think Mobile'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_abc[_\\s]|_sf_') THEN 'Mediasurfer'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_a999') THEN 'In-house'\n    ELSE '-' END\n AS partner,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_bigoads')\n    AND is_retargeting = FALSE\n    GROUP BY 1,2,3,4,5,6,7,8\n),\n\nbigo_convs_with_cumulation AS (\n    SELECT\n        date,\n        campaign_name,\n        partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        installs,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n        SUM(installs) OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, installs) AS cum_event_count_by_prt\n    FROM bigo_convs_without_cumulation\n),\n\nbigo_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        bc.partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), installs, 0) AS installs,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n    FROM bigo_convs_with_cumulation bc\n    LEFT JOIN big_limits_table bl\n    ON bc.partner = bl.partner \n    AND bc.date BETWEEN bl.start_date AND bl.end_date\n),\n\nbigo_ads AS (\n    SELECT\n        date,\n        campaign_name,\n        bi.platform AS platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        0 AS impressions,\n        0 AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        0 as orders,\n        COALESCE(installs * rate_for_us,0)  AS spend,\n        'Bigo Ads' AS source,\n        'Bigo Ads' AS adv_type\n    FROM bigo_convs bi\n    LEFT JOIN big_rate br\n    ON bi.partner = br.partner \n    AND bi.date BETWEEN br.start_date AND br.end_date\n    AND bi.platform = br.platform \n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(installs * rate_for_us,0) > 0\n    AND campaign_name != 'None'\n),\n\n-----------------------------Mintegral--------------------------------\n\nmintegral_rate AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        platform,\n        rate_for_us\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_rate_info`\n    WHERE type = 'UA'\n    AND source = 'mintegral'\n),\n\nmintegral_convs_without_cumulation AS (\n    SELECT \n        date,\n        campaign_name,\n        \n    CASE \n        WHEN REGEXP_CONTAINS(campaign_name, r'_ms_') THEN 'Mobisharks'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tl_') THEN '2leads'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_mx_') THEN 'MobX'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_sw_') THEN 'SW'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tm_') THEN 'Think Mobile'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_abc[_\\s]|_sf_') THEN 'Mediasurfer'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_a999') THEN 'In-house'\n    ELSE '-' END\n AS partner,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_') AND REGEXP_CONTAINS(campaign_name, r'_mtg')\n    AND is_retargeting = FALSE\n    GROUP BY 1,2,3,4,5,6,7,8\n),\n\nmintegral_convs_with_cumulation AS (\n    SELECT\n        date,\n        campaign_name,\n        partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        installs,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n        SUM(installs) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, installs)\n            AS cum_event_count_by_prt\n    FROM mintegral_convs_without_cumulation\n),\n\nmintegral_convs AS (\n    SELECT\n        m.date,\n        campaign_name,\n        m.partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        installs,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n        orders\n    FROM mintegral_convs_with_cumulation m\n    LEFT JOIN inapp_orders io ON\n    m.campaign_name = io.campaign AND\n    m.date = io.date\n\n),\n\nmintegral AS (\n    SELECT\n        date,\n        campaign_name,\n        mintegral_convs.platform AS platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        0 AS impressions,\n        0 AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(orders,0) AS orders,\n        COALESCE(orders * rate_for_us,0)  AS spend,\n        'Mintegral' AS source,\n        'Mintegral' AS adv_type\n    FROM mintegral_convs\n    LEFT JOIN mintegral_rate\n    ON mintegral_convs.partner = mintegral_rate.partner \n    AND mintegral_convs.date BETWEEN mintegral_rate.start_date AND mintegral_rate.end_date\n    AND mintegral_convs.platform = mintegral_rate.platform \n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(orders * rate_for_us,0) > 0\n    AND campaign_name != 'None'\n),\n\n-----------------------------Appnext--------------------------------\nappnext_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        type,\n        CASE \n            WHEN REGEXP_CONTAINS(campaign_name,'_p01_') THEN 'android'\n            WHEN REGEXP_CONTAINS(campaign_name,'_p02_') THEN 'ios'\n        END AS platform,\n        cost\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_appnext_cost`\n    WHERE\n        NOT REGEXP_CONTAINS(campaign_name,r'_u2_')\n        AND cost != 0\n),\n\nappnext_convs_without_cumulation AS (\n    SELECT \n        date,\n        CASE\n            WHEN af_cid = '514529' THEN 'realweb_p01_a999_c211_m404_u2_vprok_test1'\n            ELSE campaign_name\n        END AS campaign_name,\n        \n    CASE \n        WHEN REGEXP_CONTAINS(campaign_name, r'_ms_') THEN 'Mobisharks'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tl_') THEN '2leads'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_mx_') THEN 'MobX'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_sw_') THEN 'SW'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tm_') THEN 'Think Mobile'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_abc[_\\s]|_sf_') THEN 'Mediasurfer'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_a999') THEN 'In-house'\n    ELSE '-' END\n AS partner,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE (REGEXP_CONTAINS(campaign_name, r'_c211') OR REGEXP_CONTAINS(af_cid, r'514529'))\n    AND is_retargeting = FALSE\n    GROUP BY 1,2,3,4,5,6,7,8\n),\n\nappnext_convs_with_cumulation AS (\n    SELECT\n        date,\n        campaign_name,\n        partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        installs,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n        SUM(installs) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, installs)\n            AS cum_event_count_by_prt\n    FROM appnext_convs_without_cumulation\n),\n\nappnext_convs AS (\n    SELECT\n        m.date,\n        campaign_name,\n        m.partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        installs,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n        orders\n    FROM appnext_convs_with_cumulation m\n    LEFT JOIN inapp_orders io ON\n    m.campaign_name = io.campaign AND\n    m.date = io.date\n\n),\n\nappnext AS (\n    SELECT\n        COALESCE(appnext_convs.date,appnext_cost.date) AS date,\n        COALESCE(appnext_convs.campaign_name,appnext_cost.campaign_name) AS campaign_name,\n        COALESCE(appnext_convs.platform, appnext_cost.platform) AS platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        0 AS impressions,\n        0 AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(orders,0) AS orders,\n        appnext_cost.cost AS spend,\n        'Appnext' AS source,\n        'Appnext' AS adv_type\n    FROM appnext_convs\n    FULL OUTER JOIN appnext_cost\n    ON appnext_cost.date = appnext_convs.date\n       AND appnext_cost.campaign_name = appnext_convs.campaign_name\n       AND appnext_cost.platform = appnext_convs.platform   \n    WHERE \n        (COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) > 0\n        AND appnext_convs.campaign_name != 'None')\n        OR appnext_cost.cost != 0\n),\n\n----------------------Realweb CPA----------------------------\n\nrealwebcpa_rate AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        platform,\n        rate_for_us\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_rate_info`\n    WHERE type = 'UA'\n    AND source = 'realweb_cpa'\n),\n\nrealwebcpa_orders AS (\n    SELECT\n        date,\n        campaign,\n        orders\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_crm_orders_realwebcpa`\n),\n\nrealwebcpa_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        'Realweb CPA' AS partner,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions \n    WHERE is_retargeting = FALSE\n    AND REGEXP_CONTAINS(campaign_name, r'realwebcpa')\n    \n    \n    GROUP BY 1,2,3,4,5,6,7,8\n),\n\nrealwebcpa AS (\n    SELECT\n        rwc.date,\n        campaign_name,\n        rwc.platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        0 AS impressions,\n        0 AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(orders,0) AS orders,\n        CASE \n            WHEN rwc.date < '2022-10-01' and rwc.date > '2022-08-18' THEN COALESCE(first_purchase * 1200, 0)\n            WHEN rwc.date <= '2022-08-18' THEN COALESCE(first_purchase * 1000, 0)\n            WHEN rwc.date < '2022-11-01' and rwc.date >= '2022-10-01' THEN COALESCE(first_purchase * rate_for_us, 0)\n            ELSE COALESCE(orders * rate_for_us, 0)\n        END AS spend,\n        'Realweb CPA' AS source,\n        'Realweb CPA' AS adv_type\n    FROM realwebcpa_convs rwc\n    LEFT JOIN realwebcpa_rate rwr\n    ON rwc.partner = rwr.partner \n    AND rwc.date BETWEEN rwr.start_date AND rwr.end_date\n    AND rwc.platform = rwr.platform\n    LEFT JOIN realwebcpa_orders io ON\n    rwc.campaign_name = io.campaign AND\n    rwc.date = io.date\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(first_purchase * rate_for_us,0) > 0\n    AND campaign_name != 'None'\n),\n\n----------------------Xapads----------------------------\n\nxapads_rate AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        platform,\n        rate_for_us\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_rate_info`\n    WHERE type = 'UA'\n    AND source = 'Xapads'\n),\n\nxapads_limits_table AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        limits\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_partner_limits`\n    WHERE type = 'UA'\n    AND source = 'Xapads'\n),\n\nxapads_convs_without_cumulation AS (\n    SELECT \n        date,\n        campaign_name,\n        \n    CASE \n        WHEN REGEXP_CONTAINS(campaign_name, r'_ms_') THEN 'Mobisharks'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tl_') THEN '2leads'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_mx_') THEN 'MobX'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_sw_') THEN 'SW'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tm_') THEN 'Think Mobile'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_abc[_\\s]|_sf_') THEN 'Mediasurfer'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_a999') THEN 'In-house'\n    ELSE '-' END\n AS partner,\n        platform,\n        promo_type,\n        geo,\n        'UA' as campaign_type,\n        promo_search,\n        SUM(IF(event_name = 'install', event_count,0)) AS installs,\n        SUM(IF(event_name = 'first_purchase', event_revenue,0)) AS first_purchase_revenue,\n        SUM(IF(event_name = 'first_purchase',event_count, 0)) AS first_purchase,\n        SUM(IF(event_name = 'first_purchase', uniq_event_count, 0)) AS uniq_first_purchase,\n        SUM(IF(event_name = \"af_purchase\", event_revenue, 0)) AS revenue,\n        SUM(IF(event_name = \"af_purchase\", event_count, 0)) AS purchase,\n        SUM(IF(event_name = \"af_purchase\", uniq_event_count, 0)) AS uniq_purchase,\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'perekrestok_vprok_xapads')\n    AND is_retargeting = FALSE\n    GROUP BY 1,2,3,4,5,6,7,8\n),\n\nxapads_convs_with_cumulation AS (\n    SELECT\n        date,\n        campaign_name,\n        partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        installs,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n        SUM(installs) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, installs)\n            AS cum_event_count_by_prt\n    FROM xapads_convs_without_cumulation\n),\n\nxapads_convs AS (\n    SELECT\n        xapads_convs_with_cumulation.date,\n        campaign_name,\n        xapads_convs_with_cumulation.partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), installs, 0) AS installs,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n        orders\n    FROM xapads_convs_with_cumulation\n    LEFT JOIN xapads_limits_table\n    ON xapads_convs_with_cumulation.partner = xapads_limits_table.partner \n    AND xapads_convs_with_cumulation.date BETWEEN xapads_limits_table.start_date AND xapads_limits_table.end_date\n    LEFT JOIN inapp_orders io ON\n    xapads_convs_with_cumulation.campaign_name = io.campaign AND\n    xapads_convs_with_cumulation.date = io.date\n\n),\n\nxapads AS (\n    SELECT\n        date,\n        campaign_name,\n        xapads_convs.platform AS platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        0 AS impressions,\n        0 AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(orders,0) AS orders,\n        COALESCE(orders * rate_for_us,0)  AS spend,\n        'Xapads' AS source,\n        'Xapads' AS adv_type\n    FROM xapads_convs\n    LEFT JOIN xapads_rate\n    ON xapads_convs.partner = xapads_rate.partner \n    AND xapads_convs.date BETWEEN xapads_rate.start_date AND xapads_rate.end_date\n    AND xapads_convs.platform = xapads_rate.platform \n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(first_purchase * rate_for_us,0) > 0\n    AND campaign_name != 'None'\n),\n\n\n\n----------------------final----------------------------\n\nunions AS (\n    SELECT * FROM yandex\n    UNION ALL \n    SELECT * FROM mt\n    UNION ALL  \n    SELECT * FROM tiktok\n    UNION ALL\n    SELECT * FROM asa\n    WHERE date <= '2022-08-31'\n    UNION ALL\n    SELECT * FROM facebook\n    UNION ALL\n    SELECT * FROM google\n    UNION ALL\n    SELECT * FROM huawei\n    UNION ALL\n    SELECT * FROM vk\n    UNION ALL\n    SELECT * FROM inapp\n    UNION ALL\n    SELECT * FROM xiaomi\n    UNION ALL\n    SELECT * FROM zen\n    UNION ALL\n    SELECT * FROM realwebcpa\n    UNION ALL\n    SELECT * FROM bigo_ads\n    WHERE date <= '2022-08-31'\n    UNION ALL\n    SELECT * FROM xapads\n    UNION ALL\n    SELECT * FROM mintegral\n    UNION ALL\n    SELECT * FROM appnext\n),\n\nfinal AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        promo_search,\n        impressions,\n        clicks,\n        installs,\n        revenue,\n        purchase,\n        uniq_purchase,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        orders,\n        spend,\n        source,\n        \n    CASE \n        WHEN REGEXP_CONTAINS(campaign_name, r'[\\[_]cpi[\\]_]') OR source = 'Apple Search Ads' THEN 'CPI'\n        WHEN REGEXP_CONTAINS(campaign_name, r'[\\[_]cpa[\\]_]') OR REGEXP_CONTAINS(campaign_name, r'^realwebcpa') THEN 'CPA'\n        WHEN REGEXP_CONTAINS(campaign_name, r'[\\[_]cpc[\\]_]') THEN 'CPC'\n        WHEN REGEXP_CONTAINS(campaign_name, r'[\\[_]cpm[\\]_]') THEN 'CPM'\n        WHEN REGEXP_CONTAINS(campaign_name, r'[\\[_]cpo[\\]_]') THEN 'CPO'\n    ELSE '\u041d\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043e' END\n AS conversion_source_type,\n        adv_type\n    FROM unions\n)\n\nSELECT \n    date,\n    campaign_name,\n    platform,\n    promo_type,\n    geo,\n    campaign_type,\n    promo_search,\n    impressions,\n    clicks,\n    installs,\n    revenue,\n    purchase,\n    uniq_purchase,\n    first_purchase_revenue,\n    first_purchase,\n    uniq_first_purchase,\n    orders,\n    spend,\n    source,\n    'Other' as base,\n    conversion_source_type,\n    adv_type\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`dim_ua`"}, "model.perekrestokvprok.dim_ua_agg": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.promo_type", "macro.perekrestokvprok.geo", "macro.perekrestokvprok.platform", "macro.perekrestokvprok.partner", "macro.perekrestokvprok.conversion_source_type"], "nodes": ["model.perekrestokvprok.stg_af_ua_partners_by_date", "model.perekrestokvprok.stg_facebook_cab_sheets", "model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.int_yandex_cab_meta", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.stg_tiktok_cab_meta", "model.perekrestokvprok.stg_asa_cab_sheets", "model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.stg_google_cab_sheets", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_partner_limits"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_ua_agg"], "unique_id": "model.perekrestokvprok.dim_ua_agg", "raw_code": "/* \r\n\u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043b\u0443\u0447\u0448\u0435 \u0437\u0430\u0433\u043b\u044f\u043d\u0443\u0442\u044c \u0441\u044e\u0434\u0430: https://github.com/realweb-msk/perekrestokvprok-dbt\r\n\u0438\u043b\u0438 \u0441\u044e\u0434\u0430: https://brave-hermann-395dc3.netlify.app/#!/model/model.perekrestokvprok.dim_ua_agg\r\n*/\r\n\r\n\r\nWITH af_conversions AS (\r\n    SELECT\r\n        date,\r\n        media_source AS mediasource,\r\n        campaign_name,\r\n        report_type AS campaign_type,\r\n        platform,\r\n        {{ promo_type('campaign_name') }} as promo_type,\r\n        {{ geo('campaign_name') }} AS geo,\r\n        impressions,\r\n        clicks,\r\n        installs,\r\n        uniq_purchase,\r\n        purchase,\r\n        revenue,\r\n        uniq_first_purchase,\r\n        first_purchase,\r\n        first_purchase_revenue\r\n    FROM  {{ ref('stg_af_ua_partners_by_date') }}\r\n),\r\n\r\n----------------------- facebook -------------------------\r\n\r\nfacebook_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\r\n        campaign_type,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('stg_facebook_cab_sheets') }}\r\n    --{{ ref('stg_facebook_cab_meta') }}\r\n    WHERE campaign_type = 'UA'\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nfacebook_convs AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        installs,\r\n        uniq_purchase,\r\n        purchase,\r\n        revenue,\r\n        uniq_first_purchase,\r\n        first_purchase,\r\n        first_purchase_revenue\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_fb')\r\n),\r\n\r\nfacebook AS (\r\n    SELECT\r\n        COALESCE(facebook_convs.date, facebook_cost.date) AS date,\r\n        COALESCE(facebook_convs.campaign_name, facebook_cost.campaign_name) AS campaign_name,\r\n        COALESCE(facebook_convs.platform, facebook_cost.platform) AS platform,\r\n        COALESCE(facebook_convs.promo_type, facebook_cost.promo_type) AS promo_type,\r\n        COALESCE(facebook_convs.geo, facebook_cost.geo) AS geo,\r\n        COALESCE(facebook_convs.campaign_type, facebook_cost.campaign_type) AS campaign_type,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        COALESCE(spend,0) AS spend,\r\n        'Facebook' AS source,\r\n        'social' AS adv_type\r\n    FROM facebook_convs\r\n    FULL OUTER JOIN facebook_cost\r\n    ON facebook_convs.date = facebook_cost.date \r\n    AND facebook_convs.campaign_name = facebook_cost.campaign_name\r\n    AND facebook_convs.promo_type = facebook_cost.promo_type\r\n    AND facebook_convs.geo = facebook_cost.geo\r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(facebook_convs.campaign_name, facebook_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- yandex -------------------------\r\n\r\nyandex_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\r\n        campaign_type,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('int_yandex_cab_meta') }}\r\n    WHERE campaign_type = 'UA'\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nyandex_convs AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        installs,\r\n        uniq_purchase,\r\n        purchase,\r\n        revenue,\r\n        uniq_first_purchase,\r\n        first_purchase,\r\n        first_purchase_revenue\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_ya')\r\n    --AND NOT REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\r\n),\r\n\r\nyandex AS (\r\n    SELECT\r\n        COALESCE(yandex_convs.date, yandex_cost.date) AS date,\r\n        COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) AS campaign_name,\r\n        COALESCE(yandex_convs.platform, yandex_cost.platform) AS platform,\r\n        COALESCE(yandex_convs.promo_type, yandex_cost.promo_type) AS promo_type,\r\n        COALESCE(yandex_convs.geo, yandex_cost.geo) AS geo,\r\n        COALESCE(yandex_convs.campaign_type, yandex_cost.campaign_type) AS campaign_type,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        COALESCE(spend,0) AS spend,\r\n        '\u042f\u043d\u0434\u0435\u043a\u0441.\u0414\u0438\u0440\u0435\u043a\u0442' AS source,\r\n        'context' AS adv_type\r\n    FROM yandex_convs\r\n    FULL OUTER JOIN yandex_cost\r\n    ON yandex_convs.date = yandex_cost.date \r\n    AND yandex_convs.campaign_name = yandex_cost.campaign_name\r\n    AND yandex_convs.promo_type = yandex_cost.promo_type\r\n    AND yandex_convs.geo = yandex_cost.geo\r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- mytarget -------------------------\r\n\r\nmt_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\r\n        campaign_type,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('int_mytarget_cab_meta') }}\r\n    WHERE campaign_type = 'UA'\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nmt_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        installs,\r\n        uniq_purchase,\r\n        purchase,\r\n        revenue,\r\n        uniq_first_purchase,\r\n        first_purchase,\r\n        first_purchase_revenue\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_mt')\r\n    --AND REGEXP_CONTAINS(campaign_name, r'new')\r\n),\r\n\r\nmt AS (\r\n    SELECT\r\n        COALESCE(mt_convs.date, mt_cost.date) AS date,\r\n        COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) AS campaign_name,\r\n        COALESCE(mt_convs.platform, mt_cost.platform) AS platform,\r\n        COALESCE(mt_convs.promo_type, mt_cost.promo_type) AS promo_type,\r\n        COALESCE(mt_convs.geo, mt_cost.geo) AS geo,\r\n        COALESCE(mt_convs.campaign_type, mt_cost.campaign_type) AS campaign_type,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        COALESCE(spend,0) AS spend,\r\n        'MyTarget' AS source,\r\n        'social' AS adv_type\r\n    FROM mt_convs\r\n    FULL OUTER JOIN mt_cost\r\n    ON mt_convs.date = mt_cost.date \r\n    AND mt_convs.campaign_name = mt_cost.campaign_name\r\n    AND mt_convs.promo_type = mt_cost.promo_type\r\n    AND mt_convs.geo = mt_cost.geo\r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- tiktok -------------------------\r\n\r\ntiktok_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\r\n        campaign_type,\r\n        SUM(IF(campaign_type = 'UA',impressions,0)) AS impressions,\r\n        SUM(IF(campaign_type = 'UA',clicks,0)) AS clicks,\r\n        SUM(IF(campaign_type = 'UA',spend,0)) AS spend,\r\n        --SUM(purchase) AS purchase,\r\n        --SUM(first_purchase) AS first_purchase\r\n    FROM {{ ref('stg_tiktok_cab_meta') }}\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\ntiktok_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        installs,\r\n        uniq_purchase,\r\n        purchase,\r\n        revenue,\r\n        uniq_first_purchase,\r\n        first_purchase,\r\n        first_purchase_revenue\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_tiktok')\r\n    --AND NOT REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\r\n),\r\n\r\ntiktok AS (\r\n    SELECT\r\n        COALESCE(tiktok_convs.date, tiktok_cost.date) AS date,\r\n        COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) AS campaign_name,\r\n        COALESCE(tiktok_convs.platform, tiktok_cost.platform) AS platform,\r\n        COALESCE(tiktok_convs.promo_type, tiktok_cost.promo_type) AS promo_type,\r\n        COALESCE(tiktok_convs.geo, tiktok_cost.geo) AS geo,\r\n        COALESCE(tiktok_convs.campaign_type, tiktok_cost.campaign_type) AS campaign_type,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        COALESCE(spend,0) AS spend,\r\n        'TikTok' AS source,\r\n        'social' AS adv_type\r\n    FROM tiktok_convs\r\n    FULL OUTER JOIN tiktok_cost\r\n    ON tiktok_convs.date = tiktok_cost.date \r\n    AND tiktok_convs.campaign_name = tiktok_cost.campaign_name\r\n    AND tiktok_convs.promo_type = tiktok_cost.promo_type\r\n    AND tiktok_convs.geo = tiktok_cost.geo\r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- apple search ads -------------------------\r\n\r\nasa_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        'ios' as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\r\n        campaign_type,\r\n        SUM(meta.impressions) AS impressions,\r\n        SUM(sheet.clicks) AS clicks,\r\n        SUM(sheet.spend) AS spend\r\n    FROM {{ ref('stg_asa_cab_sheets') }} sheet\r\n    --{{ ref('int_asa_cab_meta') }}\r\n    LEFT JOIN {{ ref('int_asa_cab_meta') }} meta\r\n    USING(date, campaign_name, campaign_type, adset_name)\r\n    WHERE campaign_type = 'UA'\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nasa_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        installs,\r\n        uniq_purchase,\r\n        purchase,\r\n        revenue,\r\n        uniq_first_purchase,\r\n        first_purchase,\r\n        first_purchase_revenue\r\n    FROM af_conversions\r\n    WHERE \r\n    --NOT REGEXP_CONTAINS(campaign_name, r'\\(r\\)') AND \r\n    (\r\n        REGEXP_CONTAINS(campaign_name, r'\\(exact\\)|\u0437\u043e\u043e') OR\r\n        mediasource = 'Apple Search Ads'\r\n    )\r\n),\r\n\r\nasa AS (\r\n    SELECT\r\n        COALESCE(asa_convs.date, asa_cost.date) AS date,\r\n        COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) AS campaign_name,\r\n        COALESCE(asa_convs.platform, asa_cost.platform) AS platform,\r\n        COALESCE(asa_convs.promo_type, asa_cost.promo_type) AS promo_type,\r\n        COALESCE(asa_convs.geo, asa_cost.geo) AS geo,\r\n        COALESCE(asa_convs.campaign_type, asa_cost.campaign_type) AS campaign_type,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        COALESCE(spend,0) AS spend,\r\n        'Apple Search Ads' AS source,\r\n        'context' AS adv_type\r\n    FROM asa_convs\r\n    FULL OUTER JOIN asa_cost\r\n    ON asa_convs.date = asa_cost.date \r\n    AND asa_convs.campaign_name = asa_cost.campaign_name\r\n    AND asa_convs.promo_type = asa_cost.promo_type\r\n    AND asa_convs.geo = asa_cost.geo\r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- google -------------------------\r\n\r\ngoogle_cost AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\r\n        campaign_type,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spend) AS spend,\r\n        SUM(IF({{ platform('campaign_name') }} = 'ios', installs, NULL)) AS installs\r\n    FROM {{ ref('stg_google_cab_sheets') }}\r\n    WHERE campaign_type = 'UA'\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    AND campaign_name NOT IN (\r\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\r\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\ngoogle_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        installs,\r\n        uniq_purchase,\r\n        purchase,\r\n        revenue,\r\n        uniq_first_purchase,\r\n        first_purchase,\r\n        first_purchase_revenue\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_uac')\r\n    --AND campaign_name NOT IN (\r\n    --        'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\r\n    --        'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]')\r\n),\r\n\r\ngoogle AS (\r\n    SELECT\r\n        COALESCE(google_convs.date, google_cost.date) AS date,\r\n        COALESCE(google_convs.campaign_name, google_cost.campaign_name) AS campaign_name,\r\n        COALESCE(google_convs.platform, google_cost.platform) AS platform,\r\n        COALESCE(google_convs.promo_type, google_cost.promo_type) AS promo_type,\r\n        COALESCE(google_convs.geo, google_cost.geo) AS geo,\r\n        COALESCE(google_convs.campaign_type, google_cost.campaign_type) AS campaign_type,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(google_cost.installs,google_convs.installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        COALESCE(spend,0) AS spend,\r\n        'Google Ads' AS source,\r\n        'context' AS adv_type\r\n    FROM google_convs\r\n    FULL OUTER JOIN google_cost\r\n    ON google_convs.date = google_cost.date \r\n    AND google_convs.campaign_name = google_cost.campaign_name\r\n    AND google_convs.promo_type = google_cost.promo_type\r\n    AND google_convs.geo = google_cost.geo\r\n    WHERE \r\n        COALESCE(google_cost.installs,google_convs.installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(google_convs.campaign_name, google_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------- huawei -------------------------\r\n\r\nhuawei_cost AS (\r\n    ---- TODO: \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0430 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043a\u043e\u0441\u0442\u043e\u0432 -----\r\n    SELECT\r\n        DATE('2010-12-31') date,\r\n        campaign_name,\r\n        {{ platform('campaign_name') }} as platform,\r\n        {{ promo_type('campaign_name', 'adset_name') }} as promo_type,\r\n        {{ geo('campaign_name', 'adset_name') }} AS geo,\r\n        campaign_type,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spend) AS spend\r\n    FROM {{ ref('int_mytarget_cab_meta') }}\r\n    WHERE campaign_type = 'UA'\r\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\r\n    GROUP BY 1,2,3,4,5,6\r\n),\r\n\r\nhuawei_convs AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        installs,\r\n        uniq_purchase,\r\n        purchase,\r\n        revenue,\r\n        uniq_first_purchase,\r\n        first_purchase,\r\n        first_purchase_revenue\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_hw')\r\n),\r\n\r\nhuawei AS (\r\n    SELECT\r\n        COALESCE(huawei_convs.date, huawei_cost.date) AS date,\r\n        COALESCE(huawei_convs.campaign_name, huawei_cost.campaign_name) AS campaign_name,\r\n        COALESCE(huawei_convs.platform, huawei_cost.platform) AS platform,\r\n        COALESCE(huawei_convs.promo_type, huawei_cost.promo_type) AS promo_type,\r\n        COALESCE(huawei_convs.geo, huawei_cost.geo) AS geo,\r\n        COALESCE(huawei_convs.campaign_type, huawei_cost.campaign_type) AS campaign_type,\r\n        COALESCE(impressions,0) AS impressions,\r\n        COALESCE(clicks,0) AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        COALESCE(spend,0) AS spend,\r\n        'Huawei' AS source,\r\n        'context' AS adv_type\r\n    FROM huawei_convs\r\n    FULL OUTER JOIN huawei_cost\r\n    ON huawei_convs.date = huawei_cost.date \r\n    AND huawei_convs.campaign_name = huawei_cost.campaign_name\r\n    AND huawei_convs.promo_type = huawei_cost.promo_type\r\n    AND huawei_convs.geo = huawei_cost.geo\r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(spend,0) > 0\r\n    AND COALESCE(huawei_convs.campaign_name, huawei_cost.campaign_name) != 'None'\r\n),\r\n\r\n----------------------inapp----------------------------\r\n\r\nrate AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        platform,\r\n        rate_for_us\r\nFROM {{ ref('stg_rate_info') }}\r\nWHERE type = 'UA'\r\n),\r\n\r\nlimits_table AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        limits\r\n    FROM {{ ref('stg_partner_limits') }}\r\n    WHERE type = 'UA'\r\n),\r\n\r\ninapp_convs_without_cumulation AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        {{ partner('campaign_name') }} AS partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        installs,\r\n        uniq_purchase,\r\n        purchase,\r\n        revenue,\r\n        uniq_first_purchase,\r\n        first_purchase,\r\n        first_purchase_revenue\r\n    FROM af_conversions\r\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_inapp')\r\n),\r\n\r\ninapp_convs_with_cumulation AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        installs,\r\n        first_purchase_revenue,\r\n        first_purchase,\r\n        uniq_first_purchase,\r\n        revenue,\r\n        purchase,\r\n        uniq_purchase,\r\n        SUM(first_purchase) \r\n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, first_purchase_revenue)\r\n            AS cum_event_count_by_prt\r\n    FROM inapp_convs_without_cumulation\r\n),\r\n\r\ninapp_convs AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        inapp_convs_with_cumulation.partner,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        installs,\r\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), first_purchase_revenue, 0) AS first_purchase_revenue,\r\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), first_purchase, 0) AS first_purchase,\r\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), uniq_first_purchase, 0) AS uniq_first_purchase,\r\n        revenue,\r\n        purchase,\r\n        uniq_purchase,\r\n    FROM inapp_convs_with_cumulation\r\n    LEFT JOIN limits_table\r\n    ON inapp_convs_with_cumulation.partner = limits_table.partner \r\n    AND inapp_convs_with_cumulation.date BETWEEN limits_table.start_date AND limits_table.end_date\r\n),\r\n\r\ninapp AS (\r\n    SELECT\r\n        date,\r\n        campaign_name,\r\n        inapp_convs.platform AS platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        0 AS impressions,\r\n        0 AS clicks,\r\n        COALESCE(installs,0) AS installs,\r\n        COALESCE(revenue,0) AS revenue,\r\n        COALESCE(purchase,0) AS purchase,\r\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\r\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\r\n        COALESCE(first_purchase,0) AS first_purchase,\r\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\r\n        COALESCE(first_purchase * rate_for_us,0)  AS spend,\r\n        'inapp' AS source,\r\n        'inapp' AS adv_type\r\n    FROM inapp_convs\r\n    LEFT JOIN rate\r\n    ON inapp_convs.partner = rate.partner \r\n    AND inapp_convs.date BETWEEN rate.start_date AND rate.end_date\r\n    AND inapp_convs.platform = rate.platform \r\n    WHERE \r\n        COALESCE(installs,0) + \r\n        COALESCE(revenue,0) + \r\n        COALESCE(purchase,0) + \r\n        COALESCE(uniq_purchase,0) +\r\n        COALESCE(first_purchase_revenue,0) +\r\n        COALESCE(first_purchase,0) + \r\n        COALESCE(uniq_first_purchase,0) +\r\n        COALESCE(first_purchase * rate_for_us,0) > 0\r\n    AND campaign_name != 'None'\r\n),\r\n\r\n----------------------final----------------------------\r\n\r\nunions AS (\r\n    SELECT * FROM yandex\r\n    UNION ALL \r\n    SELECT * FROM mt\r\n    UNION ALL  \r\n    SELECT * FROM tiktok\r\n    UNION ALL\r\n    SELECT * FROM asa\r\n    WHERE date <= '2022-08-31'\r\n    UNION ALL\r\n    SELECT * FROM facebook\r\n    UNION ALL\r\n    SELECT * FROM google\r\n    UNION ALL\r\n    SELECT * FROM huawei\r\n    WHERE date != '2010-12-31'\r\n    UNION ALL\r\n    SELECT * FROM inapp\r\n),\r\n\r\nfinal AS (\r\n    SELECT \r\n        date,\r\n        campaign_name,\r\n        platform,\r\n        promo_type,\r\n        geo,\r\n        campaign_type,\r\n        impressions,\r\n        clicks,\r\n        installs,\r\n        revenue,\r\n        purchase,\r\n        uniq_purchase,\r\n        first_purchase_revenue,\r\n        first_purchase,\r\n        uniq_first_purchase,\r\n        spend,\r\n        source,\r\n        {{ conversion_source_type('campaign_name', 'source') }} AS conversion_source_type,\r\n        adv_type\r\n    FROM unions\r\n)\r\n\r\nSELECT \r\n    date,\r\n    campaign_name,\r\n    platform,\r\n    promo_type,\r\n    geo,\r\n    campaign_type,\r\n    impressions,\r\n    clicks,\r\n    installs,\r\n    revenue,\r\n    purchase,\r\n    uniq_purchase,\r\n    first_purchase_revenue,\r\n    first_purchase,\r\n    uniq_first_purchase,\r\n    spend,\r\n    source,\r\n    conversion_source_type,\r\n    adv_type\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "marts\\dim_ua_agg.sql", "original_file_path": "models\\marts\\dim_ua_agg.sql", "name": "dim_ua_agg", "alias": "dim_ua_agg", "checksum": {"name": "sha256", "checksum": "74fafc7ee48aecba3863826f711a9610a8aee6239ad0be5f967e27c231182331"}, "tags": [], "refs": [["stg_af_ua_partners_by_date"], ["stg_facebook_cab_sheets"], ["stg_facebook_cab_meta"], ["int_yandex_cab_meta"], ["int_mytarget_cab_meta"], ["stg_tiktok_cab_meta"], ["stg_asa_cab_sheets"], ["int_asa_cab_meta"], ["int_asa_cab_meta"], ["stg_google_cab_sheets"], ["int_mytarget_cab_meta"], ["stg_rate_info"], ["stg_partner_limits"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\marts\\dim_ua_agg.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\marts\\dim_ua_agg.sql", "deferred": false, "unrendered_config": {}, "created_at": 1676546308.8966868, "compiled_code": "/* \n\u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043b\u0443\u0447\u0448\u0435 \u0437\u0430\u0433\u043b\u044f\u043d\u0443\u0442\u044c \u0441\u044e\u0434\u0430: https://github.com/realweb-msk/perekrestokvprok-dbt\n\u0438\u043b\u0438 \u0441\u044e\u0434\u0430: https://brave-hermann-395dc3.netlify.app/#!/model/model.perekrestokvprok.dim_ua_agg\n*/\n\n\nWITH af_conversions AS (\n    SELECT\n        date,\n        media_source AS mediasource,\n        campaign_name,\n        report_type AS campaign_type,\n        platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, \"-\"], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        impressions,\n        clicks,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM  `perekrestokvprok-bq`.`dbt_production`.`stg_af_ua_partners_by_date`\n),\n\n----------------------- facebook -------------------------\n\nfacebook_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_facebook_cab_sheets`\n    --`perekrestokvprok-bq`.`dbt_production`.`stg_facebook_cab_meta`\n    WHERE campaign_type = 'UA'\n    GROUP BY 1,2,3,4,5,6\n),\n\nfacebook_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_fb')\n),\n\nfacebook AS (\n    SELECT\n        COALESCE(facebook_convs.date, facebook_cost.date) AS date,\n        COALESCE(facebook_convs.campaign_name, facebook_cost.campaign_name) AS campaign_name,\n        COALESCE(facebook_convs.platform, facebook_cost.platform) AS platform,\n        COALESCE(facebook_convs.promo_type, facebook_cost.promo_type) AS promo_type,\n        COALESCE(facebook_convs.geo, facebook_cost.geo) AS geo,\n        COALESCE(facebook_convs.campaign_type, facebook_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        'Facebook' AS source,\n        'social' AS adv_type\n    FROM facebook_convs\n    FULL OUTER JOIN facebook_cost\n    ON facebook_convs.date = facebook_cost.date \n    AND facebook_convs.campaign_name = facebook_cost.campaign_name\n    AND facebook_convs.promo_type = facebook_cost.promo_type\n    AND facebook_convs.geo = facebook_cost.geo\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(facebook_convs.campaign_name, facebook_cost.campaign_name) != 'None'\n),\n\n----------------------- yandex -------------------------\n\nyandex_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`int_yandex_cab_meta`\n    WHERE campaign_type = 'UA'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nyandex_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_ya')\n    --AND NOT REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n),\n\nyandex AS (\n    SELECT\n        COALESCE(yandex_convs.date, yandex_cost.date) AS date,\n        COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) AS campaign_name,\n        COALESCE(yandex_convs.platform, yandex_cost.platform) AS platform,\n        COALESCE(yandex_convs.promo_type, yandex_cost.promo_type) AS promo_type,\n        COALESCE(yandex_convs.geo, yandex_cost.geo) AS geo,\n        COALESCE(yandex_convs.campaign_type, yandex_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        '\u042f\u043d\u0434\u0435\u043a\u0441.\u0414\u0438\u0440\u0435\u043a\u0442' AS source,\n        'context' AS adv_type\n    FROM yandex_convs\n    FULL OUTER JOIN yandex_cost\n    ON yandex_convs.date = yandex_cost.date \n    AND yandex_convs.campaign_name = yandex_cost.campaign_name\n    AND yandex_convs.promo_type = yandex_cost.promo_type\n    AND yandex_convs.geo = yandex_cost.geo\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(yandex_convs.campaign_name, yandex_cost.campaign_name) != 'None'\n),\n\n----------------------- mytarget -------------------------\n\nmt_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`int_mytarget_cab_meta`\n    WHERE campaign_type = 'UA'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nmt_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_mt')\n    --AND REGEXP_CONTAINS(campaign_name, r'new')\n),\n\nmt AS (\n    SELECT\n        COALESCE(mt_convs.date, mt_cost.date) AS date,\n        COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) AS campaign_name,\n        COALESCE(mt_convs.platform, mt_cost.platform) AS platform,\n        COALESCE(mt_convs.promo_type, mt_cost.promo_type) AS promo_type,\n        COALESCE(mt_convs.geo, mt_cost.geo) AS geo,\n        COALESCE(mt_convs.campaign_type, mt_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        'MyTarget' AS source,\n        'social' AS adv_type\n    FROM mt_convs\n    FULL OUTER JOIN mt_cost\n    ON mt_convs.date = mt_cost.date \n    AND mt_convs.campaign_name = mt_cost.campaign_name\n    AND mt_convs.promo_type = mt_cost.promo_type\n    AND mt_convs.geo = mt_cost.geo\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(mt_convs.campaign_name, mt_cost.campaign_name) != 'None'\n),\n\n----------------------- tiktok -------------------------\n\ntiktok_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        campaign_type,\n        SUM(IF(campaign_type = 'UA',impressions,0)) AS impressions,\n        SUM(IF(campaign_type = 'UA',clicks,0)) AS clicks,\n        SUM(IF(campaign_type = 'UA',spend,0)) AS spend,\n        --SUM(purchase) AS purchase,\n        --SUM(first_purchase) AS first_purchase\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_tiktok_cab_meta`\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\ntiktok_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_tiktok')\n    --AND NOT REGEXP_CONTAINS(campaign_name, r'_ret_|[_\\[]old[_\\]]')\n),\n\ntiktok AS (\n    SELECT\n        COALESCE(tiktok_convs.date, tiktok_cost.date) AS date,\n        COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) AS campaign_name,\n        COALESCE(tiktok_convs.platform, tiktok_cost.platform) AS platform,\n        COALESCE(tiktok_convs.promo_type, tiktok_cost.promo_type) AS promo_type,\n        COALESCE(tiktok_convs.geo, tiktok_cost.geo) AS geo,\n        COALESCE(tiktok_convs.campaign_type, tiktok_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        'TikTok' AS source,\n        'social' AS adv_type\n    FROM tiktok_convs\n    FULL OUTER JOIN tiktok_cost\n    ON tiktok_convs.date = tiktok_cost.date \n    AND tiktok_convs.campaign_name = tiktok_cost.campaign_name\n    AND tiktok_convs.promo_type = tiktok_cost.promo_type\n    AND tiktok_convs.geo = tiktok_cost.geo\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(tiktok_convs.campaign_name, tiktok_cost.campaign_name) != 'None'\n),\n\n----------------------- apple search ads -------------------------\n\nasa_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        'ios' as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        campaign_type,\n        SUM(meta.impressions) AS impressions,\n        SUM(sheet.clicks) AS clicks,\n        SUM(sheet.spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_asa_cab_sheets` sheet\n    --`perekrestokvprok-bq`.`dbt_production`.`int_asa_cab_meta`\n    LEFT JOIN `perekrestokvprok-bq`.`dbt_production`.`int_asa_cab_meta` meta\n    USING(date, campaign_name, campaign_type, adset_name)\n    WHERE campaign_type = 'UA'\n    GROUP BY 1,2,3,4,5,6\n),\n\nasa_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM af_conversions\n    WHERE \n    --NOT REGEXP_CONTAINS(campaign_name, r'\\(r\\)') AND \n    (\n        REGEXP_CONTAINS(campaign_name, r'\\(exact\\)|\u0437\u043e\u043e') OR\n        mediasource = 'Apple Search Ads'\n    )\n),\n\nasa AS (\n    SELECT\n        COALESCE(asa_convs.date, asa_cost.date) AS date,\n        COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) AS campaign_name,\n        COALESCE(asa_convs.platform, asa_cost.platform) AS platform,\n        COALESCE(asa_convs.promo_type, asa_cost.promo_type) AS promo_type,\n        COALESCE(asa_convs.geo, asa_cost.geo) AS geo,\n        COALESCE(asa_convs.campaign_type, asa_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        'Apple Search Ads' AS source,\n        'context' AS adv_type\n    FROM asa_convs\n    FULL OUTER JOIN asa_cost\n    ON asa_convs.date = asa_cost.date \n    AND asa_convs.campaign_name = asa_cost.campaign_name\n    AND asa_convs.promo_type = asa_cost.promo_type\n    AND asa_convs.geo = asa_cost.geo\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(asa_convs.campaign_name, asa_cost.campaign_name) != 'None'\n),\n\n----------------------- google -------------------------\n\ngoogle_cost AS (\n    SELECT\n        date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend,\n        SUM(IF(\n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n = 'ios', installs, NULL)) AS installs\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_google_cab_sheets`\n    WHERE campaign_type = 'UA'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    AND campaign_name NOT IN (\n            'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\n            'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]')\n    GROUP BY 1,2,3,4,5,6\n),\n\ngoogle_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_uac')\n    --AND campaign_name NOT IN (\n    --        'realweb_uac_2022 [p:and] [cpi] [mskspb] [new] [general] [darkstore] [purchase] [firebase]',\n    --        'realweb_uac_2022 [p:and] [cpi] [reg1] [new] [general] [darkstore] [purchase] [firebase]')\n),\n\ngoogle AS (\n    SELECT\n        COALESCE(google_convs.date, google_cost.date) AS date,\n        COALESCE(google_convs.campaign_name, google_cost.campaign_name) AS campaign_name,\n        COALESCE(google_convs.platform, google_cost.platform) AS platform,\n        COALESCE(google_convs.promo_type, google_cost.promo_type) AS promo_type,\n        COALESCE(google_convs.geo, google_cost.geo) AS geo,\n        COALESCE(google_convs.campaign_type, google_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(google_cost.installs,google_convs.installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        'Google Ads' AS source,\n        'context' AS adv_type\n    FROM google_convs\n    FULL OUTER JOIN google_cost\n    ON google_convs.date = google_cost.date \n    AND google_convs.campaign_name = google_cost.campaign_name\n    AND google_convs.promo_type = google_cost.promo_type\n    AND google_convs.geo = google_cost.geo\n    WHERE \n        COALESCE(google_cost.installs,google_convs.installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(google_convs.campaign_name, google_cost.campaign_name) != 'None'\n),\n\n----------------------- huawei -------------------------\n\nhuawei_cost AS (\n    ---- TODO: \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0430 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043a\u043e\u0441\u0442\u043e\u0432 -----\n    SELECT\n        DATE('2010-12-31') date,\n        campaign_name,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\n    ELSE 'no_platform' END\n as platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([campaign_name, adset_name], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        campaign_type,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spend) AS spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`int_mytarget_cab_meta`\n    WHERE campaign_type = 'UA'\n    AND REGEXP_CONTAINS(campaign_name, r'realweb')\n    GROUP BY 1,2,3,4,5,6\n),\n\nhuawei_convs AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_hw')\n),\n\nhuawei AS (\n    SELECT\n        COALESCE(huawei_convs.date, huawei_cost.date) AS date,\n        COALESCE(huawei_convs.campaign_name, huawei_cost.campaign_name) AS campaign_name,\n        COALESCE(huawei_convs.platform, huawei_cost.platform) AS platform,\n        COALESCE(huawei_convs.promo_type, huawei_cost.promo_type) AS promo_type,\n        COALESCE(huawei_convs.geo, huawei_cost.geo) AS geo,\n        COALESCE(huawei_convs.campaign_type, huawei_cost.campaign_type) AS campaign_type,\n        COALESCE(impressions,0) AS impressions,\n        COALESCE(clicks,0) AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(spend,0) AS spend,\n        'Huawei' AS source,\n        'context' AS adv_type\n    FROM huawei_convs\n    FULL OUTER JOIN huawei_cost\n    ON huawei_convs.date = huawei_cost.date \n    AND huawei_convs.campaign_name = huawei_cost.campaign_name\n    AND huawei_convs.promo_type = huawei_cost.promo_type\n    AND huawei_convs.geo = huawei_cost.geo\n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(spend,0) > 0\n    AND COALESCE(huawei_convs.campaign_name, huawei_cost.campaign_name) != 'None'\n),\n\n----------------------inapp----------------------------\n\nrate AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        platform,\n        rate_for_us\nFROM `perekrestokvprok-bq`.`dbt_production`.`stg_rate_info`\nWHERE type = 'UA'\n),\n\nlimits_table AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        limits\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_partner_limits`\n    WHERE type = 'UA'\n),\n\ninapp_convs_without_cumulation AS (\n    SELECT \n        date,\n        campaign_name,\n        \n    CASE \n        WHEN REGEXP_CONTAINS(campaign_name, r'_ms_') THEN 'Mobisharks'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tl_') THEN '2leads'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_mx_') THEN 'MobX'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_sw_') THEN 'SW'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_tm_') THEN 'Think Mobile'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_abc[_\\s]|_sf_') THEN 'Mediasurfer'\n        WHEN REGEXP_CONTAINS(campaign_name, r'_a999') THEN 'In-house'\n    ELSE '-' END\n AS partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        uniq_purchase,\n        purchase,\n        revenue,\n        uniq_first_purchase,\n        first_purchase,\n        first_purchase_revenue\n    FROM af_conversions\n    WHERE REGEXP_CONTAINS(campaign_name, r'realweb_inapp')\n),\n\ninapp_convs_with_cumulation AS (\n    SELECT\n        date,\n        campaign_name,\n        partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n        SUM(first_purchase) \n            OVER(PARTITION BY DATE_TRUNC(date, MONTH), partner ORDER BY date, first_purchase_revenue)\n            AS cum_event_count_by_prt\n    FROM inapp_convs_without_cumulation\n),\n\ninapp_convs AS (\n    SELECT\n        date,\n        campaign_name,\n        inapp_convs_with_cumulation.partner,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        installs,\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), first_purchase_revenue, 0) AS first_purchase_revenue,\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), first_purchase, 0) AS first_purchase,\n        IF(cum_event_count_by_prt <= COALESCE(limits, 1000000), uniq_first_purchase, 0) AS uniq_first_purchase,\n        revenue,\n        purchase,\n        uniq_purchase,\n    FROM inapp_convs_with_cumulation\n    LEFT JOIN limits_table\n    ON inapp_convs_with_cumulation.partner = limits_table.partner \n    AND inapp_convs_with_cumulation.date BETWEEN limits_table.start_date AND limits_table.end_date\n),\n\ninapp AS (\n    SELECT\n        date,\n        campaign_name,\n        inapp_convs.platform AS platform,\n        promo_type,\n        geo,\n        campaign_type,\n        0 AS impressions,\n        0 AS clicks,\n        COALESCE(installs,0) AS installs,\n        COALESCE(revenue,0) AS revenue,\n        COALESCE(purchase,0) AS purchase,\n        COALESCE(uniq_purchase,0) AS uniq_purchase,\n        COALESCE(first_purchase_revenue,0) AS first_purchase_revenue,\n        COALESCE(first_purchase,0) AS first_purchase,\n        COALESCE(uniq_first_purchase,0) AS uniq_first_purchase,\n        COALESCE(first_purchase * rate_for_us,0)  AS spend,\n        'inapp' AS source,\n        'inapp' AS adv_type\n    FROM inapp_convs\n    LEFT JOIN rate\n    ON inapp_convs.partner = rate.partner \n    AND inapp_convs.date BETWEEN rate.start_date AND rate.end_date\n    AND inapp_convs.platform = rate.platform \n    WHERE \n        COALESCE(installs,0) + \n        COALESCE(revenue,0) + \n        COALESCE(purchase,0) + \n        COALESCE(uniq_purchase,0) +\n        COALESCE(first_purchase_revenue,0) +\n        COALESCE(first_purchase,0) + \n        COALESCE(uniq_first_purchase,0) +\n        COALESCE(first_purchase * rate_for_us,0) > 0\n    AND campaign_name != 'None'\n),\n\n----------------------final----------------------------\n\nunions AS (\n    SELECT * FROM yandex\n    UNION ALL \n    SELECT * FROM mt\n    UNION ALL  \n    SELECT * FROM tiktok\n    UNION ALL\n    SELECT * FROM asa\n    WHERE date <= '2022-08-31'\n    UNION ALL\n    SELECT * FROM facebook\n    UNION ALL\n    SELECT * FROM google\n    UNION ALL\n    SELECT * FROM huawei\n    WHERE date != '2010-12-31'\n    UNION ALL\n    SELECT * FROM inapp\n),\n\nfinal AS (\n    SELECT \n        date,\n        campaign_name,\n        platform,\n        promo_type,\n        geo,\n        campaign_type,\n        impressions,\n        clicks,\n        installs,\n        revenue,\n        purchase,\n        uniq_purchase,\n        first_purchase_revenue,\n        first_purchase,\n        uniq_first_purchase,\n        spend,\n        source,\n        \n    CASE \n        WHEN REGEXP_CONTAINS(campaign_name, r'[\\[_]cpi[\\]_]') OR source = 'Apple Search Ads' THEN 'CPI'\n        WHEN REGEXP_CONTAINS(campaign_name, r'[\\[_]cpa[\\]_]') OR REGEXP_CONTAINS(campaign_name, r'^realwebcpa') THEN 'CPA'\n        WHEN REGEXP_CONTAINS(campaign_name, r'[\\[_]cpc[\\]_]') THEN 'CPC'\n        WHEN REGEXP_CONTAINS(campaign_name, r'[\\[_]cpm[\\]_]') THEN 'CPM'\n        WHEN REGEXP_CONTAINS(campaign_name, r'[\\[_]cpo[\\]_]') THEN 'CPO'\n    ELSE '\u041d\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043e' END\n AS conversion_source_type,\n        adv_type\n    FROM unions\n)\n\nSELECT \n    date,\n    campaign_name,\n    platform,\n    promo_type,\n    geo,\n    campaign_type,\n    impressions,\n    clicks,\n    installs,\n    revenue,\n    purchase,\n    uniq_purchase,\n    first_purchase_revenue,\n    first_purchase,\n    uniq_first_purchase,\n    spend,\n    source,\n    conversion_source_type,\n    adv_type\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`dim_ua_agg`"}, "model.perekrestokvprok.dim_ua_crm": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.promo_type", "macro.perekrestokvprok.geo"], "nodes": ["model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_promocode_client_data", "model.perekrestokvprok.stg_promo_sheets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "dim_ua_crm"], "unique_id": "model.perekrestokvprok.dim_ua_crm", "raw_code": "WITH af_orders AS (\r\n    SELECT\r\n        REGEXP_EXTRACT(REGEXP_REPLACE(event_value,'\"',''), 'af_order_id:(.*?),') AS order_id\r\n    FROM  {{ ref('stg_af_client_data') }}\r\n    WHERE event_name = \"af_purchase\"\r\n),\r\n\r\nclient_data AS (\r\n    SELECT\r\n        order_date,\r\n        promo_name,\r\n        '-' adset_name,\r\n        promo_code,\r\n        order_id,\r\n        platform,\r\n        revenue,\r\n        order_count\r\n    FROM {{ ref('stg_promocode_client_data') }}\r\n),\r\n\r\npromo_data AS (\r\n    SELECT\r\n        date_start,\r\n        date_end,\r\n        promocode,\r\n        type,\r\n        channel\r\n    FROM {{ ref('stg_promo_sheets') }}\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        order_date AS date,\r\n        promo_name AS campaign_name,\r\n        platform,\r\n        {{ promo_type('promo_name', 'adset_name') }} as promo_type,\r\n        {{ geo('promo_name', 'adset_name') }} AS geo,\r\n        'UA' AS campaign_type,\r\n        0 AS impressions,\r\n        0 AS clicks,\r\n        0 AS installs,\r\n        SUM(revenue) AS revenue,\r\n        SUM(order_count) AS purchase,\r\n        0 AS uniq_purchase,\r\n        0 AS first_purchase_revenue,\r\n        0 AS first_purchase,\r\n        0 AS uniq_first_purchase,\r\n        0 AS spend,\r\n        channel AS source,\r\n        'CRM' AS conversion_source_type,\r\n        '-' AS adv_type\r\n    FROM client_data\r\n    LEFT JOIN promo_data\r\n    ON LOWER(client_data.promo_code) = LOWER(promo_data.promocode)\r\n    AND DATE(client_data.order_date) BETWEEN promo_data.date_start AND promo_data.date_end\r\n    WHERE type = 'uac'\r\n    AND order_id NOT IN (\r\n        SELECT DISTINCT order_id\r\n        FROM af_orders\r\n    )\r\n    GROUP BY 1,2,3,4,5,17\r\n)\r\n\r\nSELECT \r\n    date,\r\n    campaign_name,\r\n    platform,\r\n    promo_type,\r\n    geo,\r\n    campaign_type,\r\n    impressions,\r\n    clicks,\r\n    installs,\r\n    revenue,\r\n    purchase,\r\n    uniq_purchase,\r\n    first_purchase_revenue,\r\n    first_purchase,\r\n    uniq_first_purchase,\r\n    spend,\r\n    source,\r\n    conversion_source_type,\r\n    adv_type\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "marts\\dim_ua_crm.sql", "original_file_path": "models\\marts\\dim_ua_crm.sql", "name": "dim_ua_crm", "alias": "dim_ua_crm", "checksum": {"name": "sha256", "checksum": "b81267451971f281d03411c545aa3e98999831abfaeed80c2df3d66f6482b486"}, "tags": [], "refs": [["stg_af_client_data"], ["stg_promocode_client_data"], ["stg_promo_sheets"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\marts\\dim_ua_crm.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\marts\\dim_ua_crm.sql", "deferred": false, "unrendered_config": {}, "created_at": 1676546308.9154751, "compiled_code": "WITH af_orders AS (\n    SELECT\n        REGEXP_EXTRACT(REGEXP_REPLACE(event_value,'\"',''), 'af_order_id:(.*?),') AS order_id\n    FROM  `perekrestokvprok-bq`.`dbt_production`.`stg_af_client_data`\n    WHERE event_name = \"af_purchase\"\n),\n\nclient_data AS (\n    SELECT\n        order_date,\n        promo_name,\n        '-' adset_name,\n        promo_code,\n        order_id,\n        platform,\n        revenue,\n        order_count\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_promocode_client_data`\n),\n\npromo_data AS (\n    SELECT\n        date_start,\n        date_end,\n        promocode,\n        type,\n        channel\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_promo_sheets`\n),\n\nfinal AS (\n    SELECT\n        order_date AS date,\n        promo_name AS campaign_name,\n        platform,\n        \n    CASE\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name, adset_name],'')), r'promo.*regular') THEN 'promo regular'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name, adset_name],'')), r'promo.*global') THEN 'promo global'\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name, adset_name],'')), r'promo.*feed') THEN 'promo feed'\n    ELSE '-' END\n as promo_type,\n        \n    CASE\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name, adset_name], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name, adset_name], ' ')), r'spb') THEN '\u0421\u041f\u0431'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name, adset_name], ' ')), r'msk') THEN '\u041c\u0421\u041a'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name, adset_name], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name, adset_name], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([promo_name, adset_name], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\n AS geo,\n        'UA' AS campaign_type,\n        0 AS impressions,\n        0 AS clicks,\n        0 AS installs,\n        SUM(revenue) AS revenue,\n        SUM(order_count) AS purchase,\n        0 AS uniq_purchase,\n        0 AS first_purchase_revenue,\n        0 AS first_purchase,\n        0 AS uniq_first_purchase,\n        0 AS spend,\n        channel AS source,\n        'CRM' AS conversion_source_type,\n        '-' AS adv_type\n    FROM client_data\n    LEFT JOIN promo_data\n    ON LOWER(client_data.promo_code) = LOWER(promo_data.promocode)\n    AND DATE(client_data.order_date) BETWEEN promo_data.date_start AND promo_data.date_end\n    WHERE type = 'uac'\n    AND order_id NOT IN (\n        SELECT DISTINCT order_id\n        FROM af_orders\n    )\n    GROUP BY 1,2,3,4,5,17\n)\n\nSELECT \n    date,\n    campaign_name,\n    platform,\n    promo_type,\n    geo,\n    campaign_type,\n    impressions,\n    clicks,\n    installs,\n    revenue,\n    purchase,\n    uniq_purchase,\n    first_purchase_revenue,\n    first_purchase,\n    uniq_first_purchase,\n    spend,\n    source,\n    conversion_source_type,\n    adv_type\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`dim_ua_crm`"}, "model.perekrestokvprok.int_partner_limits": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.perekrestokvprok.stg_partner_limits"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "int_partner_limits"], "unique_id": "model.perekrestokvprok.int_partner_limits", "raw_code": "WITH source AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        limits,\r\n        type\r\n    FROM {{ ref('stg_partner_limits') }}\r\n),\r\n\r\nlimits_array AS (\r\n    SELECT \r\n        GENERATE_DATE_ARRAY(start_date,end_date) AS period, \r\n        partner,\r\n        limits,\r\n        type\r\n    FROM source\r\n)\r\n\r\nSELECT \r\n    period,\r\n    partner,\r\n    limits,\r\n    type\r\nFROM limits_array, UNNEST(period) AS period", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "marts\\int_partner_limits.sql", "original_file_path": "models\\marts\\int_partner_limits.sql", "name": "int_partner_limits", "alias": "int_partner_limits", "checksum": {"name": "sha256", "checksum": "8ebac238420f2657ff7d9afa824f853105db9692ae83274db7a0d81e68a5282f"}, "tags": [], "refs": [["stg_partner_limits"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\marts\\int_partner_limits.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\marts\\int_partner_limits.sql", "deferred": false, "unrendered_config": {}, "created_at": 1676546308.9227097, "compiled_code": "WITH source AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        limits,\n        type\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_partner_limits`\n),\n\nlimits_array AS (\n    SELECT \n        GENERATE_DATE_ARRAY(start_date,end_date) AS period, \n        partner,\n        limits,\n        type\n    FROM source\n)\n\nSELECT \n    period,\n    partner,\n    limits,\n    type\nFROM limits_array, UNNEST(period) AS period", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`int_partner_limits`"}, "model.perekrestokvprok.int_rate_for_inside": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.perekrestokvprok.stg_rate_info"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "marts", "int_rate_for_inside"], "unique_id": "model.perekrestokvprok.int_rate_for_inside", "raw_code": "WITH source_t AS (\r\n    SELECT\r\n        start_date,\r\n        end_date,\r\n        partner,\r\n        platform,\r\n        rate_for_partner,\r\n        rate_for_us,\r\n        plan_f_p,\r\n        type,\r\n        source,\r\n        base\r\n    FROM {{ ref('stg_rate_info') }}\r\n),\r\n\r\nrate_array AS (\r\n    SELECT \r\n        GENERATE_DATE_ARRAY(start_date,end_date) AS period, \r\n        partner,\r\n        platform,\r\n        rate_for_partner,\r\n        rate_for_us,\r\n        plan_f_p,\r\n        type,\r\n        source,\r\n        base\r\n    FROM source_t\r\n),\r\n\r\nrate AS (\r\n    SELECT\r\n        period,\r\n        partner,\r\n        platform,\r\n        rate_for_partner,\r\n        rate_for_us,\r\n        plan_f_p,\r\n        type,\r\n        source,\r\n        base,\r\n        rate_for_us * plan_f_p AS prt_budget,\r\n        SUM((rate_for_us - rate_for_partner) * plan_f_p) OVER(PARTITION BY period) AS plan_mrg,\r\n        SUM((rate_for_us - rate_for_partner) * plan_f_p) OVER(PARTITION BY period, partner) AS prt_plan_mrg,\r\n    FROM rate_array, UNNEST(period) AS period\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        period,\r\n        partner,\r\n        platform,\r\n        rate_for_partner,\r\n        rate_for_us,\r\n        plan_f_p,\r\n        type,\r\n        source,\r\n        base,\r\n        prt_budget,\r\n        plan_mrg,\r\n        prt_plan_mrg,\r\n    FROM rate\r\n)\r\n\r\nSELECT \r\n    period,\r\n    partner,\r\n    platform,\r\n    rate_for_partner,\r\n    rate_for_us,\r\n    plan_f_p,\r\n    type,\r\n    source,\r\n    base,\r\n    prt_budget,\r\n    plan_mrg,\r\n    prt_plan_mrg,\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "marts\\int_rate_for_inside.sql", "original_file_path": "models\\marts\\int_rate_for_inside.sql", "name": "int_rate_for_inside", "alias": "int_rate_for_inside", "checksum": {"name": "sha256", "checksum": "43ad724fe60c1883a119e332d276b987185ee2bf9b3fd2f3c1e3938cb233735b"}, "tags": [], "refs": [["stg_rate_info"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\marts\\int_rate_for_inside.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\marts\\int_rate_for_inside.sql", "deferred": false, "unrendered_config": {}, "created_at": 1676546308.9246495, "compiled_code": "WITH source_t AS (\n    SELECT\n        start_date,\n        end_date,\n        partner,\n        platform,\n        rate_for_partner,\n        rate_for_us,\n        plan_f_p,\n        type,\n        source,\n        base\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_rate_info`\n),\n\nrate_array AS (\n    SELECT \n        GENERATE_DATE_ARRAY(start_date,end_date) AS period, \n        partner,\n        platform,\n        rate_for_partner,\n        rate_for_us,\n        plan_f_p,\n        type,\n        source,\n        base\n    FROM source_t\n),\n\nrate AS (\n    SELECT\n        period,\n        partner,\n        platform,\n        rate_for_partner,\n        rate_for_us,\n        plan_f_p,\n        type,\n        source,\n        base,\n        rate_for_us * plan_f_p AS prt_budget,\n        SUM((rate_for_us - rate_for_partner) * plan_f_p) OVER(PARTITION BY period) AS plan_mrg,\n        SUM((rate_for_us - rate_for_partner) * plan_f_p) OVER(PARTITION BY period, partner) AS prt_plan_mrg,\n    FROM rate_array, UNNEST(period) AS period\n),\n\nfinal AS (\n    SELECT\n        period,\n        partner,\n        platform,\n        rate_for_partner,\n        rate_for_us,\n        plan_f_p,\n        type,\n        source,\n        base,\n        prt_budget,\n        plan_mrg,\n        prt_plan_mrg,\n    FROM rate\n)\n\nSELECT \n    period,\n    partner,\n    platform,\n    rate_for_partner,\n    rate_for_us,\n    plan_f_p,\n    type,\n    source,\n    base,\n    prt_budget,\n    plan_mrg,\n    prt_plan_mrg,\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`int_rate_for_inside`"}, "model.perekrestokvprok.int_asa_cab_meta": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.MetaCustom.apple_search_ads_ASA_cost"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_asa_cab_meta"], "unique_id": "model.perekrestokvprok.int_asa_cab_meta", "raw_code": "WITH source AS (\r\n    SELECT\r\n        Date,\r\n        metadata_campaignName,\r\n        impressions,\r\n        taps,\r\n        localSpend_amount\r\n    FROM {{ source('MetaCustom', 'apple_search_ads_ASA_cost') }}\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        Date AS date,\r\n        LOWER(metadata_campaignName) AS campaign_name,\r\n        IF(REGEXP_CONTAINS(metadata_campaignName, r'\\(R\\)'),'retargeting','UA') AS campaign_type,\r\n        '-' adset_name,\r\n        SUM(impressions) AS impressions,\r\n        SUM(taps) AS clicks,\r\n        SUM(SAFE_CAST(localSpend_amount AS FLOAT64)) AS spend\r\n    FROM source\r\n    GROUP BY 1,2,3\r\n)\r\n\r\nSELECT\r\n    date,\r\n    REGEXP_REPLACE(campaign_name, r'\\+|-', '_') AS campaign_name,\r\n    campaign_type,\r\n    adset_name,\r\n    impressions,\r\n    clicks,\r\n    spend\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\int_asa_cab_meta.sql", "original_file_path": "models\\staging\\int_asa_cab_meta.sql", "name": "int_asa_cab_meta", "alias": "int_asa_cab_meta", "checksum": {"name": "sha256", "checksum": "8f460d3aa44d670de94a5f4deac03f31b195275c6ca151d72f5e6674216f880d"}, "tags": [], "refs": [], "sources": [["MetaCustom", "apple_search_ads_ASA_cost"]], "metrics": [], "description": "\u0410\u0421\u0410 \u0438\u0437 \u043c\u0435\u0442\u044b", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\int_asa_cab_meta.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\int_asa_cab_meta.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676546309.3403773, "compiled_code": "WITH source AS (\n    SELECT\n        Date,\n        metadata_campaignName,\n        impressions,\n        taps,\n        localSpend_amount\n    FROM `perekrestokvprok-bq`.`MetaCustom`.`apple_search_ads_ASA_cost`\n),\n\nfinal AS (\n    SELECT\n        Date AS date,\n        LOWER(metadata_campaignName) AS campaign_name,\n        IF(REGEXP_CONTAINS(metadata_campaignName, r'\\(R\\)'),'retargeting','UA') AS campaign_type,\n        '-' adset_name,\n        SUM(impressions) AS impressions,\n        SUM(taps) AS clicks,\n        SUM(SAFE_CAST(localSpend_amount AS FLOAT64)) AS spend\n    FROM source\n    GROUP BY 1,2,3\n)\n\nSELECT\n    date,\n    REGEXP_REPLACE(campaign_name, r'\\+|-', '_') AS campaign_name,\n    campaign_type,\n    adset_name,\n    impressions,\n    clicks,\n    spend\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`int_asa_cab_meta`"}, "model.perekrestokvprok.int_google_cab_sheets": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data.google_ads_costs_and_installs", "model.perekrestokvprok.stg_google_cab_sheets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_google_cab_sheets"], "unique_id": "model.perekrestokvprok.int_google_cab_sheets", "raw_code": "WITH \r\ngoogle_sheet AS (\r\n    SELECT DISTINCT\r\n        date,\r\n        LOWER(campaign_name) campaign_name,\r\n        IF(REGEXP_CONTAINS(campaign_name, r'\\[old\\]'),'retargeting','UA') AS campaign_type,\r\n        adset_name,\r\n        costs,\r\n        installs,\r\n        clicks,\r\n        impressions\r\n    FROM {{ source('sheets_data', 'google_ads_costs_and_installs') }}\r\n    WHERE date IS NOT NULL\r\n),\r\n\r\ngoogle_storage AS (\r\n    SELECT DISTINCT\r\n        date,\r\n        campaign_name,\r\n        campaign_type,\r\n        adset_name,\r\n        spend,\r\n        installs,\r\n        clicks,\r\n        impressions\r\n    FROM {{ ref('stg_google_cab_sheets') }}\r\n    WHERE date < (\r\n        SELECT MIN(date)\r\n        FROM google_sheet\r\n    )\r\n),\r\n\r\nfinal AS (\r\n    SELECT *\r\n    FROM google_storage\r\n    UNION DISTINCT \r\n    SELECT *\r\n    FROM google_sheet\r\n)\r\n\r\nSELECT \r\n    date,\r\n    REGEXP_REPLACE(campaign_name, r'\\+|-', '_') AS campaign_name,\r\n    campaign_type,\r\n    adset_name,\r\n    spend,\r\n    installs,\r\n    clicks,\r\n    impressions\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\int_google_cab_sheets.sql", "original_file_path": "models\\staging\\int_google_cab_sheets.sql", "name": "int_google_cab_sheets", "alias": "int_google_cab_sheets", "checksum": {"name": "sha256", "checksum": "a1663cb3bd93870aadd6e08efa04334693256845a1b1aa097743cc3a367c35f6"}, "tags": [], "refs": [["stg_google_cab_sheets"]], "sources": [["sheets_data", "google_ads_costs_and_installs"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\int_google_cab_sheets.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\int_google_cab_sheets.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676546308.9289103, "compiled_code": "WITH \ngoogle_sheet AS (\n    SELECT DISTINCT\n        date,\n        LOWER(campaign_name) campaign_name,\n        IF(REGEXP_CONTAINS(campaign_name, r'\\[old\\]'),'retargeting','UA') AS campaign_type,\n        adset_name,\n        costs,\n        installs,\n        clicks,\n        impressions\n    FROM `perekrestokvprok-bq`.`sheets_data`.`google_ads_costs_and_installs`\n    WHERE date IS NOT NULL\n),\n\ngoogle_storage AS (\n    SELECT DISTINCT\n        date,\n        campaign_name,\n        campaign_type,\n        adset_name,\n        spend,\n        installs,\n        clicks,\n        impressions\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_google_cab_sheets`\n    WHERE date < (\n        SELECT MIN(date)\n        FROM google_sheet\n    )\n),\n\nfinal AS (\n    SELECT *\n    FROM google_storage\n    UNION DISTINCT \n    SELECT *\n    FROM google_sheet\n)\n\nSELECT \n    date,\n    REGEXP_REPLACE(campaign_name, r'\\+|-', '_') AS campaign_name,\n    campaign_type,\n    adset_name,\n    spend,\n    installs,\n    clicks,\n    impressions\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`int_google_cab_sheets`"}, "model.perekrestokvprok.int_google_dbm_dv360_cost": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.MetaCustom.google_dbm_google_dv360_cost_5807131"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_google_dbm_dv360_cost"], "unique_id": "model.perekrestokvprok.int_google_dbm_dv360_cost", "raw_code": "WITH source AS (\r\n    SELECT \r\n        date,\r\n        campaign,\r\n        --- \u0435\u0441\u0442\u044c, \u043d\u043e \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0437\u0430\u043d\u0443\u043b\u044f\u0435\u0442\u0441\u044f: ---\r\n        -- impressions,\r\n        -- clicks,\r\n        RevenueAdvCurrency\r\n    FROM {{ source('MetaCustom','google_dbm_google_dv360_cost_5807131') }}\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        date,\r\n        LOWER(campaign) AS campaign_name,\r\n        'UA' AS campaign_type,\r\n        '-' AS adset_name,\r\n        0 AS impressions,\r\n        0 AS clicks,\r\n        SUM(RevenueAdvCurrency) AS spend\r\n    FROM source\r\n    GROUP BY 1, 2, 3, 4, 5\r\n)\r\n\r\nSELECT\r\n    date,\r\n    campaign_name,\r\n    campaign_type,\r\n    adset_name,\r\n    impressions,\r\n    clicks,\r\n    spend\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\int_google_dbm_dv360_cost.sql", "original_file_path": "models\\staging\\int_google_dbm_dv360_cost.sql", "name": "int_google_dbm_dv360_cost", "alias": "int_google_dbm_dv360_cost", "checksum": {"name": "sha256", "checksum": "4dbf41efcbb9f9ffcdcfc923aefc490eb501c5889c7569220f8601651285ce85"}, "tags": [], "refs": [], "sources": [["MetaCustom", "google_dbm_google_dv360_cost_5807131"]], "metrics": [], "description": "\u0413\u0443\u0433\u043b \u0438\u0437 \u043c\u0435\u0442\u044b \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0430", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\int_google_dbm_dv360_cost.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\int_google_dbm_dv360_cost.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676546309.337387, "compiled_code": "WITH source AS (\n    SELECT \n        date,\n        campaign,\n        --- \u0435\u0441\u0442\u044c, \u043d\u043e \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0437\u0430\u043d\u0443\u043b\u044f\u0435\u0442\u0441\u044f: ---\n        -- impressions,\n        -- clicks,\n        RevenueAdvCurrency\n    FROM `perekrestokvprok-bq`.`MetaCustom`.`google_dbm_google_dv360_cost_5807131`\n),\n\nfinal AS (\n    SELECT\n        date,\n        LOWER(campaign) AS campaign_name,\n        'UA' AS campaign_type,\n        '-' AS adset_name,\n        0 AS impressions,\n        0 AS clicks,\n        SUM(RevenueAdvCurrency) AS spend\n    FROM source\n    GROUP BY 1, 2, 3, 4, 5\n)\n\nSELECT\n    date,\n    campaign_name,\n    campaign_type,\n    adset_name,\n    impressions,\n    clicks,\n    spend\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`int_google_dbm_dv360_cost`"}, "model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.DCM.google_dbm_existed_dbm_report_293044", "model.perekrestokvprok.stg_google_dbm"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_google_dbm_impressions_clicks_revenue_meta"], "unique_id": "model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta", "raw_code": "WITH old_source AS (\r\n    SELECT\r\n        date,\r\n        insertionOrder,\r\n        insertionOrderID,\r\n        impressions,\r\n        clicks,\r\n        revenueAdvCurrency,\r\n        ROW_NUMBER() OVER (PARTITION BY InsertionOrderID, LineItemID, Date ORDER BY DATE(_PARTITIONTIME) DESC) \r\n            AS pd_rw\r\n    FROM {{ source('DCM', 'google_dbm_existed_dbm_report_293044') }}\r\n    WHERE date < '2021-12-01'\r\n),\r\n\r\nold_modified AS (\r\n    SELECT\r\n        date,\r\n        insertionOrder AS insertion_order,\r\n        insertionOrderID AS insertion_order_id,\r\n        SUM(SAFE_CAST(impressions AS INT64)) AS impressions,\r\n        SUM(SAFE_CAST(clicks AS INT64)) AS clicks,\r\n        SUM(SAFE_CAST(revenueAdvCurrency AS FLOAT64)) AS revenue_adv_currency,\r\n        0 AS profit_advertiser_currency\r\n    FROM old_source\r\n    WHERE pd_rw = 1\r\n    GROUP BY 1, 2, 3\r\n),\r\n\r\nnew_source AS (\r\n    SELECT\r\n        date,\r\n        insertion_order,\r\n        insertion_order_id,\r\n        impressions,\r\n        clicks,\r\n        revenue_adv_currency,\r\n        profit_advertiser_currency\r\n    FROM {{ ref('stg_google_dbm') }}\r\n    WHERE date >= '2021-12-01'\r\n),\r\n\r\nnew_modified AS (\r\n    SELECT\r\n        date,\r\n        insertion_order,\r\n        insertion_order_id,\r\n        SUM(SAFE_CAST(impressions AS INT64)) AS impressions,\r\n        SUM(SAFE_CAST(clicks AS INT64)) AS clicks,\r\n        SUM(SAFE_CAST(revenue_adv_currency AS FLOAT64)) AS revenue_adv_currency,\r\n        SUM(SAFE_CAST(profit_advertiser_currency AS FLOAT64)) AS profit_advertiser_currency\r\n    FROM new_source\r\n    GROUP BY 1, 2, 3\r\n),\r\n\r\nfinal AS (\r\n    SELECT *\r\n    FROM old_modified\r\n    UNION DISTINCT\r\n    SELECT *\r\n    FROM new_modified\r\n)\r\n\r\nSELECT\r\n    date,\r\n    insertion_order,\r\n    insertion_order_id,\r\n    impressions,\r\n    clicks,\r\n    revenue_adv_currency,\r\n    profit_advertiser_currency\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\int_google_dbm_impressions_clicks_revenue_meta.sql", "original_file_path": "models\\staging\\int_google_dbm_impressions_clicks_revenue_meta.sql", "name": "int_google_dbm_impressions_clicks_revenue_meta", "alias": "int_google_dbm_impressions_clicks_revenue_meta", "checksum": {"name": "sha256", "checksum": "c127f60e58d3e75e4d981090cfbf4b729e1f07e5450cb38f0c7408a304e10b9f"}, "tags": [], "refs": [["stg_google_dbm"]], "sources": [["DCM", "google_dbm_existed_dbm_report_293044"]], "metrics": [], "description": "\u0413\u0443\u0433\u043b \u0438\u0437 \u043c\u0435\u0442\u044b \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0430", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "insertion_order": {"name": "insertion_order", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "insertion_order_id": {"name": "insertion_order_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revenue_adv_currency": {"name": "revenue_adv_currency", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\int_google_dbm_impressions_clicks_revenue_meta.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\int_google_dbm_impressions_clicks_revenue_meta.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676546309.335394, "compiled_code": "WITH old_source AS (\n    SELECT\n        date,\n        insertionOrder,\n        insertionOrderID,\n        impressions,\n        clicks,\n        revenueAdvCurrency,\n        ROW_NUMBER() OVER (PARTITION BY InsertionOrderID, LineItemID, Date ORDER BY DATE(_PARTITIONTIME) DESC) \n            AS pd_rw\n    FROM `perekrestokvprok-bq`.`DCM`.`google_dbm_existed_dbm_report_293044`\n    WHERE date < '2021-12-01'\n),\n\nold_modified AS (\n    SELECT\n        date,\n        insertionOrder AS insertion_order,\n        insertionOrderID AS insertion_order_id,\n        SUM(SAFE_CAST(impressions AS INT64)) AS impressions,\n        SUM(SAFE_CAST(clicks AS INT64)) AS clicks,\n        SUM(SAFE_CAST(revenueAdvCurrency AS FLOAT64)) AS revenue_adv_currency,\n        0 AS profit_advertiser_currency\n    FROM old_source\n    WHERE pd_rw = 1\n    GROUP BY 1, 2, 3\n),\n\nnew_source AS (\n    SELECT\n        date,\n        insertion_order,\n        insertion_order_id,\n        impressions,\n        clicks,\n        revenue_adv_currency,\n        profit_advertiser_currency\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_google_dbm`\n    WHERE date >= '2021-12-01'\n),\n\nnew_modified AS (\n    SELECT\n        date,\n        insertion_order,\n        insertion_order_id,\n        SUM(SAFE_CAST(impressions AS INT64)) AS impressions,\n        SUM(SAFE_CAST(clicks AS INT64)) AS clicks,\n        SUM(SAFE_CAST(revenue_adv_currency AS FLOAT64)) AS revenue_adv_currency,\n        SUM(SAFE_CAST(profit_advertiser_currency AS FLOAT64)) AS profit_advertiser_currency\n    FROM new_source\n    GROUP BY 1, 2, 3\n),\n\nfinal AS (\n    SELECT *\n    FROM old_modified\n    UNION DISTINCT\n    SELECT *\n    FROM new_modified\n)\n\nSELECT\n    date,\n    insertion_order,\n    insertion_order_id,\n    impressions,\n    clicks,\n    revenue_adv_currency,\n    profit_advertiser_currency\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`int_google_dbm_impressions_clicks_revenue_meta`"}, "model.perekrestokvprok.int_google_dcm_activity_meta": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.DCM.google_dcm_activitiIO"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_google_dcm_activity_meta"], "unique_id": "model.perekrestokvprok.int_google_dcm_activity_meta", "raw_code": "WITH source AS (\r\n    SELECT\r\n        interactionTime,\r\n        placementId,\r\n        placement,\r\n        activityGroup,\r\n        conversionId\r\n    FROM {{ source('DCM', 'google_dcm_activitiIO')}}\r\n    WHERE placement != ''\r\n),\r\n\r\nfinal AS (\r\n    SELECT \r\n      DATE(interactionTime) interaction_date,\r\n      placementId AS placement_id,\r\n      placement,\r\n      COUNT(distinct (CASE WHEN activityGroup = 'vpr1pur' THEN conversionId END)) purchase,\r\n      COUNT(distinct (CASE WHEN activityGroup = 'vpr1ret' THEN conversionId END)) retarget,\r\n      COUNT(distinct (CASE WHEN activityGroup = 'vpr1inst' THEN conversionId END)) installs,\r\n  FROM source\r\n  GROUP BY 1, 2, 3\r\n)\r\n\r\nSELECT\r\n    interaction_date,\r\n    placement_id,\r\n    placement,\r\n    purchase,\r\n    retarget,\r\n    installs\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\int_google_dcm_activity_meta.sql", "original_file_path": "models\\staging\\int_google_dcm_activity_meta.sql", "name": "int_google_dcm_activity_meta", "alias": "int_google_dcm_activity_meta", "checksum": {"name": "sha256", "checksum": "932104d6907e40461abcb02f7afc4e9be32b1819642a0cf21dceb1ee4f3a1eac"}, "tags": [], "refs": [], "sources": [["DCM", "google_dcm_activitiIO"]], "metrics": [], "description": "\u0413\u0443\u0433\u043b \u0438\u0437 \u043c\u0435\u0442\u044b \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0430", "columns": {"interaction_date": {"name": "interaction_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement_id": {"name": "placement_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement": {"name": "placement", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "purchase": {"name": "purchase", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "retarget": {"name": "retarget", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "installs": {"name": "installs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\int_google_dcm_activity_meta.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\int_google_dcm_activity_meta.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676546309.332404, "compiled_code": "WITH source AS (\n    SELECT\n        interactionTime,\n        placementId,\n        placement,\n        activityGroup,\n        conversionId\n    FROM `perekrestokvprok-bq`.`DCM`.`google_dcm_activitiIO`\n    WHERE placement != ''\n),\n\nfinal AS (\n    SELECT \n      DATE(interactionTime) interaction_date,\n      placementId AS placement_id,\n      placement,\n      COUNT(distinct (CASE WHEN activityGroup = 'vpr1pur' THEN conversionId END)) purchase,\n      COUNT(distinct (CASE WHEN activityGroup = 'vpr1ret' THEN conversionId END)) retarget,\n      COUNT(distinct (CASE WHEN activityGroup = 'vpr1inst' THEN conversionId END)) installs,\n  FROM source\n  GROUP BY 1, 2, 3\n)\n\nSELECT\n    interaction_date,\n    placement_id,\n    placement,\n    purchase,\n    retarget,\n    installs\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`int_google_dcm_activity_meta`"}, "model.perekrestokvprok.int_google_dcm_reach": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.DCM_impression_reach.google_dbm_existed_dbm_report_293044"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_google_dcm_reach"], "unique_id": "model.perekrestokvprok.int_google_dcm_reach", "raw_code": "WITH source AS (\r\n    SELECT\r\n        Date,\r\n        InsertionOrder,\r\n        InsertionOrderID,\r\n        UniqueReach_ImpressionReach,\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY InsertionOrderID,LineItemID, Date \r\n            ORDER BY DATE(_PARTITIONTIME) DESC\r\n            ) AS pd_rw\r\n    FROM {{ source('DCM_impression_reach', 'google_dbm_existed_dbm_report_293044') }}\r\n),\r\n\r\nfinal AS (\r\n    SELECT \r\n        date,\r\n        InsertionOrder AS insertion_order,\r\n        InsertionOrderID AS insertion_order_id,\r\n        SUM(\r\n            SAFE_CAST(\r\n                (IF(UniqueReach_ImpressionReach='-','0',UniqueReach_ImpressionReach)) AS INT64)\r\n            ) AS impression_reach,\r\n  FROM source\r\n  WHERE pd_rw = 1\r\n  GROUP BY 1, 2, 3\r\n)\r\n\r\nSELECT\r\n    date,\r\n    insertion_order,\r\n    insertion_order_id,\r\n    impression_reach\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\int_google_dcm_reach.sql", "original_file_path": "models\\staging\\int_google_dcm_reach.sql", "name": "int_google_dcm_reach", "alias": "int_google_dcm_reach", "checksum": {"name": "sha256", "checksum": "2e59993781ba8db904353c8da5f4a5b22c2405c5d22aa149b8920006585e610c"}, "tags": [], "refs": [], "sources": [["DCM_impression_reach", "google_dbm_existed_dbm_report_293044"]], "metrics": [], "description": "\u0413\u0443\u0433\u043b \u0438\u0437 \u043c\u0435\u0442\u044b \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0430", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "insertion_order": {"name": "insertion_order", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "insertion_order_id": {"name": "insertion_order_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_reach": {"name": "impression_reach", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\int_google_dcm_reach.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\int_google_dcm_reach.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676546309.329414, "compiled_code": "WITH source AS (\n    SELECT\n        Date,\n        InsertionOrder,\n        InsertionOrderID,\n        UniqueReach_ImpressionReach,\n        ROW_NUMBER() OVER (\n            PARTITION BY InsertionOrderID,LineItemID, Date \n            ORDER BY DATE(_PARTITIONTIME) DESC\n            ) AS pd_rw\n    FROM `perekrestokvprok-bq`.`DCM_impression_reach`.`google_dbm_existed_dbm_report_293044`\n),\n\nfinal AS (\n    SELECT \n        date,\n        InsertionOrder AS insertion_order,\n        InsertionOrderID AS insertion_order_id,\n        SUM(\n            SAFE_CAST(\n                (IF(UniqueReach_ImpressionReach='-','0',UniqueReach_ImpressionReach)) AS INT64)\n            ) AS impression_reach,\n  FROM source\n  WHERE pd_rw = 1\n  GROUP BY 1, 2, 3\n)\n\nSELECT\n    date,\n    insertion_order,\n    insertion_order_id,\n    impression_reach\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`int_google_dcm_reach`"}, "model.perekrestokvprok.int_mytarget_cab_meta": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.MetaCustom.mytarget_banner_stat_d0927adb05_agency_client"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_mytarget_cab_meta"], "unique_id": "model.perekrestokvprok.int_mytarget_cab_meta", "raw_code": "WITH source AS (\r\n    SELECT\r\n        date,\r\n        campaign.name,\r\n        base.shows,\r\n        base.clicks,\r\n        base.spent\r\n    FROM {{ source('MetaCustom', 'mytarget_banner_stat_d0927adb05_agency_client') }}\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        date,\r\n        LOWER(name) AS campaign_name,\r\n        IF(REGEXP_CONTAINS(name, r'new'),'UA','retargeting') AS campaign_type,\r\n        '-' adset_name,\r\n        SUM(shows) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spent) AS spend\r\n    FROM source\r\n    GROUP BY 1,2,3,4\r\n)\r\n\r\nSELECT\r\n    date,\r\n    REGEXP_REPLACE(campaign_name, r'\\+|-', '_') AS campaign_name,\r\n    campaign_type,\r\n    adset_name,\r\n    impressions,\r\n    clicks,\r\n    spend\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\int_mytarget_cab_meta.sql", "original_file_path": "models\\staging\\int_mytarget_cab_meta.sql", "name": "int_mytarget_cab_meta", "alias": "int_mytarget_cab_meta", "checksum": {"name": "sha256", "checksum": "a964e9800aa13d7f53d3501470f7ddb3e2c6752622a68e4501b4c40daf38cae3"}, "tags": [], "refs": [], "sources": [["MetaCustom", "mytarget_banner_stat_d0927adb05_agency_client"]], "metrics": [], "description": "\u041c\u0422 \u0438\u0437 \u043c\u0435\u0442\u044b", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\int_mytarget_cab_meta.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\int_mytarget_cab_meta.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676546309.3284173, "compiled_code": "WITH source AS (\n    SELECT\n        date,\n        campaign.name,\n        base.shows,\n        base.clicks,\n        base.spent\n    FROM `perekrestokvprok-bq`.`MetaCustom`.`mytarget_banner_stat_d0927adb05_agency_client`\n),\n\nfinal AS (\n    SELECT\n        date,\n        LOWER(name) AS campaign_name,\n        IF(REGEXP_CONTAINS(name, r'new'),'UA','retargeting') AS campaign_type,\n        '-' adset_name,\n        SUM(shows) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spent) AS spend\n    FROM source\n    GROUP BY 1,2,3,4\n)\n\nSELECT\n    date,\n    REGEXP_REPLACE(campaign_name, r'\\+|-', '_') AS campaign_name,\n    campaign_type,\n    adset_name,\n    impressions,\n    clicks,\n    spend\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`int_mytarget_cab_meta`"}, "model.perekrestokvprok.int_twitter_cab": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data.twitter_sheets", "model.perekrestokvprok.stg_twitter_cab_sheets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_twitter_cab"], "unique_id": "model.perekrestokvprok.int_twitter_cab", "raw_code": "WITH \r\ntwitter_sheet AS (\r\n    SELECT DISTINCT\r\n        DATE(REPLACE(string_field_0,'.','-')) AS date,\r\n        LOWER(string_field_2) AS campaign_name,\r\n        IF(REGEXP_CONTAINS(LOWER(string_field_2), r'_old_'),'retargeting','UA') AS campaign_type,\r\n        SAFE_CAST(REPLACE(string_field_9,',','.') AS FLOAT64) AS impressions,\r\n        SAFE_CAST(REPLACE(string_field_10,',','.') AS FLOAT64) AS spend\r\n    FROM {{ source('sheets_data', 'twitter_sheets') }}\r\n),\r\n\r\ntwitter_storage AS (\r\n    SELECT DISTINCT\r\n        date,\r\n        campaign_name,\r\n        campaign_type,\r\n        impressions,\r\n        spend\r\n    FROM {{ ref('stg_twitter_cab_sheets') }}\r\n    WHERE date < (\r\n        SELECT MIN(date)\r\n        FROM twitter_sheet\r\n    )\r\n),\r\n\r\nfinal AS (\r\n    SELECT *\r\n    FROM twitter_storage\r\n    UNION DISTINCT \r\n    SELECT *\r\n    FROM twitter_sheet\r\n)\r\n\r\nSELECT \r\n    date,\r\n    REGEXP_REPLACE(campaign_name, r'\\+|-', '_') AS campaign_name,\r\n    '-' adset_name,\r\n    campaign_type,\r\n    impressions,\r\n    spend\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\int_twitter_cab.sql", "original_file_path": "models\\staging\\int_twitter_cab.sql", "name": "int_twitter_cab", "alias": "int_twitter_cab", "checksum": {"name": "sha256", "checksum": "628f7fdfe2689a85b31265e7ebff9f76c44ad1b0594b7ee9adcb523b27a06fa9"}, "tags": [], "refs": [["stg_twitter_cab_sheets"]], "sources": [["sheets_data", "twitter_sheets"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\int_twitter_cab.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\int_twitter_cab.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676546308.946641, "compiled_code": "WITH \ntwitter_sheet AS (\n    SELECT DISTINCT\n        DATE(REPLACE(string_field_0,'.','-')) AS date,\n        LOWER(string_field_2) AS campaign_name,\n        IF(REGEXP_CONTAINS(LOWER(string_field_2), r'_old_'),'retargeting','UA') AS campaign_type,\n        SAFE_CAST(REPLACE(string_field_9,',','.') AS FLOAT64) AS impressions,\n        SAFE_CAST(REPLACE(string_field_10,',','.') AS FLOAT64) AS spend\n    FROM `perekrestokvprok-bq`.`sheets_data`.`twitter_sheets`\n),\n\ntwitter_storage AS (\n    SELECT DISTINCT\n        date,\n        campaign_name,\n        campaign_type,\n        impressions,\n        spend\n    FROM `perekrestokvprok-bq`.`dbt_production`.`stg_twitter_cab_sheets`\n    WHERE date < (\n        SELECT MIN(date)\n        FROM twitter_sheet\n    )\n),\n\nfinal AS (\n    SELECT *\n    FROM twitter_storage\n    UNION DISTINCT \n    SELECT *\n    FROM twitter_sheet\n)\n\nSELECT \n    date,\n    REGEXP_REPLACE(campaign_name, r'\\+|-', '_') AS campaign_name,\n    '-' adset_name,\n    campaign_type,\n    impressions,\n    spend\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`int_twitter_cab`"}, "model.perekrestokvprok.int_vk_cab_meta": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1605495720", "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1607141417"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_vk_cab_meta"], "unique_id": "model.perekrestokvprok.int_vk_cab_meta", "raw_code": "WITH source_1 AS (\r\n    SELECT\r\n        day,\r\n        campaign.name,\r\n        impressions,\r\n        clicks,\r\n        spent\r\n    FROM {{ source('MetaCustom', 'vk_campaign_stat_1900013586_1605495720') }}\r\n),\r\n\r\nsource_2 AS (\r\n    SELECT\r\n        day,\r\n        campaign.name,\r\n        impressions,\r\n        clicks,\r\n        spent\r\n    FROM {{ source('MetaCustom', 'vk_campaign_stat_1900013586_1607141417') }}\r\n),\r\n\r\nunions AS (\r\n    SELECT * FROM source_1\r\n    UNION DISTINCT\r\n    SELECT * FROM source_2\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        day AS date,\r\n        LOWER(REPLACE(REPLACE(name,'+','_'),'-','_')) AS campaign_name,\r\n        IF(REGEXP_CONTAINS(name, r'old'),'retargeting','UA') AS campaign_type,\r\n        '-' adset_name,\r\n        SUM(impressions) AS impressions,\r\n        SUM(clicks) AS clicks,\r\n        SUM(spent) AS spend\r\n    FROM unions\r\n    WHERE REGEXP_CONTAINS(name, 'realweb')\r\n    GROUP BY 1,2,3\r\n)\r\n\r\nSELECT\r\n    date,\r\n    campaign_name,\r\n    campaign_type,\r\n    adset_name,\r\n    impressions,\r\n    clicks,\r\n    spend\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\int_vk_cab_meta.sql", "original_file_path": "models\\staging\\int_vk_cab_meta.sql", "name": "int_vk_cab_meta", "alias": "int_vk_cab_meta", "checksum": {"name": "sha256", "checksum": "4d1d6cb63b5354ab696472a114a895bab24811637055c8fc76be4df1f9204973"}, "tags": [], "refs": [], "sources": [["MetaCustom", "vk_campaign_stat_1900013586_1605495720"], ["MetaCustom", "vk_campaign_stat_1900013586_1607141417"]], "metrics": [], "description": "\u0412\u041a \u0438\u0437 \u043c\u0435\u0442\u044b", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\int_vk_cab_meta.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\int_vk_cab_meta.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676546309.324431, "compiled_code": "WITH source_1 AS (\n    SELECT\n        day,\n        campaign.name,\n        impressions,\n        clicks,\n        spent\n    FROM `perekrestokvprok-bq`.`MetaCustom`.`vk_campaign_stat_1900013586_1605495720`\n),\n\nsource_2 AS (\n    SELECT\n        day,\n        campaign.name,\n        impressions,\n        clicks,\n        spent\n    FROM `perekrestokvprok-bq`.`MetaCustom`.`vk_campaign_stat_1900013586_1607141417`\n),\n\nunions AS (\n    SELECT * FROM source_1\n    UNION DISTINCT\n    SELECT * FROM source_2\n),\n\nfinal AS (\n    SELECT\n        day AS date,\n        LOWER(REPLACE(REPLACE(name,'+','_'),'-','_')) AS campaign_name,\n        IF(REGEXP_CONTAINS(name, r'old'),'retargeting','UA') AS campaign_type,\n        '-' adset_name,\n        SUM(impressions) AS impressions,\n        SUM(clicks) AS clicks,\n        SUM(spent) AS spend\n    FROM unions\n    WHERE REGEXP_CONTAINS(name, 'realweb')\n    GROUP BY 1,2,3\n)\n\nSELECT\n    date,\n    campaign_name,\n    campaign_type,\n    adset_name,\n    impressions,\n    clicks,\n    spend\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`int_vk_cab_meta`"}, "model.perekrestokvprok.int_yandex_cab_meta": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_perek_vprok_sf", "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_x5perek_direct"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "int_yandex_cab_meta"], "unique_id": "model.perekrestokvprok.int_yandex_cab_meta", "raw_code": "WITH source_1 AS (\r\n    SELECT\r\n        Date,\r\n        CampaignName,\r\n        AdGroupName,\r\n        Impressions,\r\n        Clicks,\r\n        Cost\r\n    FROM {{ source('MetaCustom', 'yandex_direct_ad_keyword_stat_x5perek_direct') }}\r\n    WHERE Date > '2021-02-01'\r\n),\r\n\r\nsource_2 AS (\r\n    SELECT\r\n        Date,\r\n        CampaignName,\r\n        AdGroupName,\r\n        Impressions,\r\n        Clicks,\r\n        Cost\r\n    FROM {{ source('MetaCustom', 'yandex_direct_ad_keyword_stat_perek_vprok_sf') }}\r\n    WHERE Date >= '2022-04-28' and Date <= '2022-05-05'\r\n),\r\n\r\nsource AS (\r\n    SELECT * FROM source_1\r\n    UNION ALL\r\n    SELECT * FROM source_2\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        date,\r\n        LOWER(REPLACE(REPLACE(CampaignName,'+','_'),'-','_')) AS campaign_name,\r\n        IF(REGEXP_CONTAINS(CampaignName, r'ret'),'retargeting','UA') AS campaign_type,\r\n        AdGroupName AS adset_name,\r\n        SUM(Impressions) AS impressions,\r\n        SUM(Clicks) AS clicks,\r\n        SUM(SAFE_CAST(SAFE_DIVIDE(Cost, 1.2) AS FLOAT64)) AS spend\r\n    FROM source\r\n    GROUP BY 1,2,3,4\r\n)\r\n\r\nSELECT\r\n    date,\r\n    campaign_name,\r\n    campaign_type,\r\n    adset_name,\r\n    impressions,\r\n    clicks,\r\n    spend\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\int_yandex_cab_meta.sql", "original_file_path": "models\\staging\\int_yandex_cab_meta.sql", "name": "int_yandex_cab_meta", "alias": "int_yandex_cab_meta", "checksum": {"name": "sha256", "checksum": "7397f2218a37242fa3bb349e66bd48998bfe2712ef6758ceed0e30f4238f582c"}, "tags": [], "refs": [], "sources": [["MetaCustom", "yandex_direct_ad_keyword_stat_perek_vprok_sf"], ["MetaCustom", "yandex_direct_ad_keyword_stat_x5perek_direct"]], "metrics": [], "description": "\u042f\u043d\u0434\u0435\u043a\u0441 \u0438\u0437 \u043c\u0435\u0442\u044b", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\int_yandex_cab_meta.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\int_yandex_cab_meta.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676546309.3224373, "compiled_code": "WITH source_1 AS (\n    SELECT\n        Date,\n        CampaignName,\n        AdGroupName,\n        Impressions,\n        Clicks,\n        Cost\n    FROM `perekrestokvprok-bq`.`MetaCustom`.`yandex_direct_ad_keyword_stat_x5perek_direct`\n    WHERE Date > '2021-02-01'\n),\n\nsource_2 AS (\n    SELECT\n        Date,\n        CampaignName,\n        AdGroupName,\n        Impressions,\n        Clicks,\n        Cost\n    FROM `perekrestokvprok-bq`.`MetaCustom`.`yandex_direct_ad_keyword_stat_perek_vprok_sf`\n    WHERE Date >= '2022-04-28' and Date <= '2022-05-05'\n),\n\nsource AS (\n    SELECT * FROM source_1\n    UNION ALL\n    SELECT * FROM source_2\n),\n\nfinal AS (\n    SELECT\n        date,\n        LOWER(REPLACE(REPLACE(CampaignName,'+','_'),'-','_')) AS campaign_name,\n        IF(REGEXP_CONTAINS(CampaignName, r'ret'),'retargeting','UA') AS campaign_type,\n        AdGroupName AS adset_name,\n        SUM(Impressions) AS impressions,\n        SUM(Clicks) AS clicks,\n        SUM(SAFE_CAST(SAFE_DIVIDE(Cost, 1.2) AS FLOAT64)) AS spend\n    FROM source\n    GROUP BY 1,2,3,4\n)\n\nSELECT\n    date,\n    campaign_name,\n    campaign_type,\n    adset_name,\n    impressions,\n    clicks,\n    spend\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`int_yandex_cab_meta`"}, "model.perekrestokvprok.stg_af_client_data": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize"], "nodes": ["source.perekrestokvprok.agg_data.AF_client_data", "source.perekrestokvprok.agg_data.AF_client_data", "source.perekrestokvprok.agg_data.AF_smartbanners_may_2022"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_af_client_data"], "unique_id": "model.perekrestokvprok.stg_af_client_data", "raw_code": "WITH no_campaign AS (\r\nSELECT \r\n    date,\r\n    is_retargeting,\r\n    af_c_id AS af_cid,\r\n    af_adset AS adset_name,\r\n    mediasource,\r\n    event_value,\r\n    platform,\r\n    eventname AS event_name,\r\n    unig_event AS uniq_event_count,\r\n    EventRevenue AS event_revenue,\r\n    cnt_event AS event_count,\r\n    {{ normalize('campaign') }} AS campaign_name\r\nFROM  {{ source ('agg_data', 'AF_client_data')}}\r\nWHERE campaign != 'campaign_name' --\u0443\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 campaign_name\r\n),\r\ncampaign_name as (\r\n  SELECT\r\n    date,\r\n    is_retargeting,\r\n    af_c_id AS af_cid,\r\n    af_adset AS adset_name,\r\n    mediasource,\r\n    event_value,\r\n    platform,\r\n    eventname AS event_name,\r\n    unig_event AS uniq_event_count,\r\n    EventRevenue AS event_revenue,\r\n    cnt_event AS event_count,\r\n    {{ normalize('campaign') }} AS campaign_name\r\n  FROM (\r\n    SELECT * FROM {{ source ('agg_data', 'AF_client_data')}}\r\n    WHERE campaign = 'campaign_name'\r\n  ) av\r\n  WHERE date <'2022-05-01' OR date >'2022-05-15' --\u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c campaign_name \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u0442\u044b\r\n),\r\nsmartbanners AS (\r\n  SELECT\r\n    date,\r\n    is_retargeting,\r\n    af_c_id AS af_cid,\r\n    af_adset AS adset_name,\r\n    mediasource,\r\n    event_value,\r\n    platform,\r\n    eventname AS event_name,\r\n    unig_event AS uniq_event_count,\r\n    EventRevenue AS event_revenue,\r\n    cnt_event AS event_count,\r\n    {{ normalize('campaign') }} AS campaign_name\r\n  FROM {{ source ('agg_data', 'AF_smartbanners_may_2022')}} --\u0432\u043c\u0435\u0441\u0442\u043e campaign_name \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043c\u0430\u0440\u0442\u0431\u0430\u043d\u043d\u0435\u0440\u044b\r\n),\r\ncte as (\r\n  SELECT * FROM no_campaign\r\n  UNION ALL\r\n  SELECT * FROM campaign_name\r\n  UNION ALL\r\n  SELECT * FROM smartbanners\r\n)\r\nSELECT\r\n  date,\r\n  is_retargeting,\r\n    CASE\r\n        WHEN af_cid = 'campaign_id' THEN '61809857'\r\n        ELSE af_cid END AS af_cid,\r\n  adset_name,\r\n    CASE \r\n        WHEN mediasource = 'mail.ru_int' and campaign_name = 'campaign_name' THEN 'yandexdirect_int'\r\n        ELSE mediasource END AS mediasource,\r\n  event_value,\r\n  platform,\r\n  event_name,\r\n  uniq_event_count,\r\n  event_revenue,\r\n  event_count,\r\n    CASE WHEN campaign_name = 'campaign_name' THEN 'realweb_ya_2022_and_ret_reg2_smartbanner'\r\n         ELSE campaign_name END AS campaign_name,\r\nFROM cte", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_af_client_data.sql", "original_file_path": "models\\staging\\stg_af_client_data.sql", "name": "stg_af_client_data", "alias": "stg_af_client_data", "checksum": {"name": "sha256", "checksum": "0ea871a557c026d1b2e5cd8ac5d92df1f324f06ec95f8ca7ca9d730089dfdd68"}, "tags": [], "refs": [], "sources": [["agg_data", "AF_client_data"], ["agg_data", "AF_client_data"], ["agg_data", "AF_smartbanners_may_2022"]], "metrics": [], "description": "AF \u0438\u0437 BQ (\u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0441\u0443\u0440\u0441 \u043a\u043e\u043d\u0432\u0435\u0440\u0441\u0438\u0439)", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_retargeting": {"name": "is_retargeting", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "af_cid": {"name": "af_cid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mediasource": {"name": "mediasource", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_value": {"name": "event_value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uniq_event_count": {"name": "uniq_event_count", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_revenue": {"name": "event_revenue", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_count": {"name": "event_count", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_af_client_data.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_af_client_data.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676546309.3194473, "compiled_code": "WITH no_campaign AS (\nSELECT \n    date,\n    is_retargeting,\n    af_c_id AS af_cid,\n    af_adset AS adset_name,\n    mediasource,\n    event_value,\n    platform,\n    eventname AS event_name,\n    unig_event AS uniq_event_count,\n    EventRevenue AS event_revenue,\n    cnt_event AS event_count,\n    \n    TRIM(\n        REGEXP_REPLACE(\n            LOWER(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REGEXP_REPLACE(campaign,  r'(_install_week.*)', '_install_weekend'), \n                    r'(_install_promo_gl.*)', '_install_promo_global'), \n                r'(_install_promo_re.*)', '_install_promo_regular')\n            ), r'\\+|-', '_')\n        )\n AS campaign_name\nFROM  `perekrestokvprok-bq`.`agg_data`.`AF_client_data`\nWHERE campaign != 'campaign_name' --\u0443\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 campaign_name\n),\ncampaign_name as (\n  SELECT\n    date,\n    is_retargeting,\n    af_c_id AS af_cid,\n    af_adset AS adset_name,\n    mediasource,\n    event_value,\n    platform,\n    eventname AS event_name,\n    unig_event AS uniq_event_count,\n    EventRevenue AS event_revenue,\n    cnt_event AS event_count,\n    \n    TRIM(\n        REGEXP_REPLACE(\n            LOWER(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REGEXP_REPLACE(campaign,  r'(_install_week.*)', '_install_weekend'), \n                    r'(_install_promo_gl.*)', '_install_promo_global'), \n                r'(_install_promo_re.*)', '_install_promo_regular')\n            ), r'\\+|-', '_')\n        )\n AS campaign_name\n  FROM (\n    SELECT * FROM `perekrestokvprok-bq`.`agg_data`.`AF_client_data`\n    WHERE campaign = 'campaign_name'\n  ) av\n  WHERE date <'2022-05-01' OR date >'2022-05-15' --\u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c campaign_name \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u0442\u044b\n),\nsmartbanners AS (\n  SELECT\n    date,\n    is_retargeting,\n    af_c_id AS af_cid,\n    af_adset AS adset_name,\n    mediasource,\n    event_value,\n    platform,\n    eventname AS event_name,\n    unig_event AS uniq_event_count,\n    EventRevenue AS event_revenue,\n    cnt_event AS event_count,\n    \n    TRIM(\n        REGEXP_REPLACE(\n            LOWER(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REGEXP_REPLACE(campaign,  r'(_install_week.*)', '_install_weekend'), \n                    r'(_install_promo_gl.*)', '_install_promo_global'), \n                r'(_install_promo_re.*)', '_install_promo_regular')\n            ), r'\\+|-', '_')\n        )\n AS campaign_name\n  FROM `perekrestokvprok-bq`.`agg_data`.`AF_smartbanners_may_2022` --\u0432\u043c\u0435\u0441\u0442\u043e campaign_name \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043c\u0430\u0440\u0442\u0431\u0430\u043d\u043d\u0435\u0440\u044b\n),\ncte as (\n  SELECT * FROM no_campaign\n  UNION ALL\n  SELECT * FROM campaign_name\n  UNION ALL\n  SELECT * FROM smartbanners\n)\nSELECT\n  date,\n  is_retargeting,\n    CASE\n        WHEN af_cid = 'campaign_id' THEN '61809857'\n        ELSE af_cid END AS af_cid,\n  adset_name,\n    CASE \n        WHEN mediasource = 'mail.ru_int' and campaign_name = 'campaign_name' THEN 'yandexdirect_int'\n        ELSE mediasource END AS mediasource,\n  event_value,\n  platform,\n  event_name,\n  uniq_event_count,\n  event_revenue,\n  event_count,\n    CASE WHEN campaign_name = 'campaign_name' THEN 'realweb_ya_2022_and_ret_reg2_smartbanner'\n         ELSE campaign_name END AS campaign_name,\nFROM cte", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_af_client_data`"}, "model.perekrestokvprok.stg_af_for_media": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.AF_data.af_atr_data_for_media_ads_TABLE"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_af_for_media"], "unique_id": "model.perekrestokvprok.stg_af_for_media", "raw_code": "SELECT\r\n    atr_date AS date,\r\n    is_retargeting,\r\n    LOWER(Campaign) AS campaign_name,\r\n    MediaSource AS media_source,\r\n    platform,\r\n    EventName AS event_name,\r\n    unig_event AS uniq_event,\r\n    EventRevenue AS revenue,\r\n    cnt_event AS event_count\r\nFROM {{ source('AF_data', 'af_atr_data_for_media_ads_TABLE') }}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_af_for_media.sql", "original_file_path": "models\\staging\\stg_af_for_media.sql", "name": "stg_af_for_media", "alias": "stg_af_for_media", "checksum": {"name": "sha256", "checksum": "e298eda4e5d6dcda00adaaad540ae2a0c6f7b6520c8c8eb4cd3ded91264dd560"}, "tags": [], "refs": [], "sources": [["AF_data", "af_atr_data_for_media_ads_TABLE"]], "metrics": [], "description": "AF \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0439\u043a\u0438 \u0438\u0437 BQ", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_retargeting": {"name": "is_retargeting", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media_source": {"name": "media_source", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uniq_event": {"name": "uniq_event", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revenue": {"name": "revenue", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_count": {"name": "event_count", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_af_for_media.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_af_for_media.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676546309.3104773, "compiled_code": "SELECT\n    atr_date AS date,\n    is_retargeting,\n    LOWER(Campaign) AS campaign_name,\n    MediaSource AS media_source,\n    platform,\n    EventName AS event_name,\n    unig_event AS uniq_event,\n    EventRevenue AS revenue,\n    cnt_event AS event_count\nFROM `perekrestokvprok-bq`.`AF_data`.`af_atr_data_for_media_ads_TABLE`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_af_for_media`"}, "model.perekrestokvprok.stg_af_rtg_partners_by_date": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize"], "nodes": ["source.perekrestokvprok.AF_data.ios_rtg_partners_by_date_report_*", "source.perekrestokvprok.AF_data.android_rtg_partners_by_date_report_*"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_af_rtg_partners_by_date"], "unique_id": "model.perekrestokvprok.stg_af_rtg_partners_by_date", "raw_code": "WITH source_ios AS (\r\n    SELECT \r\n        date,\r\n        Agency_PMD__af_prt_\tAS agency,\r\n        Media_Source__pid_ AS media_source,\r\n        Campaign__c_ AS campaign,\r\n        'retargeting' as report_type,\r\n        'ios' AS platform,\r\n        clicks,\r\n        conversions,\r\n        sessions,\r\n        total_revenue,\r\n        total_cost,\r\n        af_purchase__Event_counter_ AS purchase,\r\n        af_purchase__Sales_in_RUB_ AS revenue,\r\n        af_purchase_rw__Event_counter_ AS rw_purchase,\r\n        af_purchase_rw__Sales_in_RUB_ AS rw_revenue,\r\n        first_purchase__Event_counter_ AS first_purchase,\r\n        first_purchase__Sales_in_RUB_ AS first_purchase_revenue,\r\n        first_purchase_rw__Event_counter_ AS rw_first_purchase,\r\n        first_purchase_rw__Sales_in_RUB_ AS rw_first_purchase_revenue,\r\n        ROW_NUMBER() OVER(PARTITION BY date, Media_Source__pid_ , Campaign__c_ ORDER BY _TABLE_SUFFIX DESC) AS counter\r\n    FROM  {{ source('AF_data', 'ios_rtg_partners_by_date_report_*') }}\r\n),\r\n\r\nsource_android AS (\r\n    SELECT \r\n        date,\r\n        Agency_PMD__af_prt_\tAS agency,\r\n        Media_Source__pid_ AS media_source,\r\n        Campaign__c_ AS campaign,\r\n        'retargeting' as report_type,\r\n        'android' AS platform,\r\n        clicks,\r\n        conversions,\r\n        sessions,\r\n        total_revenue,\r\n        total_cost,\r\n        af_purchase__Event_counter_ AS purchase,\r\n        af_purchase__Sales_in_RUB_ AS revenue,\r\n        af_purchase_rw__Event_counter_ AS rw_purchase,\r\n        af_purchase_rw__Sales_in_RUB_ AS rw_revenue,\r\n        first_purchase__Event_counter_ AS first_purchase,\r\n        first_purchase__Sales_in_RUB_ AS first_purchase_revenue,\r\n        first_purchase_rw__Event_counter_ AS rw_first_purchase,\r\n        first_purchase_rw__Sales_in_RUB_ AS rw_first_purchase_revenue,\r\n        ROW_NUMBER() OVER(PARTITION BY date, Media_Source__pid_ , Campaign__c_ ORDER BY _TABLE_SUFFIX DESC) AS counter\r\n    FROM  {{ source('AF_data', 'android_rtg_partners_by_date_report_*') }}\r\n),\r\n\r\nfinal AS (\r\n    SELECT * FROM source_ios\r\n    UNION ALL\r\n    SELECT * FROM source_android\r\n)\r\n\r\nSELECT \r\n    DATE(date) AS date,\r\n    agency,\r\n    media_source,\r\n    {{ normalize('campaign') }} AS campaign_name,\r\n    report_type,\r\n    platform,\r\n    SUM(clicks) clicks,\r\n    SUM(conversions) conversions,\r\n    SUM(sessions) sessions,\r\n    SUM(total_revenue) total_revenue,\r\n    SUM(total_cost) total_cost,\r\n    SUM(purchase) purchase,\r\n    SUM(revenue) revenue,\r\n    SUM(rw_purchase) rw_purchase,\r\n    SUM(rw_revenue) rw_revenue,\r\n    SUM(first_purchase) first_purchase,\r\n    SUM(first_purchase_revenue) first_purchase_revenue,\r\n    SUM(rw_first_purchase) rw_first_purchase,\r\n    SUM(rw_first_purchase_revenue) rw_first_purchase_revenue,\r\nFROM final\r\nWHERE counter = 1\r\nGROUP BY 1,2,3,4,5,6", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_af_rtg_partners_by_date.sql", "original_file_path": "models\\staging\\stg_af_rtg_partners_by_date.sql", "name": "stg_af_rtg_partners_by_date", "alias": "stg_af_rtg_partners_by_date", "checksum": {"name": "sha256", "checksum": "bbf00470c542334f9b6ffe3668aceb7629ac144ea995ccc483bdcdcae9d95ff0"}, "tags": [], "refs": [], "sources": [["AF_data", "ios_rtg_partners_by_date_report_*"], ["AF_data", "android_rtg_partners_by_date_report_*"]], "metrics": [], "description": "\u0412\u044b\u0433\u0440\u0443\u0437\u043a\u0430 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043e\u0432 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0438\u0437 AF", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_af_rtg_partners_by_date.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_af_rtg_partners_by_date.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676546309.3443637, "compiled_code": "WITH source_ios AS (\n    SELECT \n        date,\n        Agency_PMD__af_prt_\tAS agency,\n        Media_Source__pid_ AS media_source,\n        Campaign__c_ AS campaign,\n        'retargeting' as report_type,\n        'ios' AS platform,\n        clicks,\n        conversions,\n        sessions,\n        total_revenue,\n        total_cost,\n        af_purchase__Event_counter_ AS purchase,\n        af_purchase__Sales_in_RUB_ AS revenue,\n        af_purchase_rw__Event_counter_ AS rw_purchase,\n        af_purchase_rw__Sales_in_RUB_ AS rw_revenue,\n        first_purchase__Event_counter_ AS first_purchase,\n        first_purchase__Sales_in_RUB_ AS first_purchase_revenue,\n        first_purchase_rw__Event_counter_ AS rw_first_purchase,\n        first_purchase_rw__Sales_in_RUB_ AS rw_first_purchase_revenue,\n        ROW_NUMBER() OVER(PARTITION BY date, Media_Source__pid_ , Campaign__c_ ORDER BY _TABLE_SUFFIX DESC) AS counter\n    FROM  `perekrestokvprok-bq`.`AF_data`.`ios_rtg_partners_by_date_report_*`\n),\n\nsource_android AS (\n    SELECT \n        date,\n        Agency_PMD__af_prt_\tAS agency,\n        Media_Source__pid_ AS media_source,\n        Campaign__c_ AS campaign,\n        'retargeting' as report_type,\n        'android' AS platform,\n        clicks,\n        conversions,\n        sessions,\n        total_revenue,\n        total_cost,\n        af_purchase__Event_counter_ AS purchase,\n        af_purchase__Sales_in_RUB_ AS revenue,\n        af_purchase_rw__Event_counter_ AS rw_purchase,\n        af_purchase_rw__Sales_in_RUB_ AS rw_revenue,\n        first_purchase__Event_counter_ AS first_purchase,\n        first_purchase__Sales_in_RUB_ AS first_purchase_revenue,\n        first_purchase_rw__Event_counter_ AS rw_first_purchase,\n        first_purchase_rw__Sales_in_RUB_ AS rw_first_purchase_revenue,\n        ROW_NUMBER() OVER(PARTITION BY date, Media_Source__pid_ , Campaign__c_ ORDER BY _TABLE_SUFFIX DESC) AS counter\n    FROM  `perekrestokvprok-bq`.`AF_data`.`android_rtg_partners_by_date_report_*`\n),\n\nfinal AS (\n    SELECT * FROM source_ios\n    UNION ALL\n    SELECT * FROM source_android\n)\n\nSELECT \n    DATE(date) AS date,\n    agency,\n    media_source,\n    \n    TRIM(\n        REGEXP_REPLACE(\n            LOWER(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REGEXP_REPLACE(campaign,  r'(_install_week.*)', '_install_weekend'), \n                    r'(_install_promo_gl.*)', '_install_promo_global'), \n                r'(_install_promo_re.*)', '_install_promo_regular')\n            ), r'\\+|-', '_')\n        )\n AS campaign_name,\n    report_type,\n    platform,\n    SUM(clicks) clicks,\n    SUM(conversions) conversions,\n    SUM(sessions) sessions,\n    SUM(total_revenue) total_revenue,\n    SUM(total_cost) total_cost,\n    SUM(purchase) purchase,\n    SUM(revenue) revenue,\n    SUM(rw_purchase) rw_purchase,\n    SUM(rw_revenue) rw_revenue,\n    SUM(first_purchase) first_purchase,\n    SUM(first_purchase_revenue) first_purchase_revenue,\n    SUM(rw_first_purchase) rw_first_purchase,\n    SUM(rw_first_purchase_revenue) rw_first_purchase_revenue,\nFROM final\nWHERE counter = 1\nGROUP BY 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_af_rtg_partners_by_date`"}, "model.perekrestokvprok.stg_af_ua_partners_by_date": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize"], "nodes": ["source.perekrestokvprok.AF_data.ios_ua_partners_by_date_report_*", "source.perekrestokvprok.AF_data.android_ua_partners_by_date_report_*"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_af_ua_partners_by_date"], "unique_id": "model.perekrestokvprok.stg_af_ua_partners_by_date", "raw_code": "WITH source_ios AS (\r\n    SELECT \r\n        date,\r\n        Agency_PMD__af_prt_\tAS agency,\r\n        Media_Source__pid_ AS media_source,\r\n        Campaign__c_ AS campaign,\r\n        'UA' as report_type,\r\n        'ios' AS platform,\r\n        impressions,\r\n        clicks,\r\n        installs,\r\n        sessions,\r\n        total_revenue,\r\n        total_cost,\r\n        af_purchase__Unique_users_ AS uniq_purchase,\r\n        af_purchase__Event_counter_ AS purchase,\r\n        af_purchase__Sales_in_RUB_ AS revenue,\r\n        af_purchase_rw__Event_counter_ AS rw_purchase,\r\n        af_purchase_rw__Sales_in_RUB_ AS rw_revenue,\r\n        first_purchase__Unique_users_ AS uniq_first_purchase,\r\n        first_purchase__Event_counter_ AS first_purchase,\r\n        first_purchase__Sales_in_RUB_ AS first_purchase_revenue,\r\n        first_purchase_rw__Event_counter_ AS rw_first_purchase,\r\n        first_purchase_rw__Sales_in_RUB_ AS rw_first_purchase_revenue,\r\n        ROW_NUMBER() OVER(PARTITION BY date, Media_Source__pid_ , Campaign__c_ ORDER BY _TABLE_SUFFIX DESC) AS counter\r\n    FROM {{ source('AF_data', 'ios_ua_partners_by_date_report_*') }}\r\n),\r\n\r\nsource_android AS (\r\n    SELECT \r\n        date,\r\n        Agency_PMD__af_prt_\tAS agency,\r\n        Media_Source__pid_ AS media_source,\r\n        Campaign__c_ AS campaign,\r\n        'UA' as report_type,\r\n        'android' AS platform,\r\n        impressions,\r\n        clicks,\r\n        installs,\r\n        sessions,\r\n        total_revenue,\r\n        total_cost,\r\n        af_purchase__Unique_users_ AS uniq_purchase,\r\n        af_purchase__Event_counter_ AS purchase,\r\n        af_purchase__Sales_in_RUB_ AS revenue,\r\n        af_purchase_rw__Event_counter_ AS rw_purchase,\r\n        af_purchase_rw__Sales_in_RUB_ AS rw_revenue,\r\n        first_purchase__Unique_users_ AS uniq_first_purchase,\r\n        first_purchase__Event_counter_ AS first_purchase,\r\n        first_purchase__Sales_in_RUB_ AS first_purchase_revenue,\r\n        first_purchase_rw__Event_counter_ AS rw_first_purchase,\r\n        first_purchase_rw__Sales_in_RUB_ AS rw_first_purchase_revenue,\r\n        ROW_NUMBER() OVER(PARTITION BY date, Media_Source__pid_ , Campaign__c_ ORDER BY _TABLE_SUFFIX DESC) AS counter\r\n    FROM {{ source('AF_data', 'android_ua_partners_by_date_report_*') }}\r\n),\r\n\r\nfinal AS (\r\n    SELECT * FROM source_ios\r\n    UNION ALL\r\n    SELECT * FROM source_android\r\n)\r\n\r\nSELECT \r\n    DATE(date) AS date,\r\n    agency,\r\n    media_source,\r\n    {{ normalize('campaign') }} AS campaign_name,\r\n    report_type,\r\n    platform,\r\n    SUM(impressions) impressions,\r\n    SUM(clicks) clicks,\r\n    SUM(installs) installs,\r\n    SUM(sessions) sessions,\r\n    SUM(total_revenue) total_revenue,\r\n    SUM(total_cost) total_cost,\r\n    SUM(uniq_purchase) uniq_purchase,\r\n    SUM(purchase) purchase,\r\n    SUM(revenue) revenue,\r\n    SUM(rw_purchase) rw_purchase,\r\n    SUM(rw_revenue) rw_revenue,\r\n    SUM(uniq_first_purchase) uniq_first_purchase,\r\n    SUM(first_purchase) first_purchase,\r\n    SUM(first_purchase_revenue) first_purchase_revenue,\r\n    SUM(rw_first_purchase) rw_first_purchase,\r\n    SUM(rw_first_purchase_revenue) rw_first_purchase_revenue,\r\nFROM final\r\nWHERE counter = 1\r\nGROUP BY 1,2,3,4,5,6", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_af_ua_partners_by_date.sql", "original_file_path": "models\\staging\\stg_af_ua_partners_by_date.sql", "name": "stg_af_ua_partners_by_date", "alias": "stg_af_ua_partners_by_date", "checksum": {"name": "sha256", "checksum": "9dd3584027783ca5e0728480b2205a24389b8e9e28668ad6838dbcf81168e98c"}, "tags": [], "refs": [], "sources": [["AF_data", "ios_ua_partners_by_date_report_*"], ["AF_data", "android_ua_partners_by_date_report_*"]], "metrics": [], "description": "\u0412\u044b\u0433\u0440\u0443\u0437\u043a\u0430 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043e\u0432 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0438\u0437 AF", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_af_ua_partners_by_date.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_af_ua_partners_by_date.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676546309.3434088, "compiled_code": "WITH source_ios AS (\n    SELECT \n        date,\n        Agency_PMD__af_prt_\tAS agency,\n        Media_Source__pid_ AS media_source,\n        Campaign__c_ AS campaign,\n        'UA' as report_type,\n        'ios' AS platform,\n        impressions,\n        clicks,\n        installs,\n        sessions,\n        total_revenue,\n        total_cost,\n        af_purchase__Unique_users_ AS uniq_purchase,\n        af_purchase__Event_counter_ AS purchase,\n        af_purchase__Sales_in_RUB_ AS revenue,\n        af_purchase_rw__Event_counter_ AS rw_purchase,\n        af_purchase_rw__Sales_in_RUB_ AS rw_revenue,\n        first_purchase__Unique_users_ AS uniq_first_purchase,\n        first_purchase__Event_counter_ AS first_purchase,\n        first_purchase__Sales_in_RUB_ AS first_purchase_revenue,\n        first_purchase_rw__Event_counter_ AS rw_first_purchase,\n        first_purchase_rw__Sales_in_RUB_ AS rw_first_purchase_revenue,\n        ROW_NUMBER() OVER(PARTITION BY date, Media_Source__pid_ , Campaign__c_ ORDER BY _TABLE_SUFFIX DESC) AS counter\n    FROM `perekrestokvprok-bq`.`AF_data`.`ios_ua_partners_by_date_report_*`\n),\n\nsource_android AS (\n    SELECT \n        date,\n        Agency_PMD__af_prt_\tAS agency,\n        Media_Source__pid_ AS media_source,\n        Campaign__c_ AS campaign,\n        'UA' as report_type,\n        'android' AS platform,\n        impressions,\n        clicks,\n        installs,\n        sessions,\n        total_revenue,\n        total_cost,\n        af_purchase__Unique_users_ AS uniq_purchase,\n        af_purchase__Event_counter_ AS purchase,\n        af_purchase__Sales_in_RUB_ AS revenue,\n        af_purchase_rw__Event_counter_ AS rw_purchase,\n        af_purchase_rw__Sales_in_RUB_ AS rw_revenue,\n        first_purchase__Unique_users_ AS uniq_first_purchase,\n        first_purchase__Event_counter_ AS first_purchase,\n        first_purchase__Sales_in_RUB_ AS first_purchase_revenue,\n        first_purchase_rw__Event_counter_ AS rw_first_purchase,\n        first_purchase_rw__Sales_in_RUB_ AS rw_first_purchase_revenue,\n        ROW_NUMBER() OVER(PARTITION BY date, Media_Source__pid_ , Campaign__c_ ORDER BY _TABLE_SUFFIX DESC) AS counter\n    FROM `perekrestokvprok-bq`.`AF_data`.`android_ua_partners_by_date_report_*`\n),\n\nfinal AS (\n    SELECT * FROM source_ios\n    UNION ALL\n    SELECT * FROM source_android\n)\n\nSELECT \n    DATE(date) AS date,\n    agency,\n    media_source,\n    \n    TRIM(\n        REGEXP_REPLACE(\n            LOWER(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REGEXP_REPLACE(campaign,  r'(_install_week.*)', '_install_weekend'), \n                    r'(_install_promo_gl.*)', '_install_promo_global'), \n                r'(_install_promo_re.*)', '_install_promo_regular')\n            ), r'\\+|-', '_')\n        )\n AS campaign_name,\n    report_type,\n    platform,\n    SUM(impressions) impressions,\n    SUM(clicks) clicks,\n    SUM(installs) installs,\n    SUM(sessions) sessions,\n    SUM(total_revenue) total_revenue,\n    SUM(total_cost) total_cost,\n    SUM(uniq_purchase) uniq_purchase,\n    SUM(purchase) purchase,\n    SUM(revenue) revenue,\n    SUM(rw_purchase) rw_purchase,\n    SUM(rw_revenue) rw_revenue,\n    SUM(uniq_first_purchase) uniq_first_purchase,\n    SUM(first_purchase) first_purchase,\n    SUM(first_purchase_revenue) first_purchase_revenue,\n    SUM(rw_first_purchase) rw_first_purchase,\n    SUM(rw_first_purchase_revenue) rw_first_purchase_revenue,\nFROM final\nWHERE counter = 1\nGROUP BY 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_af_ua_partners_by_date`"}, "model.perekrestokvprok.stg_appnext_cost": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_appnext_cost"], "unique_id": "model.perekrestokvprok.stg_appnext_cost", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='table',\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\nSELECT\r\nDISTINCT\r\n    date,\r\n    campaign_name,\r\n    type,\r\n    cost\r\nFROM `perekrestokvprok-bq`.`sheets_data`.`appnext_cost`", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_appnext_cost.sql", "original_file_path": "models\\staging\\stg_appnext_cost.sql", "name": "stg_appnext_cost", "alias": "stg_appnext_cost", "checksum": {"name": "sha256", "checksum": "c0196b04649aafbe2925a7abb5a0eef9169f454230b30c21b977a5ab10674565"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Appnext cost", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_appnext_cost.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_appnext_cost.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676546309.347354, "compiled_code": "\n\n\n\n\n\nSELECT\nDISTINCT\n    date,\n    campaign_name,\n    type,\n    cost\nFROM `perekrestokvprok-bq`.`sheets_data`.`appnext_cost`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_appnext_cost`"}, "model.perekrestokvprok.stg_asa_cab_sheets": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize", "macro.dbt.is_incremental"], "nodes": ["source.perekrestokvprok.sheets_data.Asa_cost", "model.perekrestokvprok.int_asa_cab_meta"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_key", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "cluster_by": ["campaign_type"], "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_asa_cab_sheets"], "unique_id": "model.perekrestokvprok.stg_asa_cab_sheets", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='incremental',\r\n    unique_key='unique_key',\r\n    partition_by={\r\n      \"field\": \"date\",\r\n      \"data_type\": \"date\",\r\n      \"granularity\": \"day\"\r\n    },\r\n    cluster_by = [\"campaign_type\"]\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\nWITH source AS (\r\n    SELECT DISTINCT\r\n        date,\r\n        campaign,\r\n        Clikcs AS clicks,\r\n        spend,\r\n        installs,\r\n        ROW_NUMBER() OVER(PARTITION BY date, campaign) AS counter\r\n    FROM {{ source('sheets_data', 'Asa_cost') }}\r\n    WHERE date IS NOT NULL\r\n),\r\n\r\nfinal AS (\r\n    SELECT DISTINCT\r\n        ARRAY_TO_STRING([\r\n            CAST(date AS string),\r\n            LOWER(campaign)\r\n        ],'') AS unique_key,\r\n        date,\r\n        LOWER(campaign) AS campaign_name,\r\n        clicks,\r\n        spend,\r\n        installs\r\n    FROM source\r\n    WHERE counter = 1\r\n)\r\n\r\nSELECT DISTINCT\r\n    unique_key,\r\n    date,\r\n    {{ normalize('campaign_name') }} AS campaign_name,\r\n    IF(REGEXP_CONTAINS(campaign_name, r'\\(R\\)|\\(r\\)'),'retargeting','UA') AS campaign_type,\r\n    '-' adset_name,\r\n    clicks,\r\n    spend,\r\n    installs,\r\n    0 impressions\r\nFROM final\r\n\r\n{% if not is_incremental() %}\r\n\r\n-- \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 --\r\nUNION ALL\r\nSELECT DISTINCT\r\n    ARRAY_TO_STRING([\r\n      CAST(date AS STRING),\r\n      LOWER(campaign_name)\r\n      ],'') AS unique_key,\r\n    date,\r\n    campaign_name,\r\n    campaign_type,\r\n    adset_name,\r\n    clicks,\r\n    spend,\r\n    0 installs,\r\n    impressions\r\nFROM {{ ref ('int_asa_cab_meta') }}\r\nWHERE date < (\r\n  SELECT MIN(date)\r\n  FROM final\r\n)\r\nAND date IS NOT NULL\r\n\r\n{% endif %}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_asa_cab_sheets.sql", "original_file_path": "models\\staging\\stg_asa_cab_sheets.sql", "name": "stg_asa_cab_sheets", "alias": "stg_asa_cab_sheets", "checksum": {"name": "sha256", "checksum": "06adefa067008724e7365092c9967ffb756c574ed152ac7fc948bcb8efa921c1"}, "tags": [], "refs": [["int_asa_cab_meta"]], "sources": [["sheets_data", "Asa_cost"]], "metrics": [], "description": "\u0410\u0421\u0410 \u0438\u0437 perek_settings", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_asa_cab_sheets.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_asa_cab_sheets.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "unique_key", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "cluster_by": ["campaign_type"]}, "created_at": 1676546309.341374, "compiled_code": "\n\n\n\n\n\nWITH source AS (\n    SELECT DISTINCT\n        date,\n        campaign,\n        Clikcs AS clicks,\n        spend,\n        installs,\n        ROW_NUMBER() OVER(PARTITION BY date, campaign) AS counter\n    FROM `perekrestokvprok-bq`.`sheets_data`.`Asa_cost`\n    WHERE date IS NOT NULL\n),\n\nfinal AS (\n    SELECT DISTINCT\n        ARRAY_TO_STRING([\n            CAST(date AS string),\n            LOWER(campaign)\n        ],'') AS unique_key,\n        date,\n        LOWER(campaign) AS campaign_name,\n        clicks,\n        spend,\n        installs\n    FROM source\n    WHERE counter = 1\n)\n\nSELECT DISTINCT\n    unique_key,\n    date,\n    \n    TRIM(\n        REGEXP_REPLACE(\n            LOWER(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REGEXP_REPLACE(campaign_name,  r'(_install_week.*)', '_install_weekend'), \n                    r'(_install_promo_gl.*)', '_install_promo_global'), \n                r'(_install_promo_re.*)', '_install_promo_regular')\n            ), r'\\+|-', '_')\n        )\n AS campaign_name,\n    IF(REGEXP_CONTAINS(campaign_name, r'\\(R\\)|\\(r\\)'),'retargeting','UA') AS campaign_type,\n    '-' adset_name,\n    clicks,\n    spend,\n    installs,\n    0 impressions\nFROM final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_asa_cab_sheets`"}, "model.perekrestokvprok.stg_budget_and_plan": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data.budget_and_plan"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_budget_and_plan"], "unique_id": "model.perekrestokvprok.stg_budget_and_plan", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='table',\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\n\r\nSELECT\r\n    start_date,\r\n    end_date,\r\n    plan_budget,\r\n    plan_type,\r\n    plan_order\r\nFROM {{ source('sheets_data','budget_and_plan') }}\r\nWHERE start_date IS NOT NULL", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_budget_and_plan.sql", "original_file_path": "models\\staging\\stg_budget_and_plan.sql", "name": "stg_budget_and_plan", "alias": "stg_budget_and_plan", "checksum": {"name": "sha256", "checksum": "2784d3d966efb03e21628284fa088d0676da4d76ddd870f1d92d386060374ce8"}, "tags": [], "refs": [], "sources": [["sheets_data", "budget_and_plan"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_budget_and_plan.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_budget_and_plan.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676546309.054415, "compiled_code": "\n\n\n\n\n\n\nSELECT\n    start_date,\n    end_date,\n    plan_budget,\n    plan_type,\n    plan_order\nFROM `perekrestokvprok-bq`.`sheets_data`.`budget_and_plan`\nWHERE start_date IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_budget_and_plan`"}, "model.perekrestokvprok.stg_campaign_limits": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data.campaign_limits"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_campaign_limits"], "unique_id": "model.perekrestokvprok.stg_campaign_limits", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='table',\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\n\r\nSELECT\r\n    start_date,\r\n    CAST(end_date as DATE) as end_date,\r\n    campaign,\r\n    `limit` as limits,\r\nFROM {{ source('sheets_data', 'campaign_limits') }}\r\nWHERE start_date IS NOT NULL", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_campaign_limits.sql", "original_file_path": "models\\staging\\stg_campaign_limits.sql", "name": "stg_campaign_limits", "alias": "stg_campaign_limits", "checksum": {"name": "sha256", "checksum": "80b7d07d088122a8837f452e749850b29fee5dccf2aa78877a08964cd2f9744f"}, "tags": [], "refs": [], "sources": [["sheets_data", "campaign_limits"]], "metrics": [], "description": "Campaign limits", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_campaign_limits.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_campaign_limits.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676546309.3463573, "compiled_code": "\n\n\n\n\n\n\nSELECT\n    start_date,\n    CAST(end_date as DATE) as end_date,\n    campaign,\n    `limit` as limits,\nFROM `perekrestokvprok-bq`.`sheets_data`.`campaign_limits`\nWHERE start_date IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_campaign_limits`"}, "model.perekrestokvprok.stg_crm_orders": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data.crm_redeem_first_orders", "source.perekrestokvprok.sheets_data.crm_redeem_first_orders"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_crm_orders"], "unique_id": "model.perekrestokvprok.stg_crm_orders", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='table',\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\nSELECT\r\n  date,\r\n  REGEXP_REPLACE(REGEXP_REPLACE(campaign, r'.*\\/ ', ''), r'\\W', '') as campaign,\r\n  COUNT(distinct af_order_id) as orders\r\n --FROM {{ source('sheets_data', 'crm_redeem_first_orders') }}\r\n FROM {{ source('sheets_data', 'crm_redeem_first_orders') }}\r\n WHERE \r\n  orderNumber = 1\r\n  AND bo_order_id IS NOT NULL\r\n  AND site = '\u041d\u043e\u0432\u043e\u0435 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \"\u0412\u043f\u0440\u043e\u043a\"' \r\n  AND date_difference = '\u0414\u0430\u0442\u044b \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442'\r\n  --AND REGEXP_CONTAINS(campaign, r'realweb_inapp')\r\n GROUP BY 1,2", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_crm_orders.sql", "original_file_path": "models\\staging\\stg_crm_orders.sql", "name": "stg_crm_orders", "alias": "stg_crm_orders", "checksum": {"name": "sha256", "checksum": "18b5ef8e05e748daf2164ad0af23c6de09e07cdcadcd519b6727018611600b41"}, "tags": [], "refs": [], "sources": [["sheets_data", "crm_redeem_first_orders"], ["sheets_data", "crm_redeem_first_orders"]], "metrics": [], "description": "Redeemed orders", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_crm_orders.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_crm_orders.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676546309.3463573, "compiled_code": "\n\n\n\n\n\nSELECT\n  date,\n  REGEXP_REPLACE(REGEXP_REPLACE(campaign, r'.*\\/ ', ''), r'\\W', '') as campaign,\n  COUNT(distinct af_order_id) as orders\n --FROM `perekrestokvprok-bq`.`sheets_data`.`crm_redeem_first_orders`\n FROM `perekrestokvprok-bq`.`sheets_data`.`crm_redeem_first_orders`\n WHERE \n  orderNumber = 1\n  AND bo_order_id IS NOT NULL\n  AND site = '\u041d\u043e\u0432\u043e\u0435 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \"\u0412\u043f\u0440\u043e\u043a\"' \n  AND date_difference = '\u0414\u0430\u0442\u044b \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442'\n  --AND REGEXP_CONTAINS(campaign, r'realweb_inapp')\n GROUP BY 1,2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_crm_orders`"}, "model.perekrestokvprok.stg_crm_orders_realwebcpa": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data.crm_redeem_first_orders", "source.perekrestokvprok.sheets_data.crm_redeem_first_orders_realwebcpa"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_crm_orders_realwebcpa"], "unique_id": "model.perekrestokvprok.stg_crm_orders_realwebcpa", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='table',\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\nSELECT\r\n  date,\r\n  REGEXP_REPLACE(REGEXP_REPLACE(campaign, r'.*\\/ ', ''), r'\\W', '') as campaign,\r\n  COUNT(distinct af_order_id) as orders\r\n --FROM {{ source('sheets_data', 'crm_redeem_first_orders') }}\r\n FROM {{ source('sheets_data', 'crm_redeem_first_orders_realwebcpa') }}\r\n WHERE \r\n  orderNumber = 1\r\n  AND bo_order_id IS NOT NULL\r\n  AND site = '\u041d\u043e\u0432\u043e\u0435 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \"\u0412\u043f\u0440\u043e\u043a\"' \r\n  AND date_difference = '\u0414\u0430\u0442\u044b \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442'\r\n GROUP BY 1,2", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_crm_orders_realwebcpa.sql", "original_file_path": "models\\staging\\stg_crm_orders_realwebcpa.sql", "name": "stg_crm_orders_realwebcpa", "alias": "stg_crm_orders_realwebcpa", "checksum": {"name": "sha256", "checksum": "e518f91b2ec2a78aa28b30a129ae237f520fbbfe5aef45a376389583ab0ac586"}, "tags": [], "refs": [], "sources": [["sheets_data", "crm_redeem_first_orders"], ["sheets_data", "crm_redeem_first_orders_realwebcpa"]], "metrics": [], "description": "Redeemed orders_realwebcpa", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_crm_orders_realwebcpa.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_crm_orders_realwebcpa.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676546309.3463573, "compiled_code": "\n\n\n\n\n\nSELECT\n  date,\n  REGEXP_REPLACE(REGEXP_REPLACE(campaign, r'.*\\/ ', ''), r'\\W', '') as campaign,\n  COUNT(distinct af_order_id) as orders\n --FROM `perekrestokvprok-bq`.`sheets_data`.`crm_redeem_first_orders`\n FROM `perekrestokvprok-bq`.`sheets_data`.`crm_redeem_first_orders_realwebcpa`\n WHERE \n  orderNumber = 1\n  AND bo_order_id IS NOT NULL\n  AND site = '\u041d\u043e\u0432\u043e\u0435 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \"\u0412\u043f\u0440\u043e\u043a\"' \n  AND date_difference = '\u0414\u0430\u0442\u044b \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442'\n GROUP BY 1,2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_crm_orders_realwebcpa`"}, "model.perekrestokvprok.stg_facebook_cab_meta": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.perekrestokvprok.normalize"], "nodes": ["source.perekrestokvprok.test2.facebook_ads_ad_stat_minimal_134923481805102", "source.perekrestokvprok.sheets_data.FBNEW_data"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_key", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "cluster_by": ["campaign_type"], "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_facebook_cab_meta"], "unique_id": "model.perekrestokvprok.stg_facebook_cab_meta", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='incremental',\r\n    unique_key='unique_key',\r\n    partition_by={\r\n      \"field\": \"date\",\r\n      \"data_type\": \"date\",\r\n      \"granularity\": \"day\"\r\n    },\r\n    cluster_by = [\"campaign_type\"]\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\nWITH source AS (\r\n  SELECT\r\n      date_start,\r\n      lower(campaign_name) as campaign_name,\r\n      IF(REGEXP_CONTAINS(campaign_name, r'\\[old\\]'),'retargeting','UA') AS campaign_type,\r\n      adset_name,\r\n      ad_name,\r\n      impressions,\r\n      clicks,\r\n      spend,\r\n      actions,\r\n      action_values,\r\n      conversions,\r\n      conversion_values\r\n  FROM  {{ source('test2', 'facebook_ads_ad_stat_minimal_134923481805102') }}\r\n  -- \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a\r\n  -- {% if is_incremental() %}\r\n  -- WHERE date_start = DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY)\r\n  -- {% endif %}\r\n),\r\n\r\nunnests AS (\r\n  SELECT \r\n    ARRAY_TO_STRING([\r\n      CAST(date_start AS STRING),\r\n      campaign_name,\r\n      adset_name,\r\n      ad_name\r\n      ],'') AS unique_key,\r\n    date_start AS date,\r\n    campaign_name,\r\n    campaign_type,\r\n    adset_name,\r\n    ad_name,\r\n    SUM(impressions) AS impressions,\r\n    SUM(clicks) AS clicks,\r\n    SUM((\r\n        SELECT value\r\n        FROM UNNEST(actions)\r\n        WHERE action_type = 'mobile_app_install'\r\n        --'omni_app_install' \u043d\u0435 \u0442\u0440\u0435\u043a\u0430\u0435\u0442\u0441\u044f\r\n    )) AS installs,\r\n    sum(spend) AS spend,\r\n    SUM((\r\n        SELECT value\r\n        FROM UNNEST(actions)\r\n        where action_type = 'app_custom_event.fb_mobile_purchase'\r\n    )) AS purchase,\r\n    SUM((\r\n        SELECT value\r\n        FROM UNNEST(action_values)\r\n        where action_type = 'app_custom_event.fb_mobile_purchase'\r\n    )) AS revenue,\r\n    SUM((\r\n        SELECT value\r\n        FROM UNNEST(conversions)\r\n        WHERE action_type = 'start_trial_mobile_app' \r\n        --'start_trial_total \u043d\u0435 \u0442\u0440\u0435\u043a\u0430\u0435\u0442\u0441\u044f\r\n    )) AS first_purchase,\r\n    SUM((\r\n        SELECT value\r\n        FROM UNNEST(conversion_values)\r\n        WHERE action_type = 'start_trial_total'\r\n    )) AS first_purchase_revenue,\r\n    SUM((\r\n        SELECT value\r\n        FROM UNNEST(actions)\r\n        where action_type = 'app_custom_event.fb_mobile_add_to_cart'\r\n    )) AS add_to_cart,\r\n  FROM source\r\n  GROUP BY 1,2,3,4,5,6\r\n)\r\n\r\nSELECT\r\n    unique_key,\r\n    date,\r\n    {{ normalize('campaign_name') }} AS campaign_name,\r\n    campaign_type,\r\n    adset_name,\r\n    ad_name,\r\n    impressions,\r\n    clicks,\r\n    installs,\r\n    spend,\r\n    purchase,\r\n    revenue,\r\n    first_purchase,\r\n    first_purchase_revenue,\r\n    add_to_cart\r\nFROM unnests\r\n\r\n{% if not is_incremental() %}\r\n\r\n-- \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 --\r\nUNION ALL\r\nSELECT DISTINCT\r\n    ARRAY_TO_STRING([\r\n      CAST(date AS STRING),\r\n      lower(campaign_name),\r\n      adset_name,\r\n      ad_name\r\n      ],'') AS unique_key,\r\n    date,\r\n    lower(campaign_name) campaign_name,\r\n    IF(REGEXP_CONTAINS(campaign_name, r'\\[old\\]'),'retargeting','UA') AS campaign_type,\r\n    adset_name,\r\n    ad_name,\r\n    show AS impressions,\r\n    clicks,\r\n    installs,\r\n    spend,\r\n    cnt_af_purchase AS purchase,\r\n    revenue,\r\n    cnt_first_purchase AS first_purchase,\r\n    first_purchase_revenue,\r\n    add_to_card\r\nFROM {{ source('sheets_data', 'FBNEW_data') }}\r\nWHERE date < (\r\n  SELECT MIN(date)\r\n  FROM unnests\r\n)\r\n\r\n--\u043d\u0430 \u0431\u0443\u0434\u0443\u0449\u0435\u0435 --\r\n-- UNION DISTINCT\r\n-- SELECT\r\n--     unique_key,\r\n--     date,\r\n--     campaign_name,\r\n--     adset_name,\r\n--     ad_name,\r\n--     impressions,\r\n--     clicks,\r\n--     installs,\r\n--     spend,\r\n--     purchase,\r\n--     revenue,\r\n--     first_purchase,\r\n--     first_purchase_revenue,\r\n--     add_to_cart\r\n-- FROM {{ this }}\r\n\r\n{% endif %}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_facebook_cab_meta.sql", "original_file_path": "models\\staging\\stg_facebook_cab_meta.sql", "name": "stg_facebook_cab_meta", "alias": "stg_facebook_cab_meta", "checksum": {"name": "sha256", "checksum": "cf6adcb95b8e30efe0112d699ef0e8b0d305d90f292a4708ef10d6dcffee8771"}, "tags": [], "refs": [], "sources": [["test2", "facebook_ads_ad_stat_minimal_134923481805102"], ["sheets_data", "FBNEW_data"]], "metrics": [], "description": "\u0424\u0435\u0439\u0441\u0431\u0443\u043a \u0438\u0437 \u043c\u0435\u0442\u044b. \u041d\u0435 \u0441\u043e\u0448\u0435\u043b\u0441\u044f, \u043d\u0435 \u044e\u0437\u0430\u0435\u043c", "columns": {"unique_key": {"name": "unique_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "installs": {"name": "installs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "purchase": {"name": "purchase", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revenue": {"name": "revenue", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_purchase": {"name": "first_purchase", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_purchase_revenue": {"name": "first_purchase_revenue", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "add_to_cart": {"name": "add_to_cart", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_facebook_cab_meta.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_facebook_cab_meta.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "unique_key", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "cluster_by": ["campaign_type"]}, "created_at": 1676546309.3154607, "compiled_code": "\n\n\n\n\n\nWITH source AS (\n  SELECT\n      date_start,\n      lower(campaign_name) as campaign_name,\n      IF(REGEXP_CONTAINS(campaign_name, r'\\[old\\]'),'retargeting','UA') AS campaign_type,\n      adset_name,\n      ad_name,\n      impressions,\n      clicks,\n      spend,\n      actions,\n      action_values,\n      conversions,\n      conversion_values\n  FROM  `perekrestokvprok-bq`.`test2`.`facebook_ads_ad_stat_minimal_134923481805102`\n  -- \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a\n  -- \n  -- WHERE date_start = DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY)\n  -- \n),\n\nunnests AS (\n  SELECT \n    ARRAY_TO_STRING([\n      CAST(date_start AS STRING),\n      campaign_name,\n      adset_name,\n      ad_name\n      ],'') AS unique_key,\n    date_start AS date,\n    campaign_name,\n    campaign_type,\n    adset_name,\n    ad_name,\n    SUM(impressions) AS impressions,\n    SUM(clicks) AS clicks,\n    SUM((\n        SELECT value\n        FROM UNNEST(actions)\n        WHERE action_type = 'mobile_app_install'\n        --'omni_app_install' \u043d\u0435 \u0442\u0440\u0435\u043a\u0430\u0435\u0442\u0441\u044f\n    )) AS installs,\n    sum(spend) AS spend,\n    SUM((\n        SELECT value\n        FROM UNNEST(actions)\n        where action_type = 'app_custom_event.fb_mobile_purchase'\n    )) AS purchase,\n    SUM((\n        SELECT value\n        FROM UNNEST(action_values)\n        where action_type = 'app_custom_event.fb_mobile_purchase'\n    )) AS revenue,\n    SUM((\n        SELECT value\n        FROM UNNEST(conversions)\n        WHERE action_type = 'start_trial_mobile_app' \n        --'start_trial_total \u043d\u0435 \u0442\u0440\u0435\u043a\u0430\u0435\u0442\u0441\u044f\n    )) AS first_purchase,\n    SUM((\n        SELECT value\n        FROM UNNEST(conversion_values)\n        WHERE action_type = 'start_trial_total'\n    )) AS first_purchase_revenue,\n    SUM((\n        SELECT value\n        FROM UNNEST(actions)\n        where action_type = 'app_custom_event.fb_mobile_add_to_cart'\n    )) AS add_to_cart,\n  FROM source\n  GROUP BY 1,2,3,4,5,6\n)\n\nSELECT\n    unique_key,\n    date,\n    \n    TRIM(\n        REGEXP_REPLACE(\n            LOWER(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REGEXP_REPLACE(campaign_name,  r'(_install_week.*)', '_install_weekend'), \n                    r'(_install_promo_gl.*)', '_install_promo_global'), \n                r'(_install_promo_re.*)', '_install_promo_regular')\n            ), r'\\+|-', '_')\n        )\n AS campaign_name,\n    campaign_type,\n    adset_name,\n    ad_name,\n    impressions,\n    clicks,\n    installs,\n    spend,\n    purchase,\n    revenue,\n    first_purchase,\n    first_purchase_revenue,\n    add_to_cart\nFROM unnests\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_facebook_cab_meta`"}, "model.perekrestokvprok.stg_facebook_cab_sheets": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize", "macro.dbt.is_incremental"], "nodes": ["source.perekrestokvprok.sheets_data.fb_spreadsheets_data", "source.perekrestokvprok.sheets_data.FBNEW_data"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_key", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "cluster_by": ["campaign_type"], "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_facebook_cab_sheets"], "unique_id": "model.perekrestokvprok.stg_facebook_cab_sheets", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='incremental',\r\n    unique_key='unique_key',\r\n    partition_by={\r\n      \"field\": \"date\",\r\n      \"data_type\": \"date\",\r\n      \"granularity\": \"day\"\r\n    },\r\n    cluster_by = [\"campaign_type\"]\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\nWITH source AS (\r\n  SELECT DISTINCT\r\n        ARRAY_TO_STRING([\r\n        CAST(date AS STRING),\r\n            lower(campaign),\r\n            adset,\r\n            ad\r\n            ],'') AS unique_key,\r\n        date,\r\n        lower(campaign) campaign_name,\r\n        IF(REGEXP_CONTAINS(lower(campaign), r'\\[old\\]'),'retargeting','UA') AS campaign_type,\r\n        adset adset_name,\r\n        ad ad_name,\r\n        show AS impressions,\r\n        clicks,\r\n        installs,\r\n        spend,\r\n        purchase,\r\n        purchase_revenue revenue,\r\n        first_purchase,\r\n        first_purchase_revenue,\r\n        ad_to_cars add_to_cart,\r\n        ROW_NUMBER() OVER(PARTITION BY date, campaign, adset, ad) AS counter\r\n    FROM {{ source('sheets_data', 'fb_spreadsheets_data') }}\r\n)\r\n\r\nSELECT\r\n    unique_key,\r\n    date,\r\n    {{ normalize('campaign_name') }} AS campaign_name,\r\n    campaign_type,\r\n    adset_name,\r\n    ad_name,\r\n    impressions,\r\n    clicks,\r\n    installs,\r\n    spend,\r\n    purchase,\r\n    revenue,\r\n    first_purchase,\r\n    first_purchase_revenue,\r\n    add_to_cart\r\nFROM source\r\nWHERE counter = 1\r\n\r\n{% if not is_incremental() %}\r\n\r\n-- \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 --\r\n\r\nUNION ALL\r\nSELECT DISTINCT\r\n    ARRAY_TO_STRING([\r\n      CAST(date AS STRING),\r\n      lower(campaign_name),\r\n      adset_name,\r\n      ad_name\r\n      ],'') AS unique_key,\r\n    date,\r\n    lower(campaign_name) campaign_name,\r\n    IF(REGEXP_CONTAINS(campaign_name, r'\\[old\\]'),'retargeting','UA') AS campaign_type,\r\n    adset_name,\r\n    ad_name,\r\n    show AS impressions,\r\n    clicks,\r\n    installs,\r\n    spend,\r\n    cnt_af_purchase AS purchase,\r\n    revenue,\r\n    cnt_first_purchase AS first_purchase,\r\n    first_purchase_revenue,\r\n    add_to_card\r\nFROM {{ source('sheets_data', 'FBNEW_data') }}\r\nWHERE date < (\r\n  SELECT MIN(date)\r\n  FROM source\r\n)\r\n\r\n{% endif %}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_facebook_cab_sheets.sql", "original_file_path": "models\\staging\\stg_facebook_cab_sheets.sql", "name": "stg_facebook_cab_sheets", "alias": "stg_facebook_cab_sheets", "checksum": {"name": "sha256", "checksum": "be40165ecde5e879d1af5e17000323c6b702f6f8d088f7093db0586d60a6e539"}, "tags": [], "refs": [], "sources": [["sheets_data", "fb_spreadsheets_data"], ["sheets_data", "FBNEW_data"]], "metrics": [], "description": "\u0424\u0411 \u0438\u0437 perek_settings", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_facebook_cab_sheets.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_facebook_cab_sheets.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "unique_key", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "cluster_by": ["campaign_type"]}, "created_at": 1676546309.341374, "compiled_code": "\n\n\n\n\n\nWITH source AS (\n  SELECT DISTINCT\n        ARRAY_TO_STRING([\n        CAST(date AS STRING),\n            lower(campaign),\n            adset,\n            ad\n            ],'') AS unique_key,\n        date,\n        lower(campaign) campaign_name,\n        IF(REGEXP_CONTAINS(lower(campaign), r'\\[old\\]'),'retargeting','UA') AS campaign_type,\n        adset adset_name,\n        ad ad_name,\n        show AS impressions,\n        clicks,\n        installs,\n        spend,\n        purchase,\n        purchase_revenue revenue,\n        first_purchase,\n        first_purchase_revenue,\n        ad_to_cars add_to_cart,\n        ROW_NUMBER() OVER(PARTITION BY date, campaign, adset, ad) AS counter\n    FROM `perekrestokvprok-bq`.`sheets_data`.`fb_spreadsheets_data`\n)\n\nSELECT\n    unique_key,\n    date,\n    \n    TRIM(\n        REGEXP_REPLACE(\n            LOWER(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REGEXP_REPLACE(campaign_name,  r'(_install_week.*)', '_install_weekend'), \n                    r'(_install_promo_gl.*)', '_install_promo_global'), \n                r'(_install_promo_re.*)', '_install_promo_regular')\n            ), r'\\+|-', '_')\n        )\n AS campaign_name,\n    campaign_type,\n    adset_name,\n    ad_name,\n    impressions,\n    clicks,\n    installs,\n    spend,\n    purchase,\n    revenue,\n    first_purchase,\n    first_purchase_revenue,\n    add_to_cart\nFROM source\nWHERE counter = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_facebook_cab_sheets`"}, "model.perekrestokvprok.stg_google_cab_sheets": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize", "macro.dbt.is_incremental"], "nodes": ["source.perekrestokvprok.sheets_data.google_ads_costs_and_installs", "source.perekrestokvprok.agg_data.google_ads_costs_and_installs_sum"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_key", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "cluster_by": ["campaign_type"], "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_google_cab_sheets"], "unique_id": "model.perekrestokvprok.stg_google_cab_sheets", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='incremental',\r\n    unique_key='unique_key',\r\n    partition_by={\r\n      \"field\": \"date\",\r\n      \"data_type\": \"date\",\r\n      \"granularity\": \"day\"\r\n    },\r\n    cluster_by = [\"campaign_type\"]\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\nWITH source AS (\r\n    SELECT DISTINCT\r\n        date,\r\n        LOWER(campaign_name) campaign_name,\r\n        adset_name,\r\n        costs,\r\n        installs,\r\n        clicks,\r\n        impressions\r\n    FROM {{ source('sheets_data', 'google_ads_costs_and_installs') }}\r\n    WHERE date IS NOT NULL\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        ARRAY_TO_STRING([\r\n            CAST(date AS STRING),\r\n            campaign_name,\r\n            adset_name\r\n        ],'') AS unique_key,\r\n        date,\r\n        campaign_name,\r\n        IF(\r\n          REGEXP_CONTAINS(campaign_name, r'[_\\[]old[\\]_]'),\r\n          'retargeting','UA') AS campaign_type,\r\n        adset_name,\r\n        costs AS spend,\r\n        installs,\r\n        clicks,\r\n        impressions\r\n    FROM source\r\n)\r\n\r\nSELECT\r\n    unique_key,\r\n    date,\r\n    {{ normalize('campaign_name') }} AS campaign_name,\r\n    campaign_type,\r\n    adset_name,\r\n    spend,\r\n    installs,\r\n    clicks,\r\n    impressions\r\nFROM final\r\n\r\n-- {% if not is_incremental() %}\r\n\r\n-- -- \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 --\r\n-- UNION ALL\r\n-- SELECT DISTINCT\r\n--     ARRAY_TO_STRING([\r\n--             CAST(date AS STRING),\r\n--             LOWER(campaign_name),\r\n--             adset_name\r\n--     ],'') AS unique_key,\r\n--     date,\r\n--     LOWER(campaign_name) campaign_name,\r\n--     IF(REGEXP_CONTAINS(campaign_name, r'\\[old\\]'),'retargeting','UA') AS campaign_type,\r\n--     adset_name,\r\n--     costs AS spend,\r\n--     installs,\r\n--     clicks,\r\n--     impressions\r\n-- FROM {{ source('agg_data', 'google_ads_costs_and_installs_sum') }}\r\n-- WHERE date NOT IN  < (\r\n--   SELECT DISTINCT date\r\n--   FROM final\r\n-- )\r\n-- AND date IS NOT NULL\r\n\r\n-- {% endif %}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_google_cab_sheets.sql", "original_file_path": "models\\staging\\stg_google_cab_sheets.sql", "name": "stg_google_cab_sheets", "alias": "stg_google_cab_sheets", "checksum": {"name": "sha256", "checksum": "718938c90f16cb5d777f617d3e50cf8aa70f31eb3d4fde3be1f35821704aeac9"}, "tags": [], "refs": [], "sources": [["sheets_data", "google_ads_costs_and_installs"], ["agg_data", "google_ads_costs_and_installs_sum"]], "metrics": [], "description": "\u0413\u0443\u0433\u043b \u0438\u0437 perek_settings", "columns": {"unique_key": {"name": "unique_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "installs": {"name": "installs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_google_cab_sheets.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_google_cab_sheets.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "unique_key", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "cluster_by": ["campaign_type"]}, "created_at": 1676546309.3074875, "compiled_code": "\n\n\n\n\n\nWITH source AS (\n    SELECT DISTINCT\n        date,\n        LOWER(campaign_name) campaign_name,\n        adset_name,\n        costs,\n        installs,\n        clicks,\n        impressions\n    FROM `perekrestokvprok-bq`.`sheets_data`.`google_ads_costs_and_installs`\n    WHERE date IS NOT NULL\n),\n\nfinal AS (\n    SELECT\n        ARRAY_TO_STRING([\n            CAST(date AS STRING),\n            campaign_name,\n            adset_name\n        ],'') AS unique_key,\n        date,\n        campaign_name,\n        IF(\n          REGEXP_CONTAINS(campaign_name, r'[_\\[]old[\\]_]'),\n          'retargeting','UA') AS campaign_type,\n        adset_name,\n        costs AS spend,\n        installs,\n        clicks,\n        impressions\n    FROM source\n)\n\nSELECT\n    unique_key,\n    date,\n    \n    TRIM(\n        REGEXP_REPLACE(\n            LOWER(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REGEXP_REPLACE(campaign_name,  r'(_install_week.*)', '_install_weekend'), \n                    r'(_install_promo_gl.*)', '_install_promo_global'), \n                r'(_install_promo_re.*)', '_install_promo_regular')\n            ), r'\\+|-', '_')\n        )\n AS campaign_name,\n    campaign_type,\n    adset_name,\n    spend,\n    installs,\n    clicks,\n    impressions\nFROM final\n\n-- ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_google_cab_sheets`"}, "model.perekrestokvprok.stg_google_dbm": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.test2.google_dbm_existed_dbm_report_123"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_google_dbm"], "unique_id": "model.perekrestokvprok.stg_google_dbm", "raw_code": "WITH source AS (\r\n    SELECT *,\r\n    ROW_NUMBER() \r\n        OVER (PARTITION BY InsertionOrderID,LineItemID, Date ORDER BY DATE(_PARTITIONTIME) DESC) AS pd_rw\r\n    FROM {{ source('test2', 'google_dbm_existed_dbm_report_123') }}\r\n)\r\n\r\nSELECT \r\n    Date,\r\n    Advertiser,\r\n    AdvertiserID AS advertiser_id,\r\n    AdvertiserCurrency AS advertiser_currency,\r\n    InsertionOrder AS insertion_order,\r\n    InsertionOrderID AS insertion_order_id,\r\n    LineItem AS line_item,\r\n    LineItemID AS line_item_id,\r\n    LineItemType AS line_item_type,\r\n    SAFE_CAST(Impressions AS INT64) AS impressions,\r\n    SAFE_CAST(Clicks AS INT64) AS clicks,\r\n    SAFE_CAST(ClickRateCTR AS FLOAT64) AS click_rate_ctr,\r\n    SAFE_CAST(RevenueAdvCurrency AS FLOAT64) AS revenue_adv_currency,\r\n    SAFE_CAST(ProfitAdvertiserCurrency AS FLOAT64) AS profit_advertiser_currency,\r\n    SAFE_CAST(ProfitMargin AS FLOAT64) AS profit_margin\r\nFROM source\r\nWHERE pd_rw = 1", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_google_dbm.sql", "original_file_path": "models\\staging\\stg_google_dbm.sql", "name": "stg_google_dbm", "alias": "stg_google_dbm", "checksum": {"name": "sha256", "checksum": "4e294957e38ff763c54a171d8cdeb01f96ce79bc8d8f55c4e12ebd817102caef"}, "tags": [], "refs": [], "sources": [["test2", "google_dbm_existed_dbm_report_123"]], "metrics": [], "description": "\u0413\u0443\u0433\u043b \u0438\u0437 \u043c\u0435\u0442\u044b \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0430", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser": {"name": "advertiser", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_currency": {"name": "advertiser_currency", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "insertion_order": {"name": "insertion_order", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "insertion_order_id": {"name": "insertion_order_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item": {"name": "line_item", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_type": {"name": "line_item_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_rate_ctr": {"name": "click_rate_ctr", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revenue_adv_currency": {"name": "revenue_adv_currency", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profit_advertiser_currency": {"name": "profit_advertiser_currency", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profit_margin": {"name": "profit_margin", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_google_dbm.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_google_dbm.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676546309.3044975, "compiled_code": "WITH source AS (\n    SELECT *,\n    ROW_NUMBER() \n        OVER (PARTITION BY InsertionOrderID,LineItemID, Date ORDER BY DATE(_PARTITIONTIME) DESC) AS pd_rw\n    FROM `perekrestokvprok-bq`.`test2`.`google_dbm_existed_dbm_report_123`\n)\n\nSELECT \n    Date,\n    Advertiser,\n    AdvertiserID AS advertiser_id,\n    AdvertiserCurrency AS advertiser_currency,\n    InsertionOrder AS insertion_order,\n    InsertionOrderID AS insertion_order_id,\n    LineItem AS line_item,\n    LineItemID AS line_item_id,\n    LineItemType AS line_item_type,\n    SAFE_CAST(Impressions AS INT64) AS impressions,\n    SAFE_CAST(Clicks AS INT64) AS clicks,\n    SAFE_CAST(ClickRateCTR AS FLOAT64) AS click_rate_ctr,\n    SAFE_CAST(RevenueAdvCurrency AS FLOAT64) AS revenue_adv_currency,\n    SAFE_CAST(ProfitAdvertiserCurrency AS FLOAT64) AS profit_advertiser_currency,\n    SAFE_CAST(ProfitMargin AS FLOAT64) AS profit_margin\nFROM source\nWHERE pd_rw = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_google_dbm`"}, "model.perekrestokvprok.stg_huawei_cab_sheets": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize"], "nodes": ["source.perekrestokvprok.sheets_data.huawei_data"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_key", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "cluster_by": ["campaign_type"], "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_huawei_cab_sheets"], "unique_id": "model.perekrestokvprok.stg_huawei_cab_sheets", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='incremental',\r\n    unique_key='unique_key',\r\n    partition_by={\r\n      \"field\": \"date\",\r\n      \"data_type\": \"date\",\r\n      \"granularity\": \"day\"\r\n    },\r\n    cluster_by = [\"campaign_type\"]\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\nWITH source AS (\r\n    SELECT DISTINCT\r\n        date,\r\n        {{ normalize('campaign_name')}} campaign_name,\r\n        status,\r\n        cost,\r\n        clicks,\r\n        impressions,\r\n        activations,\r\n        campaign_type AS type,\r\n        exchange_rate\r\n    FROM {{ source('sheets_data', 'huawei_data') }}\r\n    WHERE date IS NOT NULL\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        ARRAY_TO_STRING([\r\n            CAST(date AS STRING),\r\n            campaign_name\r\n        ],'') AS unique_key,\r\n        date,\r\n        campaign_name,\r\n        IF(\r\n          REGEXP_CONTAINS(campaign_name, r'[_\\[]new[\\]_]'),'UA','retargeting'\r\n          ) AS campaign_type,\r\n        type,\r\n        status,\r\n        activations,\r\n        cost,\r\n        cost * exchange_rate AS spend,\r\n        clicks,\r\n        impressions,\r\n        exchange_rate\r\n    FROM source\r\n)\r\n\r\nSELECT\r\n    unique_key,\r\n    date,\r\n    campaign_name,\r\n    campaign_type,\r\n    type,\r\n    status,\r\n    activations,\r\n    cost,\r\n    spend,\r\n    clicks,\r\n    impressions,\r\n    exchange_rate\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_huawei_cab_sheets.sql", "original_file_path": "models\\staging\\stg_huawei_cab_sheets.sql", "name": "stg_huawei_cab_sheets", "alias": "stg_huawei_cab_sheets", "checksum": {"name": "sha256", "checksum": "11d9279f5280ba015f011f6d44606ac6510326bb64c3afcae339e515ba6eb7a7"}, "tags": [], "refs": [], "sources": [["sheets_data", "huawei_data"]], "metrics": [], "description": "Huawei \u0438\u0437 perek_settings", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_huawei_cab_sheets.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_huawei_cab_sheets.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "unique_key", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "cluster_by": ["campaign_type"]}, "created_at": 1676546309.3453608, "compiled_code": "\n\n\n\n\n\nWITH source AS (\n    SELECT DISTINCT\n        date,\n        \n    TRIM(\n        REGEXP_REPLACE(\n            LOWER(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REGEXP_REPLACE(campaign_name,  r'(_install_week.*)', '_install_weekend'), \n                    r'(_install_promo_gl.*)', '_install_promo_global'), \n                r'(_install_promo_re.*)', '_install_promo_regular')\n            ), r'\\+|-', '_')\n        )\n campaign_name,\n        status,\n        cost,\n        clicks,\n        impressions,\n        activations,\n        campaign_type AS type,\n        exchange_rate\n    FROM `perekrestokvprok-bq`.`sheets_data`.`huawei_data`\n    WHERE date IS NOT NULL\n),\n\nfinal AS (\n    SELECT\n        ARRAY_TO_STRING([\n            CAST(date AS STRING),\n            campaign_name\n        ],'') AS unique_key,\n        date,\n        campaign_name,\n        IF(\n          REGEXP_CONTAINS(campaign_name, r'[_\\[]new[\\]_]'),'UA','retargeting'\n          ) AS campaign_type,\n        type,\n        status,\n        activations,\n        cost,\n        cost * exchange_rate AS spend,\n        clicks,\n        impressions,\n        exchange_rate\n    FROM source\n)\n\nSELECT\n    unique_key,\n    date,\n    campaign_name,\n    campaign_type,\n    type,\n    status,\n    activations,\n    cost,\n    spend,\n    clicks,\n    impressions,\n    exchange_rate\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_huawei_cab_sheets`"}, "model.perekrestokvprok.stg_mistake_cmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data.mistake_cmp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_mistake_cmp"], "unique_id": "model.perekrestokvprok.stg_mistake_cmp", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='table',\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\n\r\nSELECT\r\n    mistake,\r\n    correct\r\nFROM {{ source('sheets_data', 'mistake_cmp') }}\r\nWHERE mistake IS NOT NULL", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_mistake_cmp.sql", "original_file_path": "models\\staging\\stg_mistake_cmp.sql", "name": "stg_mistake_cmp", "alias": "stg_mistake_cmp", "checksum": {"name": "sha256", "checksum": "5fa61933ecf8d186804ecb2577abc370cff48364447e1e93efd4725b25eab3a6"}, "tags": [], "refs": [], "sources": [["sheets_data", "mistake_cmp"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_mistake_cmp.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_mistake_cmp.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676546309.1219137, "compiled_code": "\n\n\n\n\n\n\nSELECT\n    mistake,\n    correct\nFROM `perekrestokvprok-bq`.`sheets_data`.`mistake_cmp`\nWHERE mistake IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_mistake_cmp`"}, "model.perekrestokvprok.stg_partner_limits": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data.limits_sheet"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_partner_limits"], "unique_id": "model.perekrestokvprok.stg_partner_limits", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='table',\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\n\r\nSELECT\r\n    start_date,\r\n    end_date,\r\n    partner,\r\n    `limit` as limits,\r\n    type,\r\n    source\r\nFROM {{ source('sheets_data','limits_sheet') }}\r\nWHERE start_date IS NOT NULL", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_partner_limits.sql", "original_file_path": "models\\staging\\stg_partner_limits.sql", "name": "stg_partner_limits", "alias": "stg_partner_limits", "checksum": {"name": "sha256", "checksum": "2684709c4f95d2009cb4dc90338d3d6f0f43f330f722c187ef052e86dfd852db"}, "tags": [], "refs": [], "sources": [["sheets_data", "limits_sheet"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_partner_limits.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_partner_limits.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676546309.1283922, "compiled_code": "\n\n\n\n\n\n\nSELECT\n    start_date,\n    end_date,\n    partner,\n    `limit` as limits,\n    type,\n    source\nFROM `perekrestokvprok-bq`.`sheets_data`.`limits_sheet`\nWHERE start_date IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_partner_limits`"}, "model.perekrestokvprok.stg_placement_dict": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.DCM.Placemant_dict"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_placement_dict"], "unique_id": "model.perekrestokvprok.stg_placement_dict", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='table',\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\n\r\nSELECT\r\n    PlacementID AS placement_id,\r\n    Placement,\r\n    InsertionOrderID AS insertion_order_id\r\nFROM {{ source('DCM', 'Placemant_dict') }}\r\nWHERE PlacementID IS NOT NULL", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_placement_dict.sql", "original_file_path": "models\\staging\\stg_placement_dict.sql", "name": "stg_placement_dict", "alias": "stg_placement_dict", "checksum": {"name": "sha256", "checksum": "a2d99f1c45434fd081fe93d81436698b1a66559491d5a5d9cb995b363972b09d"}, "tags": [], "refs": [], "sources": [["DCM", "Placemant_dict"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_placement_dict.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_placement_dict.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676546309.1361454, "compiled_code": "\n\n\n\n\n\n\nSELECT\n    PlacementID AS placement_id,\n    Placement,\n    InsertionOrderID AS insertion_order_id\nFROM `perekrestokvprok-bq`.`DCM`.`Placemant_dict`\nWHERE PlacementID IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_placement_dict`"}, "model.perekrestokvprok.stg_promocode_client_data": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.agg_data.promocod_client_data"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_promocode_client_data"], "unique_id": "model.perekrestokvprok.stg_promocode_client_data", "raw_code": "SELECT\r\n    DATE(orderDate) AS order_date,\r\n    region,\r\n    promoname AS promo_name,\r\n    promonamefull AS promo_name_full,\r\n    promocode AS promo_code,\r\n    orderid AS order_id,\r\n    platform,\r\n    revenue,\r\n    cnt_order AS order_count\r\nFROM {{ source('agg_data','promocod_client_data') }}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_promocode_client_data.sql", "original_file_path": "models\\staging\\stg_promocode_client_data.sql", "name": "stg_promocode_client_data", "alias": "stg_promocode_client_data", "checksum": {"name": "sha256", "checksum": "b5d858b9707134551709d3fe43889433686139bc98b3f723297743f7ecd7cd06"}, "tags": [], "refs": [], "sources": [["agg_data", "promocod_client_data"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_promocode_client_data.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_promocode_client_data.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676546309.1478262, "compiled_code": "SELECT\n    DATE(orderDate) AS order_date,\n    region,\n    promoname AS promo_name,\n    promonamefull AS promo_name_full,\n    promocode AS promo_code,\n    orderid AS order_id,\n    platform,\n    revenue,\n    cnt_order AS order_count\nFROM `perekrestokvprok-bq`.`agg_data`.`promocod_client_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_promocode_client_data`"}, "model.perekrestokvprok.stg_promo_dict_sheets": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data.promo_dict_sheets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_promo_dict_sheets"], "unique_id": "model.perekrestokvprok.stg_promo_dict_sheets", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='table',\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\n\r\nSELECT DISTINCT\r\n    LOWER(promo) AS promo,\r\n    name\r\nFROM {{ source('sheets_data', 'promo_dict_sheets') }}\r\nWHERE promo IS NOT NULL", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_promo_dict_sheets.sql", "original_file_path": "models\\staging\\stg_promo_dict_sheets.sql", "name": "stg_promo_dict_sheets", "alias": "stg_promo_dict_sheets", "checksum": {"name": "sha256", "checksum": "ae3e7888f77d48009e293bd435f833ad24dcc1b0afa5cfbc2516d846af7a7fef"}, "tags": [], "refs": [], "sources": [["sheets_data", "promo_dict_sheets"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_promo_dict_sheets.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_promo_dict_sheets.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676546309.149887, "compiled_code": "\n\n\n\n\n\n\nSELECT DISTINCT\n    LOWER(promo) AS promo,\n    name\nFROM `perekrestokvprok-bq`.`sheets_data`.`promo_dict_sheets`\nWHERE promo IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_promo_dict_sheets`"}, "model.perekrestokvprok.stg_promo_sheets": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data.promo_sheets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_promo_sheets"], "unique_id": "model.perekrestokvprok.stg_promo_sheets", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='table',\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\n\r\nSELECT\r\n    date_start,\r\n    date_end,\r\n    promocod AS promocode,\r\n    type,\r\n    Channel AS channel\r\nFROM {{ source('sheets_data', 'promo_sheets') }}\r\nWHERE date_start IS NOT NULL", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_promo_sheets.sql", "original_file_path": "models\\staging\\stg_promo_sheets.sql", "name": "stg_promo_sheets", "alias": "stg_promo_sheets", "checksum": {"name": "sha256", "checksum": "9bf43ae1a549172e17669d67297efb1255d7ecd9e32924b5eadeb99a8c151af7"}, "tags": [], "refs": [], "sources": [["sheets_data", "promo_sheets"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_promo_sheets.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_promo_sheets.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676546309.1570454, "compiled_code": "\n\n\n\n\n\n\nSELECT\n    date_start,\n    date_end,\n    promocod AS promocode,\n    type,\n    Channel AS channel\nFROM `perekrestokvprok-bq`.`sheets_data`.`promo_sheets`\nWHERE date_start IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_promo_sheets`"}, "model.perekrestokvprok.stg_rate_info": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.perekrestokvprok.sheets_data._rates"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_rate_info"], "unique_id": "model.perekrestokvprok.stg_rate_info", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='table',\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\n\r\nSELECT\r\nDISTINCT\r\n    start_date,\r\n    end_date,\r\n    partner,\r\n    platform,\r\n    rate_for_parthner AS rate_for_partner,\r\n    plan_f_p,\r\n    rate_for_us,\r\n    type,\r\n    source,\r\n    CASE\r\n      WHEN REGEXP_CONTAINS(campaign_name, r'deep_outflow') THEN 'deep_outflow'\r\n      WHEN type = 'RTG' and start_date >= '2022-10-01' and end_date <= '2022-10-04' THEN 'deep_outflow'\r\n      WHEN REGEXP_CONTAINS(campaign_name, r'first_open_not_buy_rtg') THEN 'first_open_not_buy_rtg'\r\n      WHEN REGEXP_CONTAINS(campaign_name, r'installed_the_app_but_not_buy_rtg') THEN 'installed_the_app_but_not_buy_rtg'\r\n      WHEN REGEXP_CONTAINS(campaign_name, r'registered_but_not_buy_rtg') THEN 'registered_but_not_buy_rtg'\r\n      ELSE 'Other'\r\n    END as base\r\nFROM {{ source('sheets_data', '_rates') }}\r\nWHERE start_date IS NOT NULL", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_rate_info.sql", "original_file_path": "models\\staging\\stg_rate_info.sql", "name": "stg_rate_info", "alias": "stg_rate_info", "checksum": {"name": "sha256", "checksum": "7016eca1f4b33f8e591c7d9d2c1437bcc2fc127a6c5850f74b5343575dced3ca"}, "tags": [], "refs": [], "sources": [["sheets_data", "_rates"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_rate_info.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_rate_info.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676546309.162994, "compiled_code": "\n\n\n\n\n\n\nSELECT\nDISTINCT\n    start_date,\n    end_date,\n    partner,\n    platform,\n    rate_for_parthner AS rate_for_partner,\n    plan_f_p,\n    rate_for_us,\n    type,\n    source,\n    CASE\n      WHEN REGEXP_CONTAINS(campaign_name, r'deep_outflow') THEN 'deep_outflow'\n      WHEN type = 'RTG' and start_date >= '2022-10-01' and end_date <= '2022-10-04' THEN 'deep_outflow'\n      WHEN REGEXP_CONTAINS(campaign_name, r'first_open_not_buy_rtg') THEN 'first_open_not_buy_rtg'\n      WHEN REGEXP_CONTAINS(campaign_name, r'installed_the_app_but_not_buy_rtg') THEN 'installed_the_app_but_not_buy_rtg'\n      WHEN REGEXP_CONTAINS(campaign_name, r'registered_but_not_buy_rtg') THEN 'registered_but_not_buy_rtg'\n      ELSE 'Other'\n    END as base\nFROM `perekrestokvprok-bq`.`sheets_data`.`_rates`\nWHERE start_date IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_rate_info`"}, "model.perekrestokvprok.stg_tiktok_cab_meta": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.perekrestokvprok.test2.tiktok_perek_settings_6952834783391023106", "source.perekrestokvprok.sheets_data.TIKTOK_table"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_key", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "cluster_by": ["campaign_type"], "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_tiktok_cab_meta"], "unique_id": "model.perekrestokvprok.stg_tiktok_cab_meta", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='incremental',\r\n    unique_key='unique_key',\r\n    on_schema_change='append_new_columns',\r\n    partition_by={\r\n      \"field\": \"date\",\r\n      \"data_type\": \"date\",\r\n      \"granularity\": \"day\"\r\n    },\r\n    cluster_by = [\"campaign_type\"]\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\nWITH source AS (\r\n    SELECT\r\n        stat_time_day,\r\n        LOWER(campaign_name) AS campaign_name,\r\n        adgroup_name,\r\n        impressions,\r\n        reach,\r\n        spend,\r\n        clicks,\r\n        total_purchase,\r\n        total_achieve_level,\r\n        app_install\r\n    FROM {{ source('test2', 'tiktok_perek_settings_6952834783391023106') }}\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        ARRAY_TO_STRING([\r\n            CAST(DATE(stat_time_day) AS STRING),\r\n            campaign_name,\r\n            adgroup_name\r\n        ],'') AS unique_key,\r\n        DATE(stat_time_day) AS date,\r\n        campaign_name,\r\n        IF(REGEXP_CONTAINS(campaign_name, r'_ret_'),'retargeting','UA') AS campaign_type,\r\n        adgroup_name AS adset_name,\r\n        impressions,\r\n        reach,\r\n        spend,\r\n        clicks,\r\n        total_purchase AS purchase,\r\n        total_achieve_level AS first_purchase,\r\n        app_install\r\n    FROM source\r\n)\r\n\r\nSELECT\r\n    unique_key,\r\n    date,\r\n    campaign_name,\r\n    campaign_type,\r\n    adset_name,\r\n    impressions,\r\n    reach,\r\n    spend,\r\n    clicks,\r\n    purchase,\r\n    first_purchase,\r\n    app_install\r\nFROM final\r\n\r\n{% if not is_incremental() %}\r\n\r\n-- \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 --\r\nUNION ALL\r\nSELECT DISTINCT\r\n    ARRAY_TO_STRING([\r\n      CAST(date AS STRING),\r\n      LOWER(campaign_name),\r\n      ad_group_name\r\n      ],'') AS unique_key,\r\n    date,\r\n    LOWER(campaign_name) AS campaign_name,\r\n    IF(REGEXP_CONTAINS(LOWER(campaign_name), r'_ret_'),'retargeting','UA') AS campaign_type,\r\n    ad_group_name AS adset_name,\r\n    0 AS impressions,\r\n    0 AS reach,\r\n    cost AS spend,\r\n    0 AS clicks,\r\n    total_purchases AS purchase,\r\n    total_achieve_level\t AS first_purchase,\r\n    0 AS app_install\r\nFROM {{ source('sheets_data', 'TIKTOK_table') }}\r\nWHERE date < (\r\n  SELECT MIN(date)\r\n  FROM final\r\n)\r\n\r\n{% endif %}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_tiktok_cab_meta.sql", "original_file_path": "models\\staging\\stg_tiktok_cab_meta.sql", "name": "stg_tiktok_cab_meta", "alias": "stg_tiktok_cab_meta", "checksum": {"name": "sha256", "checksum": "40ec316ab89cb60f241b721124834e2e0d919de7636af19b5b4553cdb89e32e5"}, "tags": [], "refs": [], "sources": [["test2", "tiktok_perek_settings_6952834783391023106"], ["sheets_data", "TIKTOK_table"]], "metrics": [], "description": "\u0422\u0438\u043a\u0442\u043e\u043a \u0438\u0437 \u043c\u0435\u0442\u044b", "columns": {"unique_key": {"name": "unique_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adset_name": {"name": "adset_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reach": {"name": "reach", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "purchase": {"name": "purchase", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_purchase": {"name": "first_purchase", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_tiktok_cab_meta.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_tiktok_cab_meta.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "unique_key", "on_schema_change": "append_new_columns", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "cluster_by": ["campaign_type"]}, "created_at": 1676546309.299514, "compiled_code": "\n\n\n\n\n\nWITH source AS (\n    SELECT\n        stat_time_day,\n        LOWER(campaign_name) AS campaign_name,\n        adgroup_name,\n        impressions,\n        reach,\n        spend,\n        clicks,\n        total_purchase,\n        total_achieve_level,\n        app_install\n    FROM `perekrestokvprok-bq`.`test2`.`tiktok_perek_settings_6952834783391023106`\n),\n\nfinal AS (\n    SELECT\n        ARRAY_TO_STRING([\n            CAST(DATE(stat_time_day) AS STRING),\n            campaign_name,\n            adgroup_name\n        ],'') AS unique_key,\n        DATE(stat_time_day) AS date,\n        campaign_name,\n        IF(REGEXP_CONTAINS(campaign_name, r'_ret_'),'retargeting','UA') AS campaign_type,\n        adgroup_name AS adset_name,\n        impressions,\n        reach,\n        spend,\n        clicks,\n        total_purchase AS purchase,\n        total_achieve_level AS first_purchase,\n        app_install\n    FROM source\n)\n\nSELECT\n    unique_key,\n    date,\n    campaign_name,\n    campaign_type,\n    adset_name,\n    impressions,\n    reach,\n    spend,\n    clicks,\n    purchase,\n    first_purchase,\n    app_install\nFROM final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_tiktok_cab_meta`"}, "model.perekrestokvprok.stg_twitter_cab_sheets": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize", "macro.dbt.is_incremental"], "nodes": ["source.perekrestokvprok.sheets_data.twitter_sheets", "source.perekrestokvprok.sheets_data.twitter_data"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_key", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "cluster_by": ["campaign_type"], "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_twitter_cab_sheets"], "unique_id": "model.perekrestokvprok.stg_twitter_cab_sheets", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='incremental',\r\n    unique_key='unique_key',\r\n    partition_by={\r\n      \"field\": \"date\",\r\n      \"data_type\": \"date\",\r\n      \"granularity\": \"day\"\r\n    },\r\n    cluster_by = [\"campaign_type\"]\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\nWITH source AS (\r\n    SELECT DISTINCT\r\n        string_field_0,\r\n        string_field_2,\r\n        string_field_9,\r\n        string_field_10,\r\n        ROW_NUMBER() OVER(PARTITION BY string_field_0, string_field_2) AS counter\r\n    FROM {{ source('sheets_data', 'twitter_sheets') }}\r\n    WHERE string_field_0 IS NOT NULL\r\n),\r\n\r\nfinal AS (\r\n    SELECT DISTINCT\r\n        ARRAY_TO_STRING([\r\n            CAST(DATE(REPLACE(string_field_0,'.','-')) AS STRING),\r\n            LOWER(string_field_2)\r\n        ],'') AS unique_key,\r\n        DATE(REPLACE(string_field_0,'.','-')) AS date,\r\n        LOWER(string_field_2) AS campaign_name,\r\n        SAFE_CAST(REPLACE(string_field_9,',','.') AS FLOAT64) AS impressions,\r\n        SAFE_CAST(REPLACE(string_field_10,',','.') AS FLOAT64) AS spend\r\n    FROM source\r\n    WHERE counter = 1\r\n)\r\n\r\nSELECT DISTINCT\r\n    unique_key,\r\n    date,\r\n    {{ normalize('campaign_name') }} AS campaign_name,\r\n    IF(REGEXP_CONTAINS(campaign_name, r'_old_'),'retargeting','UA') AS campaign_type,\r\n    impressions,\r\n    spend\r\nFROM final\r\n\r\n{% if not is_incremental() %}\r\n\r\n-- \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 --\r\nUNION ALL\r\nSELECT DISTINCT\r\n    ARRAY_TO_STRING([\r\n      CAST(date AS STRING),\r\n      LOWER(campaign_name)\r\n      ],'') AS unique_key,\r\n    date,\r\n    LOWER(campaign_name) campaign_name,\r\n    IF(REGEXP_CONTAINS(campaign_name, r'_old_'),'retargeting','UA') AS campaign_type,\r\n    impressions,\r\n    spend,\r\nFROM {{ source('sheets_data', 'twitter_data') }}\r\nWHERE date < (\r\n  SELECT MIN(date)\r\n  FROM final\r\n)\r\nAND date IS NOT NULL\r\n\r\n{% endif %}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_twitter_cab_sheets.sql", "original_file_path": "models\\staging\\stg_twitter_cab_sheets.sql", "name": "stg_twitter_cab_sheets", "alias": "stg_twitter_cab_sheets", "checksum": {"name": "sha256", "checksum": "152e21c92a03d0bdb0430945afbd4c0392d93f357723f7bcf494284b24c65caa"}, "tags": [], "refs": [], "sources": [["sheets_data", "twitter_sheets"], ["sheets_data", "twitter_data"]], "metrics": [], "description": "\u0422\u0432\u0438\u0442\u0442\u0435\u0440 \u0438\u0437 perek_settings", "columns": {"unique_key": {"name": "unique_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_twitter_cab_sheets.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_twitter_cab_sheets.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "unique_key", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "cluster_by": ["campaign_type"]}, "created_at": 1676546309.2955256, "compiled_code": "\n\n\n\n\n\nWITH source AS (\n    SELECT DISTINCT\n        string_field_0,\n        string_field_2,\n        string_field_9,\n        string_field_10,\n        ROW_NUMBER() OVER(PARTITION BY string_field_0, string_field_2) AS counter\n    FROM `perekrestokvprok-bq`.`sheets_data`.`twitter_sheets`\n    WHERE string_field_0 IS NOT NULL\n),\n\nfinal AS (\n    SELECT DISTINCT\n        ARRAY_TO_STRING([\n            CAST(DATE(REPLACE(string_field_0,'.','-')) AS STRING),\n            LOWER(string_field_2)\n        ],'') AS unique_key,\n        DATE(REPLACE(string_field_0,'.','-')) AS date,\n        LOWER(string_field_2) AS campaign_name,\n        SAFE_CAST(REPLACE(string_field_9,',','.') AS FLOAT64) AS impressions,\n        SAFE_CAST(REPLACE(string_field_10,',','.') AS FLOAT64) AS spend\n    FROM source\n    WHERE counter = 1\n)\n\nSELECT DISTINCT\n    unique_key,\n    date,\n    \n    TRIM(\n        REGEXP_REPLACE(\n            LOWER(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REGEXP_REPLACE(campaign_name,  r'(_install_week.*)', '_install_weekend'), \n                    r'(_install_promo_gl.*)', '_install_promo_global'), \n                r'(_install_promo_re.*)', '_install_promo_regular')\n            ), r'\\+|-', '_')\n        )\n AS campaign_name,\n    IF(REGEXP_CONTAINS(campaign_name, r'_old_'),'retargeting','UA') AS campaign_type,\n    impressions,\n    spend\nFROM final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_twitter_cab_sheets`"}, "model.perekrestokvprok.stg_vk_beta_sheet": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize"], "nodes": ["source.perekrestokvprok.sheets_data.vk_beta_sheet"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_vk_beta_sheet"], "unique_id": "model.perekrestokvprok.stg_vk_beta_sheet", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='table',\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\nWITH source AS (\r\n    SELECT\r\n        PARSE_DATE('%d.%m.%Y', date) AS date,\r\n        {{ normalize('campaign_name')}} campaign_name,\r\n        SUM(COALESCE(SAFE_CAST(REGEXP_REPLACE(cost, r',', '.') AS FLOAT64), 0)) as cost\r\n    FROM {{ source('sheets_data', 'vk_beta_sheet') }}\r\n    WHERE date IS NOT NULL\r\n    GROUP BY date, campaign_name\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        ARRAY_TO_STRING([\r\n            CAST(date AS STRING),\r\n            campaign_name\r\n        ],'') AS unique_key,\r\n        date,\r\n        campaign_name,\r\n        IF(\r\n          REGEXP_CONTAINS(campaign_name, r'[_\\[]new[\\]_]|_new_install_'),'UA','retargeting'\r\n          ) AS campaign_type,\r\n        cost\r\n    FROM source\r\n)\r\n\r\nSELECT\r\n    unique_key,\r\n    date,\r\n    campaign_name,\r\n    campaign_type,\r\n    cost\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_vk_beta_sheet.sql", "original_file_path": "models\\staging\\stg_vk_beta_sheet.sql", "name": "stg_vk_beta_sheet", "alias": "stg_vk_beta_sheet", "checksum": {"name": "sha256", "checksum": "596efc0ece98b0a81e945e685c882920bfc55079137131f0bc4ba32e194adeb4"}, "tags": [], "refs": [], "sources": [["sheets_data", "vk_beta_sheet"]], "metrics": [], "description": "MT \u0438\u0437 VK Beta", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "perekrestokvprok://models\\staging\\stg_cabs.yml", "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_vk_beta_sheet.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_vk_beta_sheet.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676546309.3453608, "compiled_code": "\n\n\n\n\n\nWITH source AS (\n    SELECT\n        PARSE_DATE('%d.%m.%Y', date) AS date,\n        \n    TRIM(\n        REGEXP_REPLACE(\n            LOWER(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REGEXP_REPLACE(campaign_name,  r'(_install_week.*)', '_install_weekend'), \n                    r'(_install_promo_gl.*)', '_install_promo_global'), \n                r'(_install_promo_re.*)', '_install_promo_regular')\n            ), r'\\+|-', '_')\n        )\n campaign_name,\n        SUM(COALESCE(SAFE_CAST(REGEXP_REPLACE(cost, r',', '.') AS FLOAT64), 0)) as cost\n    FROM `perekrestokvprok-bq`.`sheets_data`.`vk_beta_sheet`\n    WHERE date IS NOT NULL\n    GROUP BY date, campaign_name\n),\n\nfinal AS (\n    SELECT\n        ARRAY_TO_STRING([\n            CAST(date AS STRING),\n            campaign_name\n        ],'') AS unique_key,\n        date,\n        campaign_name,\n        IF(\n          REGEXP_CONTAINS(campaign_name, r'[_\\[]new[\\]_]|_new_install_'),'UA','retargeting'\n          ) AS campaign_type,\n        cost\n    FROM source\n)\n\nSELECT\n    unique_key,\n    date,\n    campaign_name,\n    campaign_type,\n    cost\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_vk_beta_sheet`"}, "model.perekrestokvprok.stg_zen_data_sheets": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.perekrestokvprok.normalize"], "nodes": ["source.perekrestokvprok.sheets_data.zen_sheets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_key", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "cluster_by": ["campaign_type"], "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "post-hook": [], "pre-hook": []}, "database": "perekrestokvprok-bq", "schema": "dbt_production", "fqn": ["perekrestokvprok", "staging", "stg_zen_data_sheets"], "unique_id": "model.perekrestokvprok.stg_zen_data_sheets", "raw_code": "{% if target.name == 'prod' %}\r\n\r\n{{\r\n  config(\r\n    materialized='incremental',\r\n    unique_key='unique_key',\r\n    partition_by={\r\n      \"field\": \"date\",\r\n      \"data_type\": \"date\",\r\n      \"granularity\": \"day\"\r\n    },\r\n    cluster_by = [\"campaign_type\"]\r\n  )\r\n}}\r\n\r\n{% endif %}\r\n\r\nWITH source AS (\r\n    SELECT DISTINCT\r\n        PARSE_DATE('%d.%m.%Y', date) AS date,\r\n        {{ normalize('campaign_name')}} campaign_name,\r\n        cost\r\n    FROM {{ source('sheets_data', 'zen_sheets') }}\r\n    WHERE date IS NOT NULL\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        ARRAY_TO_STRING([\r\n            CAST(date AS STRING),\r\n            campaign_name\r\n        ],'') AS unique_key,\r\n        date,\r\n        campaign_name,\r\n        IF(\r\n          REGEXP_CONTAINS(campaign_name, r'[_\\[]new[\\]_]'),'UA','retargeting'\r\n          ) AS campaign_type,\r\n        COALESCE(SAFE_CAST(REGEXP_REPLACE(cost, r',', '.') AS FLOAT64), 0) AS cost\r\n    FROM source\r\n)\r\n\r\nSELECT\r\n    unique_key,\r\n    date,\r\n    campaign_name,\r\n    campaign_type,\r\n    cost\r\nFROM final", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "staging\\stg_zen_data_sheets.sql", "original_file_path": "models\\staging\\stg_zen_data_sheets.sql", "name": "stg_zen_data_sheets", "alias": "stg_zen_data_sheets", "checksum": {"name": "sha256", "checksum": "c8038c08dcf8d0a346602479a6d6bb594e67f4ef139c1b2bdb3a1a7933972ebd"}, "tags": [], "refs": [], "sources": [["sheets_data", "zen_sheets"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "docs_netlify\\compiled\\perekrestokvprok\\models\\staging\\stg_zen_data_sheets.sql", "build_path": "docs_netlify\\run\\perekrestokvprok\\models\\staging\\stg_zen_data_sheets.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "unique_key", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "cluster_by": ["campaign_type"]}, "created_at": 1676546309.1953912, "compiled_code": "\n\n\n\n\n\nWITH source AS (\n    SELECT DISTINCT\n        PARSE_DATE('%d.%m.%Y', date) AS date,\n        \n    TRIM(\n        REGEXP_REPLACE(\n            LOWER(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REGEXP_REPLACE(campaign_name,  r'(_install_week.*)', '_install_weekend'), \n                    r'(_install_promo_gl.*)', '_install_promo_global'), \n                r'(_install_promo_re.*)', '_install_promo_regular')\n            ), r'\\+|-', '_')\n        )\n campaign_name,\n        cost\n    FROM `perekrestokvprok-bq`.`sheets_data`.`zen_sheets`\n    WHERE date IS NOT NULL\n),\n\nfinal AS (\n    SELECT\n        ARRAY_TO_STRING([\n            CAST(date AS STRING),\n            campaign_name\n        ],'') AS unique_key,\n        date,\n        campaign_name,\n        IF(\n          REGEXP_CONTAINS(campaign_name, r'[_\\[]new[\\]_]'),'UA','retargeting'\n          ) AS campaign_type,\n        COALESCE(SAFE_CAST(REGEXP_REPLACE(cost, r',', '.') AS FLOAT64), 0) AS cost\n    FROM source\n)\n\nSELECT\n    unique_key,\n    date,\n    campaign_name,\n    campaign_type,\n    cost\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`perekrestokvprok-bq`.`dbt_production`.`stg_zen_data_sheets`"}, "test.perekrestokvprok.freshness_stg_tiktok_cab_meta_date.2e7fade306": {"test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_tiktok_cab_meta')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.stg_tiktok_cab_meta"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_stg_tiktok_cab_meta_date"], "unique_id": "test.perekrestokvprok.freshness_stg_tiktok_cab_meta_date.2e7fade306", "raw_code": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "freshness_stg_tiktok_cab_meta_date.sql", "original_file_path": "models\\staging\\stg_cabs.yml", "name": "freshness_stg_tiktok_cab_meta_date", "alias": "freshness_stg_tiktok_cab_meta_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_tiktok_cab_meta"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1676546309.3553262, "column_name": "date", "file_key_name": "models.stg_tiktok_cab_meta"}, "test.perekrestokvprok.freshness_stg_google_dbm_date__2.045c65720f": {"test_metadata": {"name": "freshness", "kwargs": {"days": "2", "column_name": "date", "model": "{{ get_where_subquery(ref('stg_google_dbm')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.stg_google_dbm"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_stg_google_dbm_date__2"], "unique_id": "test.perekrestokvprok.freshness_stg_google_dbm_date__2.045c65720f", "raw_code": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "freshness_stg_google_dbm_date__2.sql", "original_file_path": "models\\staging\\stg_cabs.yml", "name": "freshness_stg_google_dbm_date__2", "alias": "freshness_stg_google_dbm_date__2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_dbm"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1676546309.3652937, "column_name": "date", "file_key_name": "models.stg_google_dbm"}, "test.perekrestokvprok.freshness_stg_google_cab_sheets_date.ea19a30b02": {"test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_google_cab_sheets')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.stg_google_cab_sheets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_stg_google_cab_sheets_date"], "unique_id": "test.perekrestokvprok.freshness_stg_google_cab_sheets_date.ea19a30b02", "raw_code": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "freshness_stg_google_cab_sheets_date.sql", "original_file_path": "models\\staging\\stg_cabs.yml", "name": "freshness_stg_google_cab_sheets_date", "alias": "freshness_stg_google_cab_sheets_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_cab_sheets"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1676546309.3702772, "column_name": "date", "file_key_name": "models.stg_google_cab_sheets"}, "test.perekrestokvprok.freshness_stg_af_for_media_date.4abd88be82": {"test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_af_for_media')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.stg_af_for_media"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_stg_af_for_media_date"], "unique_id": "test.perekrestokvprok.freshness_stg_af_for_media_date.4abd88be82", "raw_code": "{{ test_freshness(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "freshness_stg_af_for_media_date.sql", "original_file_path": "models\\staging\\stg_cabs.yml", "name": "freshness_stg_af_for_media_date", "alias": "freshness_stg_af_for_media_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_af_for_media"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1676546309.3732672, "column_name": "date", "file_key_name": "models.stg_af_for_media"}, "test.perekrestokvprok.freshness_stg_af_client_data_date.e3578f41c6": {"test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_af_client_data')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.stg_af_client_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_stg_af_client_data_date"], "unique_id": "test.perekrestokvprok.freshness_stg_af_client_data_date.e3578f41c6", "raw_code": "{{ test_freshness(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "freshness_stg_af_client_data_date.sql", "original_file_path": "models\\staging\\stg_cabs.yml", "name": "freshness_stg_af_client_data_date", "alias": "freshness_stg_af_client_data_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_af_client_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1676546309.3772533, "column_name": "date", "file_key_name": "models.stg_af_client_data"}, "test.perekrestokvprok.freshness_int_yandex_cab_meta_date.f0993cbb4f": {"test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('int_yandex_cab_meta')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.int_yandex_cab_meta"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_int_yandex_cab_meta_date"], "unique_id": "test.perekrestokvprok.freshness_int_yandex_cab_meta_date.f0993cbb4f", "raw_code": "{{ test_freshness(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "freshness_int_yandex_cab_meta_date.sql", "original_file_path": "models\\staging\\stg_cabs.yml", "name": "freshness_int_yandex_cab_meta_date", "alias": "freshness_int_yandex_cab_meta_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_yandex_cab_meta"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1676546309.3802438, "column_name": "date", "file_key_name": "models.int_yandex_cab_meta"}, "test.perekrestokvprok.freshness_int_mytarget_cab_meta_date.b7126cd27f": {"test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('int_mytarget_cab_meta')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.int_mytarget_cab_meta"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_int_mytarget_cab_meta_date"], "unique_id": "test.perekrestokvprok.freshness_int_mytarget_cab_meta_date.b7126cd27f", "raw_code": "{{ test_freshness(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "freshness_int_mytarget_cab_meta_date.sql", "original_file_path": "models\\staging\\stg_cabs.yml", "name": "freshness_int_mytarget_cab_meta_date", "alias": "freshness_int_mytarget_cab_meta_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_mytarget_cab_meta"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1676546309.3842301, "column_name": "date", "file_key_name": "models.int_mytarget_cab_meta"}, "test.perekrestokvprok.freshness_int_google_dcm_reach_date__2.6f5c233395": {"test_metadata": {"name": "freshness", "kwargs": {"days": "2", "column_name": "date", "model": "{{ get_where_subquery(ref('int_google_dcm_reach')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.int_google_dcm_reach"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_int_google_dcm_reach_date__2"], "unique_id": "test.perekrestokvprok.freshness_int_google_dcm_reach_date__2.6f5c233395", "raw_code": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "freshness_int_google_dcm_reach_date__2.sql", "original_file_path": "models\\staging\\stg_cabs.yml", "name": "freshness_int_google_dcm_reach_date__2", "alias": "freshness_int_google_dcm_reach_date__2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_google_dcm_reach"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1676546309.388217, "column_name": "date", "file_key_name": "models.int_google_dcm_reach"}, "test.perekrestokvprok.freshness_int_google_dcm_activity_meta_interaction_date.16b18e3b1a": {"test_metadata": {"name": "freshness", "kwargs": {"column_name": "interaction_date", "model": "{{ get_where_subquery(ref('int_google_dcm_activity_meta')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.int_google_dcm_activity_meta"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_int_google_dcm_activity_meta_interaction_date"], "unique_id": "test.perekrestokvprok.freshness_int_google_dcm_activity_meta_interaction_date.16b18e3b1a", "raw_code": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "freshness_int_google_dcm_activity_meta_interaction_date.sql", "original_file_path": "models\\staging\\stg_cabs.yml", "name": "freshness_int_google_dcm_activity_meta_interaction_date", "alias": "freshness_int_google_dcm_activity_meta_interaction_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_google_dcm_activity_meta"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1676546309.3922038, "column_name": "interaction_date", "file_key_name": "models.int_google_dcm_activity_meta"}, "test.perekrestokvprok.freshness_int_google_dbm_impressions_clicks_revenue_meta_date__2.c25c2d8459": {"test_metadata": {"name": "freshness", "kwargs": {"days": "2", "column_name": "date", "model": "{{ get_where_subquery(ref('int_google_dbm_impressions_clicks_revenue_meta')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta"]}, "config": {"enabled": true, "alias": "freshness_int_google_dbm_impre_a68611eec12d3637ca956e62d894d6f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_int_google_dbm_impressions_clicks_revenue_meta_date__2"], "unique_id": "test.perekrestokvprok.freshness_int_google_dbm_impressions_clicks_revenue_meta_date__2.c25c2d8459", "raw_code": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"freshness_int_google_dbm_impre_a68611eec12d3637ca956e62d894d6f6\") }}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "freshness_int_google_dbm_impre_a68611eec12d3637ca956e62d894d6f6.sql", "original_file_path": "models\\staging\\stg_cabs.yml", "name": "freshness_int_google_dbm_impressions_clicks_revenue_meta_date__2", "alias": "freshness_int_google_dbm_impre_a68611eec12d3637ca956e62d894d6f6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_google_dbm_impressions_clicks_revenue_meta"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "freshness_int_google_dbm_impre_a68611eec12d3637ca956e62d894d6f6"}, "created_at": 1676546309.3961902, "column_name": "date", "file_key_name": "models.int_google_dbm_impressions_clicks_revenue_meta"}, "test.perekrestokvprok.freshness_int_google_dbm_dv360_cost_date.0b71809b70": {"test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('int_google_dbm_dv360_cost')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.int_google_dbm_dv360_cost"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_int_google_dbm_dv360_cost_date"], "unique_id": "test.perekrestokvprok.freshness_int_google_dbm_dv360_cost_date.0b71809b70", "raw_code": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "freshness_int_google_dbm_dv360_cost_date.sql", "original_file_path": "models\\staging\\stg_cabs.yml", "name": "freshness_int_google_dbm_dv360_cost_date", "alias": "freshness_int_google_dbm_dv360_cost_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_google_dbm_dv360_cost"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1676546309.4011736, "column_name": "date", "file_key_name": "models.int_google_dbm_dv360_cost"}, "test.perekrestokvprok.freshness_int_asa_cab_meta_date.4c0f53d67b": {"test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('int_asa_cab_meta')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.int_asa_cab_meta"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_int_asa_cab_meta_date"], "unique_id": "test.perekrestokvprok.freshness_int_asa_cab_meta_date.4c0f53d67b", "raw_code": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "freshness_int_asa_cab_meta_date.sql", "original_file_path": "models\\staging\\stg_cabs.yml", "name": "freshness_int_asa_cab_meta_date", "alias": "freshness_int_asa_cab_meta_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asa_cab_meta"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1676546309.4051602, "column_name": "date", "file_key_name": "models.int_asa_cab_meta"}, "test.perekrestokvprok.freshness_stg_asa_cab_sheets_date.118a491372": {"test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_asa_cab_sheets')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.stg_asa_cab_sheets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_stg_asa_cab_sheets_date"], "unique_id": "test.perekrestokvprok.freshness_stg_asa_cab_sheets_date.118a491372", "raw_code": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "freshness_stg_asa_cab_sheets_date.sql", "original_file_path": "models\\staging\\stg_cabs.yml", "name": "freshness_stg_asa_cab_sheets_date", "alias": "freshness_stg_asa_cab_sheets_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asa_cab_sheets"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1676546309.410142, "column_name": "date", "file_key_name": "models.stg_asa_cab_sheets"}, "test.perekrestokvprok.freshness_stg_facebook_cab_sheets_date.602c75baed": {"test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_facebook_cab_sheets')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.stg_facebook_cab_sheets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_stg_facebook_cab_sheets_date"], "unique_id": "test.perekrestokvprok.freshness_stg_facebook_cab_sheets_date.602c75baed", "raw_code": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "freshness_stg_facebook_cab_sheets_date.sql", "original_file_path": "models\\staging\\stg_cabs.yml", "name": "freshness_stg_facebook_cab_sheets_date", "alias": "freshness_stg_facebook_cab_sheets_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_cab_sheets"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1676546309.4193482, "column_name": "date", "file_key_name": "models.stg_facebook_cab_sheets"}, "test.perekrestokvprok.freshness_stg_huawei_cab_sheets_date.c76e31a5e5": {"test_metadata": {"name": "freshness", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_huawei_cab_sheets')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.perekrestokvprok.test_freshness", "macro.dbt.get_where_subquery"], "nodes": ["model.perekrestokvprok.stg_huawei_cab_sheets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "perekrestokvprok-bq", "schema": "dbt_production_dbt_test__audit", "fqn": ["perekrestokvprok", "staging", "freshness_stg_huawei_cab_sheets_date"], "unique_id": "test.perekrestokvprok.freshness_stg_huawei_cab_sheets_date.c76e31a5e5", "raw_code": "{{ test_freshness(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "freshness_stg_huawei_cab_sheets_date.sql", "original_file_path": "models\\staging\\stg_cabs.yml", "name": "freshness_stg_huawei_cab_sheets_date", "alias": "freshness_stg_huawei_cab_sheets_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_huawei_cab_sheets"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1676546309.4233346, "column_name": "date", "file_key_name": "models.stg_huawei_cab_sheets"}}, "sources": {"source.perekrestokvprok.sheets_data.limits_sheet": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "limits_sheet"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.limits_sheet", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "limits_sheet", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "limits_sheet", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043b\u0438\u043c\u0438\u0442\u0430\u043c\u0438 \u043f\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c (https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=417840891)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`limits_sheet`", "created_at": 1676546309.4263244}, "source.perekrestokvprok.sheets_data.TIKTOK_table": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "TIKTOK_table"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.TIKTOK_table", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "TIKTOK_table", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "TIKTOK_table", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0420\u041a \u0422\u0438\u043a\u0442\u043e\u043a\u0430 (c 01.10.2021). \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f 1 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`TIKTOK_table`", "created_at": 1676546309.4273214}, "source.perekrestokvprok.sheets_data.tiktok_sheets_campaign_cost_purchases": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "tiktok_sheets_campaign_cost_purchases"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.tiktok_sheets_campaign_cost_purchases", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "tiktok_sheets_campaign_cost_purchases", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "tiktok_sheets_campaign_cost_purchases", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0420\u041a \u0422\u0438\u043a\u0442\u043e\u043a\u0430 (\u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u0435\u0441\u044f\u0446 \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1069669087)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`tiktok_sheets_campaign_cost_purchases`", "created_at": 1676546309.4273214}, "source.perekrestokvprok.sheets_data.FBNEW_data": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "FBNEW_data"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.FBNEW_data", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "FBNEW_data", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "FBNEW_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0420\u041a \u0424\u0435\u0439\u0441\u0431\u0443\u043a\u0430 (c 01.05.2021)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`FBNEW_data`", "created_at": 1676546309.4273214}, "source.perekrestokvprok.sheets_data.fb_spreadsheets_data": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "fb_spreadsheets_data"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.fb_spreadsheets_data", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "fb_spreadsheets_data", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "fb_spreadsheets_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0420\u041a \u0424\u0435\u0439\u0441\u0431\u0443\u043a\u0430 (\u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u0435\u0441\u044f\u0446 \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1069669087)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`fb_spreadsheets_data`", "created_at": 1676546309.4273214}, "source.perekrestokvprok.sheets_data.twitter_sheets": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "twitter_sheets"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.twitter_sheets", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "twitter_sheets", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "twitter_sheets", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0420\u041a \u0422\u0432\u0438\u0442\u0442\u0435\u0440\u0430 (\u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u0435\u0441\u044f\u0446 \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1069669087)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`twitter_sheets`", "created_at": 1676546309.4273214}, "source.perekrestokvprok.sheets_data.twitter_data": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "twitter_data"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.twitter_data", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "twitter_data", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "twitter_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0420\u041a \u0422\u0432\u0438\u0442\u0442\u0435\u0440\u0430 (c 01.10.2021)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`twitter_data`", "created_at": 1676546309.4273214}, "source.perekrestokvprok.sheets_data.rate_data_for_inside": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "rate_data_for_inside"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.rate_data_for_inside", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "rate_data_for_inside", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "rate_data_for_inside", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u043e \u0441\u0442\u0430\u0432\u043a\u0430\u043c\u0438 (https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1069669087)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`rate_data_for_inside`", "created_at": 1676546309.4273214}, "source.perekrestokvprok.sheets_data.mistake_cmp": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "mistake_cmp"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.mistake_cmp", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "mistake_cmp", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "mistake_cmp", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u044b\u043c\u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u0439 (https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1069669087)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`mistake_cmp`", "created_at": 1676546309.4273214}, "source.perekrestokvprok.sheets_data.promo_dict_sheets": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "promo_dict_sheets"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.promo_dict_sheets", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "promo_dict_sheets", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "promo_dict_sheets", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1136333702", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`promo_dict_sheets`", "created_at": 1676546309.4273214}, "source.perekrestokvprok.sheets_data.promo_dict_data": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "promo_dict_data"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.promo_dict_data", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "promo_dict_data", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "promo_dict_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u043f\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u0438\u0437 promo_dict_sheets", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`promo_dict_data`", "created_at": 1676546309.4273214}, "source.perekrestokvprok.sheets_data.rate_info": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "rate_info"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.rate_info", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "rate_info", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "rate_info", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=896311385", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`rate_info`", "created_at": 1676546309.428317}, "source.perekrestokvprok.sheets_data.budget_and_plan": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "budget_and_plan"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.budget_and_plan", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "budget_and_plan", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "budget_and_plan", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1919397242", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`budget_and_plan`", "created_at": 1676546309.428317}, "source.perekrestokvprok.sheets_data.promo_sheets": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "promo_sheets"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.promo_sheets", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "promo_sheets", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "promo_sheets", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1301207630 \u0441 \u0438\u044e\u043b\u044f \u043d\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`promo_sheets`", "created_at": 1676546309.428317}, "source.perekrestokvprok.sheets_data.google_ads_costs_and_installs": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "google_ads_costs_and_installs"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.google_ads_costs_and_installs", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "google_ads_costs_and_installs", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "google_ads_costs_and_installs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u043a\u043e\u0441\u0442\u044b,\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438,\u043a\u043b\u0438\u043a\u0438 \u0438 \u043f\u043e\u043a\u0430\u0437\u044b \u0438\u0437 \u0413\u0443\u0433\u043b \u0410\u0434\u0441 (\u0441 \u0430\u0434\u0441\u0435\u0442\u043e\u043c) - https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=2062992783", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`google_ads_costs_and_installs`", "created_at": 1676546309.428317}, "source.perekrestokvprok.sheets_data.google_ads_costs_27_30_dec_2021": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "google_ads_costs_27_30_dec_2021"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.google_ads_costs_27_30_dec_2021", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "google_ads_costs_27_30_dec_2021", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "google_ads_costs_27_30_dec_2021", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0440\u0430\u0437\u043e\u0432\u0430\u044f \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0437 \u0434\u0440. \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`google_ads_costs_27_30_dec_2021`", "created_at": 1676546309.428317}, "source.perekrestokvprok.sheets_data.Asa_cost": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "Asa_cost"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.Asa_cost", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "Asa_cost", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "Asa_cost", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ASA \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1016604704", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`Asa_cost`", "created_at": 1676546309.428317}, "source.perekrestokvprok.sheets_data.huawei_data": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "huawei_data"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.huawei_data", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "huawei_data", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "huawei_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Huawei \u0438\u0437 https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=646019346", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`huawei_data`", "created_at": 1676546309.428317}, "source.perekrestokvprok.sheets_data.zen_sheets": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "zen_sheets"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.zen_sheets", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "zen_sheets", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "zen_sheets", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Zen from https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=92059599", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`zen_sheets`", "created_at": 1676546309.428317}, "source.perekrestokvprok.sheets_data.vk_beta_sheet": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "vk_beta_sheet"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.vk_beta_sheet", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "vk_beta_sheet", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "vk_beta_sheet", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "VK Beta from https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=356120259", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`vk_beta_sheet`", "created_at": 1676546309.428317}, "source.perekrestokvprok.sheets_data.campaign_limits": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "campaign_limits"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.campaign_limits", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "campaign_limits", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "campaign_limits", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Campaign limits from https://docs.google.com/spreadsheets/d/1_NxQ637ap_BGeEQ8CPMAJvNNmMDX7u_Db9dBr6T7-NQ/edit#gid=0", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`campaign_limits`", "created_at": 1676546309.428317}, "source.perekrestokvprok.sheets_data._rates": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "_rates"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data._rates", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "_rates", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "_rates", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "New rates for inside from https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1919397242", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`_rates`", "created_at": 1676546309.428317}, "source.perekrestokvprok.sheets_data.crm_redeem_first_orders": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "crm_redeem_first_orders"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.crm_redeem_first_orders", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "crm_redeem_first_orders", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "crm_redeem_first_orders", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0412\u044b\u043a\u0443\u043f\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u043a\u0430\u0437\u044b from https://docs.google.com/spreadsheets/d/1SoM6PRjrGG9h9SJA_VSMR6EagS0unZLsOey5XAJtDaA/edit#gid=936391085", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`crm_redeem_first_orders`", "created_at": 1676546309.429314}, "source.perekrestokvprok.sheets_data.crm_redeem_first_orders_realwebcpa": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "crm_redeem_first_orders_realwebcpa"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.crm_redeem_first_orders_realwebcpa", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "crm_redeem_first_orders_realwebcpa", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "crm_redeem_first_orders_realwebcpa", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0412\u044b\u043a\u0443\u043f\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u043a\u0430\u0437\u044b realwebcpa from https://docs.google.com/spreadsheets/d/159JmxKc_3asbrswjvqQy_rCDowsmF3_iHhDePZbIy50/edit#gid=936391085", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`crm_redeem_first_orders_realwebcpa`", "created_at": 1676546309.429314}, "source.perekrestokvprok.sheets_data.appnext_cost": {"fqn": ["perekrestokvprok", "staging", "sheets_data", "appnext_cost"], "database": "perekrestokvprok-bq", "schema": "sheets_data", "unique_id": "source.perekrestokvprok.sheets_data.appnext_cost", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "appnext_cost", "source_name": "sheets_data", "source_description": "", "loader": "", "identifier": "appnext_cost", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0420\u0430\u0441\u0445\u043e\u0434\u044b \u0434\u043b\u044f \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u0439 appnext from https://docs.google.com/spreadsheets/d/1kZoorxv0pZnwpTvRI8M8J5C6kR3pbQMhTF-h8jds2KI/edit#gid=1968718394", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`sheets_data`.`appnext_cost`", "created_at": 1676546309.429314}, "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1605495720": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "vk_campaign_stat_1900013586_1605495720"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1605495720", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "vk_campaign_stat_1900013586_1605495720", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "vk_campaign_stat_1900013586_1605495720", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0421\u0422\u0410\u0420\u042b\u0419 Meta VK (Autofeed VK Ads 1900013586_1605495720 - https://meta.realweb.ru/card?e=2770&o=8c107494-12ab-4d13-969a-14b552e357a0&a=58)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`vk_campaign_stat_1900013586_1605495720`", "created_at": 1676546309.429314}, "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1607141417": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "vk_campaign_stat_1900013586_1607141417"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1607141417", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "vk_campaign_stat_1900013586_1607141417", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "vk_campaign_stat_1900013586_1607141417", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u041d\u041e\u0412\u042b\u0419 Meta VK (Autofeed VK Ads 1900013586_1607141417 - https://meta.realweb.ru/card?e=2770&o=c237257a-694b-4dd5-b9a6-42e0588ccdb0&a=58)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`vk_campaign_stat_1900013586_1607141417`", "created_at": 1676546309.429314}, "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_x5perek_direct": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "yandex_direct_ad_keyword_stat_x5perek_direct"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_x5perek_direct", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "yandex_direct_ad_keyword_stat_x5perek_direct", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "yandex_direct_ad_keyword_stat_x5perek_direct", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Meta Yandex Direct (Autofeed Yandex Direct x5perek-direct \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u043e \u0444\u0440\u0430\u0437\u0430\u043c \u0438 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f\u043c (CUSTOM_REPORT))", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`yandex_direct_ad_keyword_stat_x5perek_direct`", "created_at": 1676546309.429314}, "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_perek_vprok_sf": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "yandex_direct_ad_keyword_stat_perek_vprok_sf"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_perek_vprok_sf", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "yandex_direct_ad_keyword_stat_perek_vprok_sf", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "yandex_direct_ad_keyword_stat_perek_vprok_sf", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Meta Yandex Direct (Autofeed Yandex Direct perek-vprok-sf \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u043e \u0444\u0440\u0430\u0437\u0430\u043c \u0438 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f\u043c (CUSTOM_REPORT))", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`yandex_direct_ad_keyword_stat_perek_vprok_sf`", "created_at": 1676546309.429314}, "source.perekrestokvprok.MetaCustom.mytarget_banner_stat_d0927adb05_agency_client": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "mytarget_banner_stat_d0927adb05_agency_client"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.mytarget_banner_stat_d0927adb05_agency_client", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "mytarget_banner_stat_d0927adb05_agency_client", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "mytarget_banner_stat_d0927adb05_agency_client", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Meta MT (Autofeed MyTarget d0927adb05@agency_client \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u043e \u0431\u0430\u043d\u043d\u0435\u0440\u0430\u043c - https://meta.realweb.ru/card?e=2770&o=797ab813-c351-4e39-9cef-254144dfae39&a=58)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`mytarget_banner_stat_d0927adb05_agency_client`", "created_at": 1676546309.429314}, "source.perekrestokvprok.MetaCustom.apple_search_ads_ASA_cost": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "apple_search_ads_ASA_cost"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.apple_search_ads_ASA_cost", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "apple_search_ads_ASA_cost", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "apple_search_ads_ASA_cost", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Meta ASA (Perek_vprok_asa_cost_yaf - https://meta.realweb.ru/card?e=2770&o=a06700c1-116c-4b69-ac5d-f9ee9314e3d4&a=58)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`apple_search_ads_ASA_cost`", "created_at": 1676546309.429314}, "source.perekrestokvprok.MetaCustom.google_dbm_google_dv360_cost_5807131": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "google_dbm_google_dv360_cost_5807131"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.google_dbm_google_dv360_cost_5807131", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "google_dbm_google_dv360_cost_5807131", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "google_dbm_google_dv360_cost_5807131", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Meta DV360 (Autofeed DoubleClick Bid Manager (Display&Video360) 5807131 DV360_Base_Report_with_Cost - https://meta.realweb.ru/card?e=2770&o=f8b65eb8-497a-4d7d-94c0-fbd8b9c3cb35&a=58)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`google_dbm_google_dv360_cost_5807131`", "created_at": 1676546309.429314}, "source.perekrestokvprok.MetaCustom.google_adwords_campaign_stat_4284985623": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "google_adwords_campaign_stat_4284985623"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.google_adwords_campaign_stat_4284985623", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "google_adwords_campaign_stat_4284985623", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "google_adwords_campaign_stat_4284985623", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Meta google ads, \u0438\u0441\u043f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 rw_cost_view (Autofeed Google Ads 4284985623 \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u043e \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u044f\u043c (AD_PERFORMANCE_REPORT) - https://meta.realweb.ru/card?e=2770&o=876ff8b5-48e5-48f2-86f2-edfa030dd583&a=58)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`google_adwords_campaign_stat_4284985623`", "created_at": 1676546309.429314}, "source.perekrestokvprok.MetaCustom.google_adwords_campaign_label_4284985623": {"fqn": ["perekrestokvprok", "staging", "MetaCustom", "google_adwords_campaign_label_4284985623"], "database": "perekrestokvprok-bq", "schema": "MetaCustom", "unique_id": "source.perekrestokvprok.MetaCustom.google_adwords_campaign_label_4284985623", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "google_adwords_campaign_label_4284985623", "source_name": "MetaCustom", "source_description": "", "loader": "", "identifier": "google_adwords_campaign_label_4284985623", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u041c\u0435\u0442\u0430 \u0438\u0437 \u0413\u0443\u0433\u043b \u0410\u0434\u0441,\u0438\u0441\u043f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 rw_cost (Autofeed Google Ads 4284985623 \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u044f\u043c (+label) - https://meta.realweb.ru/card?e=2770&o=a2cd0479-a0db-4b0c-bfb4-d9589b58e05f&a=58)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`MetaCustom`.`google_adwords_campaign_label_4284985623`", "created_at": 1676546309.4303105}, "source.perekrestokvprok.agg_data.AF_client_data": {"fqn": ["perekrestokvprok", "staging", "agg_data", "AF_client_data"], "database": "perekrestokvprok-bq", "schema": "agg_data", "unique_id": "source.perekrestokvprok.agg_data.AF_client_data", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "AF_client_data", "source_name": "agg_data", "source_description": "", "loader": "", "identifier": "AF_client_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0430\u043f\u043f\u0441\u0444\u043b\u0430\u0439\u0435\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0430 scheduled query. \u041d\u0435\u0442 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0439, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0434\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u043d\u043e\u0433\u043e \u0430\u043a\u043a\u0430 \u043d\u0430 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u044b\u0440\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c (radiant-entry-230109.appsflayer_events.*)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`agg_data`.`AF_client_data`", "created_at": 1676546309.4303105}, "source.perekrestokvprok.agg_data.AF_smartbanners_may_2022": {"fqn": ["perekrestokvprok", "staging", "agg_data", "AF_smartbanners_may_2022"], "database": "perekrestokvprok-bq", "schema": "agg_data", "unique_id": "source.perekrestokvprok.agg_data.AF_smartbanners_may_2022", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "AF_smartbanners_may_2022", "source_name": "agg_data", "source_description": "", "loader": "", "identifier": "AF_smartbanners_may_2022", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u0441\u043c\u0430\u0440\u0442\u0431\u0430\u043d\u043d\u0435\u0440\u0430\u043c \u0441 1 \u043f\u043e 15 \u043c\u0430\u044f 2022.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`agg_data`.`AF_smartbanners_may_2022`", "created_at": 1676546309.4303105}, "source.perekrestokvprok.agg_data.promocod_client_data": {"fqn": ["perekrestokvprok", "staging", "agg_data", "promocod_client_data"], "database": "perekrestokvprok-bq", "schema": "agg_data", "unique_id": "source.perekrestokvprok.agg_data.promocod_client_data", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "promocod_client_data", "source_name": "agg_data", "source_description": "", "loader": "", "identifier": "promocod_client_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 CRM,  scheduled query. \u041d\u0435\u0442 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0439, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0434\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u043d\u043e\u0433\u043e \u0430\u043a\u043a\u0430 \u043d\u0430 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u044b\u0440\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c (radiant-entry-230109. BO_data.orders_bought_*)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`agg_data`.`promocod_client_data`", "created_at": 1676546309.4303105}, "source.perekrestokvprok.agg_data.google_ads_costs_and_installs_sum": {"fqn": ["perekrestokvprok", "staging", "agg_data", "google_ads_costs_and_installs_sum"], "database": "perekrestokvprok-bq", "schema": "agg_data", "unique_id": "source.perekrestokvprok.agg_data.google_ads_costs_and_installs_sum", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "google_ads_costs_and_installs_sum", "source_name": "agg_data", "source_description": "", "loader": "", "identifier": "google_ads_costs_and_installs_sum", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0441\u0443\u043c\u043c\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 google_ads_costs_and_installs_sum \u0441 1 \u043d\u043e\u044f 2021", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`agg_data`.`google_ads_costs_and_installs_sum`", "created_at": 1676546309.4303105}, "source.perekrestokvprok.agg_data.vk_manual_data": {"fqn": ["perekrestokvprok", "staging", "agg_data", "vk_manual_data"], "database": "perekrestokvprok-bq", "schema": "agg_data", "unique_id": "source.perekrestokvprok.agg_data.vk_manual_data", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "vk_manual_data", "source_name": "agg_data", "source_description": "", "loader": "", "identifier": "vk_manual_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0440\u0443\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043a\u043e\u043d\u0432\u0435\u0440\u0441\u0438\u044f\u043c \u0438\u0437 vk", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`agg_data`.`vk_manual_data`", "created_at": 1676546309.4303105}, "source.perekrestokvprok.agg_data.vk_manual_cost": {"fqn": ["perekrestokvprok", "staging", "agg_data", "vk_manual_cost"], "database": "perekrestokvprok-bq", "schema": "agg_data", "unique_id": "source.perekrestokvprok.agg_data.vk_manual_cost", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "vk_manual_cost", "source_name": "agg_data", "source_description": "", "loader": "", "identifier": "vk_manual_cost", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0440\u0443\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043a\u043e\u0441\u0442\u0430\u043c \u0438\u0437 vk", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`agg_data`.`vk_manual_cost`", "created_at": 1676546309.4303105}, "source.perekrestokvprok.DCM_impression_reach.google_dbm_existed_dbm_report_293044": {"fqn": ["perekrestokvprok", "staging", "DCM_impression_reach", "google_dbm_existed_dbm_report_293044"], "database": "perekrestokvprok-bq", "schema": "DCM_impression_reach", "unique_id": "source.perekrestokvprok.DCM_impression_reach.google_dbm_existed_dbm_report_293044", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "google_dbm_existed_dbm_report_293044", "source_name": "DCM_impression_reach", "source_description": "", "loader": "", "identifier": "google_dbm_existed_dbm_report_293044", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Meta DCM (Autofeed DoubleClick Bid Manager (Display&Video360) 293044 existed dbm report - https://meta.realweb.ru/card?e=2770&o=a37c236a-0e06-4f83-98a9-cf8cc8e52717&a=58) - \u043f\u043e\u043a\u0430\u0437\u044b, \u043e\u0445\u0432\u0430\u0442 \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0439\u043a\u0438", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`DCM_impression_reach`.`google_dbm_existed_dbm_report_293044`", "created_at": 1676546309.4303105}, "source.perekrestokvprok.DCM.google_dbm_existed_dbm_report_293044": {"fqn": ["perekrestokvprok", "staging", "DCM", "google_dbm_existed_dbm_report_293044"], "database": "perekrestokvprok-bq", "schema": "DCM", "unique_id": "source.perekrestokvprok.DCM.google_dbm_existed_dbm_report_293044", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "google_dbm_existed_dbm_report_293044", "source_name": "DCM", "source_description": "", "loader": "", "identifier": "google_dbm_existed_dbm_report_293044", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0421\u0422\u0410\u0420\u042b\u0419 Meta DCM (Autofeed DoubleClick Bid Manager (Display&Video360) 293044 existed dbm report - https://meta.realweb.ru/card?e=2770&o=34f70c3b-1e88-4cb7-b595-b57c9f0a0dd4&a=58) - \u043a\u043b\u0438\u043a\u0438,\u043f\u043e\u043a\u0430\u0437\u044b,Revenue \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0439\u043a\u0438.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`DCM`.`google_dbm_existed_dbm_report_293044`", "created_at": 1676546309.4313078}, "source.perekrestokvprok.DCM.Placemant_dict": {"fqn": ["perekrestokvprok", "staging", "DCM", "Placemant_dict"], "database": "perekrestokvprok-bq", "schema": "DCM", "unique_id": "source.perekrestokvprok.DCM.Placemant_dict", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "Placemant_dict", "source_name": "DCM", "source_description": "", "loader": "", "identifier": "Placemant_dict", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u0437 https://docs.google.com/spreadsheets/d/1ljGdr9zarLSP4dy4lw00eqkWnmYueDeWSAPu03JGcgI/edit#gid=0", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`DCM`.`Placemant_dict`", "created_at": 1676546309.4313078}, "source.perekrestokvprok.DCM.google_dcm_activitiIO": {"fqn": ["perekrestokvprok", "staging", "DCM", "google_dcm_activitiIO"], "database": "perekrestokvprok-bq", "schema": "DCM", "unique_id": "source.perekrestokvprok.DCM.google_dcm_activitiIO", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "google_dcm_activitiIO", "source_name": "DCM", "source_description": "", "loader": "", "identifier": "google_dcm_activitiIO", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u041c\u0435\u0442\u0430 DCM (CM report perekvprok (media ads) - https://meta.realweb.ru/card?e=2770&o=9b5362fa-5990-4268-95b1-260b1627f145&a=58) - \u043a\u043e\u043d\u0432\u0435\u0440\u0441\u0438\u0438", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`DCM`.`google_dcm_activitiIO`", "created_at": 1676546309.4313078}, "source.perekrestokvprok.AF_data.af_atr_data_for_media_ads_TABLE": {"fqn": ["perekrestokvprok", "staging", "AF_data", "af_atr_data_for_media_ads_TABLE"], "database": "perekrestokvprok-bq", "schema": "AF_data", "unique_id": "source.perekrestokvprok.AF_data.af_atr_data_for_media_ads_TABLE", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "af_atr_data_for_media_ads_TABLE", "source_name": "AF_data", "source_description": "", "loader": "", "identifier": "af_atr_data_for_media_ads_TABLE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "LTV-\u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438\u0437 \u0430\u043f\u0441\u0444\u043b\u0430\u0439\u0435\u0440\u0430", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`AF_data`.`af_atr_data_for_media_ads_TABLE`", "created_at": 1676546309.4313078}, "source.perekrestokvprok.AF_data.android_ua_partners_by_date_report_*": {"fqn": ["perekrestokvprok", "staging", "AF_data", "android_ua_partners_by_date_report_*"], "database": "perekrestokvprok-bq", "schema": "AF_data", "unique_id": "source.perekrestokvprok.AF_data.android_ua_partners_by_date_report_*", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "android_ua_partners_by_date_report_*", "source_name": "AF_data", "source_description": "", "loader": "", "identifier": "android_ua_partners_by_date_report_*", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "LTV-\u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0447\u0435\u0442\u044b \u0438\u0437 \u0430\u043f\u0441\u0444\u043b\u0430\u0439\u0435\u0440\u0430 (\u042e\u0410, android)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`AF_data`.`android_ua_partners_by_date_report_*`", "created_at": 1676546309.4313078}, "source.perekrestokvprok.AF_data.ios_ua_partners_by_date_report_*": {"fqn": ["perekrestokvprok", "staging", "AF_data", "ios_ua_partners_by_date_report_*"], "database": "perekrestokvprok-bq", "schema": "AF_data", "unique_id": "source.perekrestokvprok.AF_data.ios_ua_partners_by_date_report_*", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "ios_ua_partners_by_date_report_*", "source_name": "AF_data", "source_description": "", "loader": "", "identifier": "ios_ua_partners_by_date_report_*", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "LTV-\u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0447\u0435\u0442\u044b \u0438\u0437 \u0430\u043f\u0441\u0444\u043b\u0430\u0439\u0435\u0440\u0430 (\u042e\u0410, ios)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`AF_data`.`ios_ua_partners_by_date_report_*`", "created_at": 1676546309.4313078}, "source.perekrestokvprok.AF_data.ios_rtg_partners_by_date_report_*": {"fqn": ["perekrestokvprok", "staging", "AF_data", "ios_rtg_partners_by_date_report_*"], "database": "perekrestokvprok-bq", "schema": "AF_data", "unique_id": "source.perekrestokvprok.AF_data.ios_rtg_partners_by_date_report_*", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "ios_rtg_partners_by_date_report_*", "source_name": "AF_data", "source_description": "", "loader": "", "identifier": "ios_rtg_partners_by_date_report_*", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "LTV-\u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0447\u0435\u0442\u044b \u0438\u0437 \u0430\u043f\u0441\u0444\u043b\u0430\u0439\u0435\u0440\u0430 (\u0420\u0422\u0413, iOS)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`AF_data`.`ios_rtg_partners_by_date_report_*`", "created_at": 1676546309.4313078}, "source.perekrestokvprok.AF_data.android_rtg_partners_by_date_report_*": {"fqn": ["perekrestokvprok", "staging", "AF_data", "android_rtg_partners_by_date_report_*"], "database": "perekrestokvprok-bq", "schema": "AF_data", "unique_id": "source.perekrestokvprok.AF_data.android_rtg_partners_by_date_report_*", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "android_rtg_partners_by_date_report_*", "source_name": "AF_data", "source_description": "", "loader": "", "identifier": "android_rtg_partners_by_date_report_*", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "LTV-\u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0447\u0435\u0442\u044b \u0438\u0437 \u0430\u043f\u0441\u0444\u043b\u0430\u0439\u0435\u0440\u0430 (\u0420\u0422\u0413, android)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`AF_data`.`android_rtg_partners_by_date_report_*`", "created_at": 1676546309.4313078}, "source.perekrestokvprok.test2.google_dbm_existed_dbm_report_123": {"fqn": ["perekrestokvprok", "staging", "test2", "google_dbm_existed_dbm_report_123"], "database": "perekrestokvprok-bq", "schema": "test2", "unique_id": "source.perekrestokvprok.test2.google_dbm_existed_dbm_report_123", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "google_dbm_existed_dbm_report_123", "source_name": "test2", "source_description": "", "loader": "", "identifier": "google_dbm_existed_dbm_report_123", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Meta DCM (Autofeed DoubleClick Bid Manager (Display&Video360) 123 existed dbm report - https://meta.realweb.ru/card?e=2770&o=5413ffcd-8dc8-467a-a533-f0afc55789d8&a=58) - \u043a\u043b\u0438\u043a\u0438,\u043f\u043e\u043a\u0430\u0437\u044b,Revenue \u0434\u043b\u044f \u043c\u0435\u0434\u0438\u0439\u043a\u0438 c \u0434\u0435\u043a 2021", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`test2`.`google_dbm_existed_dbm_report_123`", "created_at": 1676546309.4323046}, "source.perekrestokvprok.test2.facebook_ads_ad_stat_minimal_134923481805102": {"fqn": ["perekrestokvprok", "staging", "test2", "facebook_ads_ad_stat_minimal_134923481805102"], "database": "perekrestokvprok-bq", "schema": "test2", "unique_id": "source.perekrestokvprok.test2.facebook_ads_ad_stat_minimal_134923481805102", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "facebook_ads_ad_stat_minimal_134923481805102", "source_name": "test2", "source_description": "", "loader": "", "identifier": "facebook_ads_ad_stat_minimal_134923481805102", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u041e\u0421\u0422\u0410\u041d\u041e\u0412\u041b\u0415\u041d \u0438\u0437 \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u041c\u0415\u0422\u042b https://meta.realweb.ru/card?e=2770&o=fed631fc-e110-479b-9c2f-29846b97be82&env=eyJwXzQ1NTckZV8yNzcwJG9fZmVkNjMxZmMtZTExMC00NzliLTljMmYtMjk4NDZiOTdiZTgyIjp7InNwIjp7InBlcmlvZCI6eyJmcm9tIjoiMjAyMS0xMi0wMSIsInRvIjoiMjAyMi0wMS0zMSJ9fX19&a=58", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`test2`.`facebook_ads_ad_stat_minimal_134923481805102`", "created_at": 1676546309.4323046}, "source.perekrestokvprok.test2.tiktok_perek_settings_6952834783391023106": {"fqn": ["perekrestokvprok", "staging", "test2", "tiktok_perek_settings_6952834783391023106"], "database": "perekrestokvprok-bq", "schema": "test2", "unique_id": "source.perekrestokvprok.test2.tiktok_perek_settings_6952834783391023106", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "models\\staging\\src_staging.yml", "original_file_path": "models\\staging\\src_staging.yml", "name": "tiktok_perek_settings_6952834783391023106", "source_name": "test2", "source_description": "", "loader": "", "identifier": "tiktok_perek_settings_6952834783391023106", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0438\u0437 \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u041c\u0415\u0422\u042b https://meta.realweb.ru/card?e=2770&o=30820923-a571-4a93-a774-72f3c3c00d9c&env=eyJwXzQ1NTckZV8yNzcwJG9fMzA4MjA5MjMtYTU3MS00YTkzLWE3NzQtNzJmM2MzYzAwZDljIjp7InNwIjp7InBlcmlvZCI6eyJmcm9tIjoiMjAyMS0xMi0wMSIsInRvIjoiMjAyMi0wMS0zMSJ9fX19&a=58", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`perekrestokvprok-bq`.`test2`.`tiktok_perek_settings_6952834783391023106`", "created_at": 1676546309.4323046}}, "macros": {"macro.perekrestokvprok.aud": {"unique_id": "macro.perekrestokvprok.aud", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "macros\\auditory.sql", "original_file_path": "macros\\auditory.sql", "name": "aud", "macro_sql": "{% macro aud(campaign_name, adset_name='\"-\"') %}\r\n    CASE\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'minusfrequency2')\r\n        THEN 'All buyers minus frequency 2'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'aud.cart')\r\n        THEN 'Add to cart not buy'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'core_promo_5')\r\n        THEN '\u042f\u0434\u0440\u043e_\u041f\u0440\u043e\u043c\u043e+5_fix'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'reg_not_buy')\r\n        THEN 'Registered but not buy'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'purchase15_22')\r\n        THEN '\u041f\u0440\u0435\u0434\u043e\u0442\u0442\u043e\u043a'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'purchase23_73')\r\n        THEN '\u041e\u0442\u0442\u043e\u043a'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'purchase74_130')\r\n        OR REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'purchase_aft130')\r\n        THEN '\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u043e\u0442\u0442\u043e\u043a'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'notused_30d')\r\n        THEN '\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 30 \u0434\u043d\u0435\u0439'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'purch_less_2')\r\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c 2 \u0440\u0430\u0437\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'purch_from_2')\r\n        THEN '\u041f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 2 \u0440\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'deep_outflow_rtg')\r\n        THEN 'Deep_outflow_rtg'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'cpo_outflow_rtg')\r\n        THEN 'outflow'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'cpo_preflow_rtg')\r\n        THEN 'preflow'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'cpo_installed_the_app_but_not_buy_')\r\n        THEN 'Installed_the_app_but_not_buy'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'first_open_.ot_buy_rtg')\r\n        THEN 'First_open_not_buy_rtg'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'installed_the_app_but_not_buy_rtg')\r\n        THEN 'Installed_the_app_but_not_buy_rtg'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'registered_but_not_buy')\r\n        THEN 'Registered_but_not_buy'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), 'firebase')\r\n        THEN  \"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\" \r\n        WHEN REGEXP_CONTAINS(LOWER({{campaign_name}}), 'inapp')\r\n        THEN '\u0410\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438 (inapp)'\r\n        ELSE '\u041d\u0435\u0442 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u0438' END\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.3789017, "supported_languages": null}, "macro.perekrestokvprok.conversion_source_type": {"unique_id": "macro.perekrestokvprok.conversion_source_type", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "macros\\conversion_source_type.sql", "original_file_path": "macros\\conversion_source_type.sql", "name": "conversion_source_type", "macro_sql": "{% macro conversion_source_type(campaign_name, source) %}\r\n    CASE \r\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'[\\[_]cpi[\\]_]') OR {{source}} = 'Apple Search Ads' THEN 'CPI'\r\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'[\\[_]cpa[\\]_]') OR REGEXP_CONTAINS({{campaign_name}}, r'^realwebcpa') THEN 'CPA'\r\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'[\\[_]cpc[\\]_]') THEN 'CPC'\r\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'[\\[_]cpm[\\]_]') THEN 'CPM'\r\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'[\\[_]cpo[\\]_]') THEN 'CPO'\r\n    ELSE '\u041d\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043e' END\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.3808856, "supported_languages": null}, "macro.perekrestokvprok.test_freshness": {"unique_id": "macro.perekrestokvprok.test_freshness", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "macros\\freshness_test.sql", "original_file_path": "macros\\freshness_test.sql", "name": "test_freshness", "macro_sql": "{% test freshness(model, column_name, days = 1) %}\r\n{% set dt = modules.datetime.date.today() %}\r\n{% if modules.datetime.date.isoweekday(dt) < 6 %}\r\n    -- \u0444\u0435\u0439\u043b\u0438\u0442\u0441\u044f \u0435\u0441\u043b\u0438 \u0432 \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u0434\u043d\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430 \u0432\u0447\u0435\u0440\u0430 \u043d\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u044b\r\n    WITH source AS (\r\n    SELECT\r\n        DATE(MAX({{ column_name }})) AS max_date\r\n    FROM {{ model }}\r\n    ),\r\n\r\n    mistakes AS (\r\n        SELECT max_date\r\n        FROM source\r\n        WHERE max_date < DATE_SUB(CURRENT_DATE(), INTERVAL {{ days }} DAY)\r\n    )\r\n\r\n    SELECT *    \r\n    FROM mistakes\r\n\r\n{% else %}\r\n    -- \u0441\u0435\u043b\u0435\u043a\u0442\u0438\u043c \u043d\u0438\u0447\u0435\u0433\u043e\r\n    SELECT x\r\n    FROM {{ model }}, UNNEST([1]) AS x\r\n    WHERE x < 1\r\n\r\n{% endif %}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.382897, "supported_languages": null}, "macro.perekrestokvprok.geo": {"unique_id": "macro.perekrestokvprok.geo", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "macros\\geo.sql", "original_file_path": "macros\\geo.sql", "name": "geo", "macro_sql": "{% macro geo(campaign_name, adset_name='\"-\"') %}\r\n    CASE\r\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), r'msk+spb|mskspb|msk_spb') THEN '\u041c\u0421\u041a, \u0421\u041f\u0431'\r\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), r'spb') THEN '\u0421\u041f\u0431'\r\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), r'msk') THEN '\u041c\u0421\u041a'\r\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), r'_nn_|g:nn|\\[nn\\]') THEN '\u041d\u041d'\r\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), r'reg1') THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439'\r\n          WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}], ' ')), r'reg2|rostov|kzn|g_all')THEN '\u0420\u0435\u0433\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438'\r\n        ELSE '\u0420\u043e\u0441\u0441\u0438\u044f' END\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.3858933, "supported_languages": null}, "macro.perekrestokvprok.get_column_values": {"unique_id": "macro.perekrestokvprok.get_column_values", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "macros\\get_column_values_as_a_list.sql", "original_file_path": "macros\\get_column_values_as_a_list.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(column_name, relation) %}\r\n\r\n{% set relation_query %}\r\nselect distinct\r\n{{ column_name }}\r\nfrom {{ relation }}\r\norder by 1 desc\r\n{% endset %}\r\n\r\n{% set results = run_query(relation_query) %}\r\n\r\n{% if execute %}\r\n\r\n{% set results_list = results.columns[0].values() %}\r\n{% else %}\r\n{% set results_list = [] %}\r\n{% endif %}\r\n\r\n{{ return(results_list) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.3876882, "supported_languages": null}, "macro.perekrestokvprok.get_promo": {"unique_id": "macro.perekrestokvprok.get_promo", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "macros\\get_promo.sql", "original_file_path": "macros\\get_promo.sql", "name": "get_promo", "macro_sql": "{% macro get_promo() %}\r\n\r\n{{ return(get_column_values('promo', ref('stg_promo_dict_sheets'))) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.perekrestokvprok.get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.3876882, "supported_languages": null}, "macro.perekrestokvprok.is_true_realweb": {"unique_id": "macro.perekrestokvprok.is_true_realweb", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "macros\\is_true_realweb.sql", "original_file_path": "macros\\is_true_realweb.sql", "name": "is_true_realweb", "macro_sql": "{% macro is_true_realweb(campaign_name, media_source) %}\r\n    CASE\r\n        WHEN REGEXP_CONTAINS(LOWER({{campaign_name}}), r'realweb_|^ohm|\\(exact\\)|\u0437\u043e\u043e') \r\n        OR {{media_source}} = 'Apple Search Ads' THEN 1\r\n        ELSE 0 END\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.3890038, "supported_languages": null}, "macro.perekrestokvprok.normalize": {"unique_id": "macro.perekrestokvprok.normalize", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "macros\\normalize.sql", "original_file_path": "macros\\normalize.sql", "name": "normalize", "macro_sql": "{% macro normalize(campaign_name) %}\r\n    TRIM(\r\n        REGEXP_REPLACE(\r\n            LOWER(\r\n                REGEXP_REPLACE(\r\n                    REGEXP_REPLACE(\r\n                        REGEXP_REPLACE({{campaign_name}},  r'(_install_week.*)', '_install_weekend'), \r\n                    r'(_install_promo_gl.*)', '_install_promo_global'), \r\n                r'(_install_promo_re.*)', '_install_promo_regular')\r\n            ), r'\\+|-', '_')\r\n        )\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.3890038, "supported_languages": null}, "macro.perekrestokvprok.partner": {"unique_id": "macro.perekrestokvprok.partner", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "macros\\partner.sql", "original_file_path": "macros\\partner.sql", "name": "partner", "macro_sql": "{% macro partner(campaign_name) %}\r\n    CASE \r\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'_ms_') THEN 'Mobisharks'\r\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'_tl_') THEN '2leads'\r\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'_mx_') THEN 'MobX'\r\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'_sw_') THEN 'SW'\r\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'_tm_') THEN 'Think Mobile'\r\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'_abc[_\\s]|_sf_') THEN 'Mediasurfer'\r\n        WHEN REGEXP_CONTAINS({{campaign_name}}, r'_a999') THEN 'In-house'\r\n    ELSE '-' END\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.390162, "supported_languages": null}, "macro.perekrestokvprok.platform": {"unique_id": "macro.perekrestokvprok.platform", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "macros\\platform.sql", "original_file_path": "macros\\platform.sql", "name": "platform", "macro_sql": "{% macro platform(campaign_name) %}\r\n    CASE\r\n        WHEN REGEXP_CONTAINS(LOWER({{campaign_name}}), r'\\[p:ios\\]|_ios_|p02') THEN 'ios'\r\n        WHEN REGEXP_CONTAINS(LOWER(campaign_name), r'\\[p:and\\]|_and_|android|p01|:and_') THEN 'android'\r\n    ELSE 'no_platform' END\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.390162, "supported_languages": null}, "macro.perekrestokvprok.promo_search": {"unique_id": "macro.perekrestokvprok.promo_search", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "macros\\promo_search.sql", "original_file_path": "macros\\promo_search.sql", "name": "promo_search", "macro_sql": "{% macro promo_search(campaign_name, adset_name='\"-\"', ad_name='\"-\"') %}\r\n\r\n{%- set promos = get_promo() -%}\r\n\r\n    CASE\r\n{%- for promo in promos %}\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}, {{ad_name}}], ' ')), r'{{promo}}') THEN '{{promo}}'\r\n{% endfor %}\r\n    ELSE '-' END\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.perekrestokvprok.get_promo"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.3915281, "supported_languages": null}, "macro.perekrestokvprok.promo_type": {"unique_id": "macro.perekrestokvprok.promo_type", "package_name": "perekrestokvprok", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt", "path": "macros\\promo_type.sql", "original_file_path": "macros\\promo_type.sql", "name": "promo_type", "macro_sql": "{% macro promo_type(campaign_name, adset_name='\"-\"') %}\r\n    CASE\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}],'')), r'promo.*regular') THEN 'promo regular'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}],'')), r'promo.*global') THEN 'promo global'\r\n        WHEN REGEXP_CONTAINS(LOWER(ARRAY_TO_STRING([{{campaign_name}}, {{adset_name}}],'')), r'promo.*feed') THEN 'promo feed'\r\n    ELSE '-' END\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.3925626, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.3993583, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.3993583, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"unique_id": "macro.dbt_bigquery.bigquery_options", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4003508, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.401381, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n    {{ bigquery_table_options(config, model, temporary) }}\n    as (\n      {{ compiled_code }}\n    );\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4036787, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"unique_id": "macro.dbt_bigquery.bigquery_view_options", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4056668, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4056668, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4066503, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4066503, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4066503, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4066503, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4076557, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4076557, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.408652, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.408652, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.408652, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4096487, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4106462, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.411642, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"unique_id": "macro.dbt_bigquery.bigquery__test_unique", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.411642, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"unique_id": "macro.dbt_bigquery.bigquery__upload_file", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4126406, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4176846, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.418557, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.418557, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4196553, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4206517, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4215786, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4215786, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\copy.sql", "original_file_path": "macros\\materializations\\copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.423867, "supported_languages": ["sql"]}, "macro.dbt_bigquery.declare_dbt_max_partition": {"unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, complied_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in complied_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4278514, "supported_languages": null}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4288473, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {#-- Because we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"dynamic\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, compiled_code) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.430842, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.432839, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ declare_dbt_max_partition(this, partition_by, compiled_code, language) +\n           create_table_as(True, tmp_relation, compiled_code, language)\n        }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.439811, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4406426, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4406426, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4417744, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.442778, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.442778, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_labs_materialized_views.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.442778, "supported_languages": null}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.44933, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"unique_id": "macro.dbt_bigquery.py_write_table", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.44933, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4503405, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4513357, "supported_languages": ["sql"]}, "macro.dbt_bigquery.bigquery__array_append": {"unique_id": "macro.dbt_bigquery.bigquery__array_append", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4523222, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"unique_id": "macro.dbt_bigquery.bigquery__array_concat", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4532938, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"unique_id": "macro.dbt_bigquery.bigquery__array_construct", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4540803, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"unique_id": "macro.dbt_bigquery.bigquery__bool_or", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4540803, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"unique_id": "macro.dbt_bigquery.bigquery__dateadd", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4553564, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"unique_id": "macro.dbt_bigquery.bigquery__datediff", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.456446, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4570427, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4570427, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"unique_id": "macro.dbt_bigquery.bigquery__except", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4570427, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"unique_id": "macro.dbt_bigquery.bigquery__hash", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4584377, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"unique_id": "macro.dbt_bigquery.bigquery__intersect", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4584377, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"unique_id": "macro.dbt_bigquery.bigquery__listagg", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4604445, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"unique_id": "macro.dbt_bigquery.bigquery__position", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4624891, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"unique_id": "macro.dbt_bigquery.bigquery__right", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4634347, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.464502, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"unique_id": "macro.dbt_bigquery.bigquery__split_part", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.465443, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.466496, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4674902, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "package_name": "dbt_bigquery", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4674902, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4694862, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4704826, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4704826, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4704826, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.471481, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.471481, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.471481, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4724753, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4724753, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4734716, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4734716, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4734716, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4754798, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4754798, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4764278, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4764278, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4784548, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.481377, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4824438, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4824438, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4824438, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4834483, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.484434, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4854307, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4854307, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4874268, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4883513, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.489428, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4904134, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4904134, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4904134, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4914107, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4934042, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4944, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4944, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4953973, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4953973, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4953973, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.496405, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.496405, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4973462, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4973462, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4984007, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4993865, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.4993865, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5003822, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5003822, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5013773, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.506361, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.506361, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5073564, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5073564, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5083642, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5083642, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5093515, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5093515, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5093515, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5103474, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5103474, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5113518, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5113518, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.512341, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5133371, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5133371, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5133371, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5152602, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5152602, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5152602, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5163414, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.517264, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.517264, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.517264, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.517264, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5183215, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5183215, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5183215, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5193248, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.521311, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5243032, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5252972, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5262957, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5292916, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.530282, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.530282, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5322778, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5332355, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5332355, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.534865, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.534865, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5361123, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5369642, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5369642, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5380678, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5390701, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5390701, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.540789, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.540789, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.542, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5439887, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5439887, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5449903, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5449903, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5449903, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5473518, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5493462, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5503435, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5503435, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5523381, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5621128, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5640342, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5700853, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5730789, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5730789, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5750792, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5750792, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5760655, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5840392, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5860379, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.589022, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5900261, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.592012, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.592012, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.59302, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.59302, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5940058, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5940058, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5940058, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.595001, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.595001, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5959983, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5959983, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.596925, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5979917, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.59892, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.5999713, "supported_languages": null}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.60497, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6079667, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6089568, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6089568, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6089568, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6099544, "supported_languages": null}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6109037, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6109037, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6159344, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.622908, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.623907, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6249042, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6258998, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6258998, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6258998, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6269, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6269, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6269, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6269, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6278954, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6288927, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6308815, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6368618, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6428435, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6428435, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6428435, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.643842, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.643842, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.643842, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.643842, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6458325, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6458325, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6468341, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6478276, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6577952, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6590273, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6590273, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6651485, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6651485, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6661444, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6671443, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6671443, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6681418, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6701307, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.673126, "supported_languages": null}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6742864, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6742864, "supported_languages": null}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.678459, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6794763, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6803803, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6834393, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6844347, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6844347, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6854365, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6854365, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6864364, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6864364, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.687392, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.687392, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.688437, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6893504, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6893504, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6904147, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.691349, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.691349, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6924095, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6924095, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6933377, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6933377, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6954107, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6954107, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6954107, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6963937, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6963937, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6973207, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6973207, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6973207, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6973207, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6983871, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6983871, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6983871, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6993847, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.6993847, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7003157, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7003157, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7013776, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7013776, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7023823, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.703305, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.703305, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7043684, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7043684, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7052946, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7052946, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7052946, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.706365, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.706365, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7072904, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7083557, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7083557, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7093053, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7093053, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7113314, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7122767, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7122767, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7132723, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7132723, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7143347, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7152624, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7152624, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.716328, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.716328, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.717292, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.717292, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7183044, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7193177, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7193177, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7202504, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.721312, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7223094, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7223094, "supported_languages": null}, "macro.codegen.generate_base_model": {"unique_id": "macro.codegen.generate_base_model", "package_name": "codegen", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\codegen", "path": "macros\\generate_base_model.sql", "original_file_path": "macros\\generate_base_model.sql", "name": "generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False) %}\r\n\r\n{%- set source_relation = source(source_name, table_name) -%}\r\n\r\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\r\n{% set column_names=columns | map(attribute='name') %}\r\n{% set base_model_sql %}\r\nwith source as (\r\n\r\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\r\n\r\n),\r\n\r\nrenamed as (\r\n\r\n    select\r\n        {%- if leading_commas -%}\r\n        {%- for column in column_names %}\r\n        {{\", \" if not loop.first}}{{ column | lower }}\r\n        {%- endfor %}\r\n        {%- else -%}\r\n        {%- for column in column_names %}\r\n        {{ column | lower }}{{\",\" if not loop.last}}\r\n        {%- endfor -%}\r\n        {%- endif %}\r\n\r\n    from source\r\n\r\n)\r\n\r\nselect * from renamed\r\n{% endset %}\r\n\r\n{% if execute %}\r\n\r\n{{ log(base_model_sql, info=True) }}\r\n{% do return(base_model_sql) %}\r\n\r\n{% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.725298, "supported_languages": null}, "macro.codegen.generate_model_yaml": {"unique_id": "macro.codegen.generate_model_yaml", "package_name": "codegen", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\codegen", "path": "macros\\generate_model_yaml.sql", "original_file_path": "macros\\generate_model_yaml.sql", "name": "generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_name) %}\r\n\r\n{% set model_yaml=[] %}\r\n\r\n{% do model_yaml.append('version: 2') %}\r\n{% do model_yaml.append('') %}\r\n{% do model_yaml.append('models:') %}\r\n{% do model_yaml.append('  - name: ' ~ model_name | lower) %}\r\n{% do model_yaml.append('    description: \"\"') %}\r\n{% do model_yaml.append('    columns:') %}\r\n\r\n{% set relation=ref(model_name) %}\r\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\r\n\r\n{% for column in columns %}\r\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\r\n    {% do model_yaml.append('        description: \"\"') %}\r\n    {% do model_yaml.append('') %}\r\n{% endfor %}\r\n\r\n{% if execute %}\r\n\r\n    {% set joined = model_yaml | join ('\\n') %}\r\n    {{ log(joined, info=True) }}\r\n    {% do return(joined) %}\r\n\r\n{% endif %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7282908, "supported_languages": null}, "macro.codegen.get_tables_in_schema": {"unique_id": "macro.codegen.get_tables_in_schema", "package_name": "codegen", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\codegen", "path": "macros\\generate_source.sql", "original_file_path": "macros\\generate_source.sql", "name": "get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database) %}\r\n\r\n    {% set tables=dbt_utils.get_relations_by_pattern(\r\n            database=database_name,\r\n            schema_pattern=schema_name,\r\n            table_pattern='%'\r\n    ) %}\r\n\r\n    {% set table_list= tables | map(attribute='identifier') %}\r\n\r\n    {{ return(table_list | sort) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.730293, "supported_languages": null}, "macro.codegen.generate_source": {"unique_id": "macro.codegen.generate_source", "package_name": "codegen", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\codegen", "path": "macros\\generate_source.sql", "original_file_path": "macros\\generate_source.sql", "name": "generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False) %}\r\n\r\n{% set sources_yaml=[] %}\r\n\r\n{% do sources_yaml.append('version: 2') %}\r\n{% do sources_yaml.append('') %}\r\n{% do sources_yaml.append('sources:') %}\r\n{% do sources_yaml.append('  - name: ' ~ schema_name | lower) %}\r\n\r\n{% if database_name != target.database %}\r\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\r\n{% endif %}\r\n\r\n{% do sources_yaml.append('    tables:') %}\r\n\r\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name) %}\r\n\r\n{% for table in tables %}\r\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\r\n\r\n    {% if generate_columns %}\r\n    {% do sources_yaml.append('        columns:') %}\r\n\r\n        {% set table_relation=api.Relation.create(\r\n            database=database_name,\r\n            schema=schema_name,\r\n            identifier=table\r\n        ) %}\r\n\r\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\r\n\r\n        {% for column in columns %}\r\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\r\n            {% if include_descriptions %}\r\n                {% do sources_yaml.append('            description: \"\"' ) %}\r\n            {% endif %}\r\n        {% endfor %}\r\n            {% do sources_yaml.append('') %}\r\n\r\n    {% endif %}\r\n\r\n{% endfor %}\r\n\r\n{% if execute %}\r\n\r\n    {% set joined = sources_yaml | join ('\\n') %}\r\n    {{ log(joined, info=True) }}\r\n    {% do return(joined) %}\r\n\r\n{% endif %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.734268, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\r\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7362635, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\r\n\r\n{%- if start_date and end_date -%}\r\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\r\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\r\n\r\n{%- elif n_dateparts and datepart -%}\r\n\r\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\r\n{%- set end_date = dbt_date.tomorrow() -%}\r\n{%- endif -%}\r\n\r\nwith date_spine as\r\n(\r\n\r\n    {{ dbt_utils.date_spine(\r\n        datepart=datepart,\r\n        start_date=start_date,\r\n        end_date=end_date,\r\n       )\r\n    }}\r\n\r\n)\r\nselect\r\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\r\nfrom\r\n    date_spine d\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7372575, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\r\n\r\n{%- if start_date and end_date -%}\r\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\r\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\r\n\r\n{%- elif n_dateparts and datepart -%}\r\n\r\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\r\n{%- set end_date = dbt_date.tomorrow() -%}\r\n{%- endif -%}\r\n\r\nwith date_spine as\r\n(\r\n\r\n    {{ dbt_utils.date_spine(\r\n        datepart=datepart,\r\n        start_date=start_date,\r\n        end_date=end_date,\r\n       )\r\n    }}\r\n\r\n)\r\nselect\r\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\r\nfrom\r\n    date_spine d\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7382543, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\r\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.750882, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\r\nwith base_dates as (\r\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\r\n),\r\ndates_with_prior_year_dates as (\r\n\r\n    select\r\n        cast(d.date_day as date) as date_day,\r\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\r\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\r\n    from\r\n    \tbase_dates d\r\n\r\n)\r\nselect\r\n    d.date_day,\r\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\r\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\r\n    d.prior_year_date_day as prior_year_date_day,\r\n    d.prior_year_over_year_date_day,\r\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\r\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\r\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\r\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\r\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\r\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\r\n\r\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\r\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\r\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\r\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\r\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\r\n\r\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\r\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\r\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\r\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\r\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\r\n\r\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\r\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\r\n\r\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\r\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\r\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\r\n\r\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\r\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\r\n\r\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\r\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\r\n\r\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\r\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\r\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\r\n\r\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\r\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\r\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\r\nfrom\r\n    dates_with_prior_year_dates d\r\norder by 1\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.755611, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\r\nwith base_dates as (\r\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\r\n),\r\ndates_with_prior_year_dates as (\r\n\r\n    select\r\n        cast(d.date_day as date) as date_day,\r\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\r\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\r\n    from\r\n    \tbase_dates d\r\n\r\n)\r\nselect\r\n    d.date_day,\r\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\r\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\r\n    d.prior_year_date_day as prior_year_date_day,\r\n    d.prior_year_over_year_date_day,\r\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\r\n\r\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\r\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\r\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\r\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\r\n\r\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\r\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\r\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\r\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\r\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\r\n\r\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\r\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\r\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\r\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\r\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\r\n\r\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\r\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\r\n\r\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\r\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\r\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\r\n\r\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\r\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\r\n\r\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\r\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\r\n\r\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\r\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\r\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\r\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\r\n\r\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\r\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\r\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\r\nfrom\r\n    dates_with_prior_year_dates d\r\norder by 1\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.760914, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\r\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\r\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\r\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7632592, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\r\n{%- if not source_tz -%}\r\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\r\n{%- else -%}\r\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\r\n{%- endif -%}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.764173, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\r\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.764173, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\r\nfrom_utc_timestamp(\r\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\r\n        '{{ target_tz }}'\r\n        )\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.764173, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\r\n{%- if source_tz -%}\r\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\r\n{%- else -%}\r\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\r\n{%- endif -%}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.765169, "supported_languages": null}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\r\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.766166, "supported_languages": null}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\r\n    date_part('{{ datepart }}', {{  date }})\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.766166, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\r\n    extract({{ datepart }} from {{ date }})\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7671633, "supported_languages": null}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\r\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7682006, "supported_languages": null}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "default__day_name", "macro_sql": "\r\n\r\n{%- macro default__day_name(date, short) -%}\r\n{%- set f = 'Dy' if short else 'Day' -%}\r\n    to_char({{ date }}, '{{ f }}')\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7692266, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "snowflake__day_name", "macro_sql": "\r\n\r\n{%- macro snowflake__day_name(date, short) -%}\r\n    {%- if short -%}\r\n    dayname({{ date }})\r\n    {%- else -%}\r\n    -- long version not implemented on Snowflake so we're doing it manually :/\r\n    case dayname({{ date }})\r\n        when 'Mon' then 'Monday'\r\n        when 'Tue' then 'Tuesday'\r\n        when 'Wed' then 'Wednesday'\r\n        when 'Thu' then 'Thursday'\r\n        when 'Fri' then 'Friday'\r\n        when 'Sat' then 'Saturday'\r\n        when 'Sun' then 'Sunday'\r\n    end\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7692266, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "bigquery__day_name", "macro_sql": "\r\n\r\n{%- macro bigquery__day_name(date, short) -%}\r\n{%- set f = '%a' if short else '%A' -%}\r\n    format_date('{{ f }}', cast({{ date }} as date))\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7702887, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "postgres__day_name", "macro_sql": "\r\n\r\n{%- macro postgres__day_name(date, short) -%}\r\n{# FM = Fill mode, which suppresses padding blanks #}\r\n{%- set f = 'FMDy' if short else 'FMDay' -%}\r\n    to_char({{ date }}, '{{ f }}')\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7702887, "supported_languages": null}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\r\n{{ dbt_date.date_part('day', date) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7732556, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\r\n\r\n{%- macro redshift__day_of_month(date) -%}\r\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7732556, "supported_languages": null}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\r\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7762587, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\r\n\r\n{%- macro default__day_of_week(date, isoweek) -%}\r\n\r\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\r\n\r\n    {%- if isoweek -%}\r\n    case\r\n        -- Shift start of week from Sunday (0) to Monday (1)\r\n        when {{ dow }} = 0 then 7\r\n        else {{ dow }}\r\n    end\r\n    {%- else -%}\r\n    {{ dow }} + 1\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.777256, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\r\n\r\n{%- macro snowflake__day_of_week(date, isoweek) -%}\r\n\r\n    {%- if isoweek -%}\r\n        {%- set dow_part = 'dayofweekiso' -%}\r\n        {{ dbt_date.date_part(dow_part, date) }}\r\n    {%- else -%}\r\n        {%- set dow_part = 'dayofweek' -%}\r\n        case\r\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\r\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\r\n        end\r\n    {%- endif -%}\r\n\r\n\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.778251, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\r\n\r\n{%- macro bigquery__day_of_week(date, isoweek) -%}\r\n\r\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\r\n\r\n    {%- if isoweek -%}\r\n    case\r\n        -- Shift start of week from Sunday (1) to Monday (2)\r\n        when {{ dow }} = 1 then 7\r\n        else {{ dow }} - 1\r\n    end\r\n    {%- else -%}\r\n    {{ dow }}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.778251, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\r\n\r\n\r\n{%- macro postgres__day_of_week(date, isoweek) -%}\r\n\r\n    {%- if isoweek -%}\r\n        {%- set dow_part = 'isodow' -%}\r\n        -- Monday(1) to Sunday (7)\r\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\r\n    {%- else -%}\r\n        {%- set dow_part = 'dow' -%}\r\n        -- Sunday(1) to Saturday (7)\r\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7792623, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\r\n\r\n\r\n{%- macro redshift__day_of_week(date, isoweek) -%}\r\n\r\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\r\n\r\n    {%- if isoweek -%}\r\n    case\r\n        -- Shift start of week from Sunday (0) to Monday (1)\r\n        when {{ dow }} = 0 then 7\r\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\r\n    end\r\n    {%- else -%}\r\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.780248, "supported_languages": null}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\r\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7811737, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\r\n\r\n{%- macro default__day_of_year(date) -%}\r\n    {{ dbt_date.date_part('dayofyear', date) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7811737, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\r\n\r\n{%- macro postgres__day_of_year(date) -%}\r\n    {{ dbt_date.date_part('doy', date) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7822428, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\r\n\r\n{%- macro redshift__day_of_year(date) -%}\r\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7822428, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\r\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7842352, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\r\n\r\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\r\n    {%- if format != \"seconds\" -%}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\r\n        )\r\n    }}\r\n    {% endif -%}\r\n    to_timestamp({{ epochs }})\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7852333, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\r\n\r\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\r\n    {%- if format != \"seconds\" -%}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\r\n        )\r\n    }}\r\n    {% endif -%}\r\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7852333, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\r\n\r\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\r\n    {%- if format == \"seconds\" -%}\r\n    {%- set scale = 0 -%}\r\n    {%- elif format == \"milliseconds\" -%}\r\n    {%- set scale = 3 -%}\r\n    {%- elif format == \"microseconds\" -%}\r\n    {%- set scale = 6 -%}\r\n    {%- else -%}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\r\n        )\r\n    }}\r\n    {% endif -%}\r\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7862267, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\r\n\r\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\r\n    {%- if format == \"seconds\" -%}\r\n        timestamp_seconds({{ epochs }})\r\n    {%- elif format == \"milliseconds\" -%}\r\n        timestamp_millis({{ epochs }})\r\n    {%- elif format == \"microseconds\" -%}\r\n        timestamp_micros({{ epochs }})\r\n    {%- else -%}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\r\n        )\r\n    }}\r\n    {% endif -%}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.787222, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\r\n{%-set dt = date if date else dbt_date.today(tz) -%}\r\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7881494, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\r\n{%- set dt = dbt_date.iso_week_start(date) -%}\r\n{{ dbt_date.n_days_away(6, dt) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7891474, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\r\n\r\n{%- macro default__iso_week_end(date) -%}\r\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7891474, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\r\n\r\n{%- macro snowflake__iso_week_end(date) -%}\r\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7891474, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\r\n{%-set dt = date if date else dbt_date.today(tz) -%}\r\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7911952, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\r\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7911952, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\r\n\r\n{%- macro default__iso_week_of_year(date) -%}\r\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7911952, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\r\n\r\n{%- macro snowflake__iso_week_of_year(date) -%}\r\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7922046, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\r\n\r\n{%- macro postgres__iso_week_of_year(date) -%}\r\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\r\n{{ dbt_date._iso_week_of_year(date, 'week') }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7922046, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\r\n{%-set dt = date if date else dbt_date.today(tz) -%}\r\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7932012, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\r\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7932012, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\r\n\r\n{%- macro default__iso_week_start(date) -%}\r\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7942133, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\r\n\r\n{%- macro snowflake__iso_week_start(date) -%}\r\n{{ dbt_date._iso_week_start(date, 'week') }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7942133, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\r\n\r\n{%- macro postgres__iso_week_start(date) -%}\r\n{{ dbt_date._iso_week_start(date, 'week') }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7942133, "supported_languages": null}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\last_month.sql", "original_file_path": "macros\\calendar_date\\last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\r\n{{ dbt_date.n_months_ago(1, tz) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7951586, "supported_languages": null}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\last_month_name.sql", "original_file_path": "macros\\calendar_date\\last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\r\n{{ dbt_date.month_name(dbt_date.lastnext_month(1, tz), short=short) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7961943, "supported_languages": null}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\last_month_number.sql", "original_file_path": "macros\\calendar_date\\last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\r\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7971241, "supported_languages": null}, "macro.dbt_date.last_month_start_date": {"unique_id": "macro.dbt_date.last_month_start_date", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\last_month_start_date.sql", "original_file_path": "macros\\calendar_date\\last_month_start_date.sql", "name": "last_month_start_date", "macro_sql": "{%- macro last_month_start_date(tz=None) -%}\r\n{{ dbt_date.last_month(1, tz) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7981908, "supported_languages": null}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\last_week.sql", "original_file_path": "macros\\calendar_date\\last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\r\n{{ dbt_date.n_weeks_ago(1, tz) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.7981908, "supported_languages": null}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\r\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8001075, "supported_languages": null}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "default__month_name", "macro_sql": "\r\n\r\n{%- macro default__month_name(date, short) -%}\r\n{%- set f = 'MON' if short else 'MONTH' -%}\r\n    to_char({{ date }}, '{{ f }}')\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.801104, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "bigquery__month_name", "macro_sql": "\r\n\r\n{%- macro bigquery__month_name(date, short) -%}\r\n{%- set f = '%b' if short else '%B' -%}\r\n    format_date('{{ f }}', cast({{ date }} as date))\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.801104, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "snowflake__month_name", "macro_sql": "\r\n\r\n{%- macro snowflake__month_name(date, short) -%}\r\n{%- set f = 'MON' if short else 'MMMM' -%}\r\n    to_char({{ date }}, '{{ f }}')\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8021004, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "postgres__month_name", "macro_sql": "\r\n\r\n{%- macro postgres__month_name(date, short) -%}\r\n{# FM = Fill mode, which suppresses padding blanks #}\r\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\r\n    to_char({{ date }}, '{{ f }}')\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8021004, "supported_languages": null}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_month.sql", "original_file_path": "macros\\calendar_date\\next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\r\n{{ dbt_date.n_months_away(1, tz) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8030972, "supported_languages": null}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_month_name.sql", "original_file_path": "macros\\calendar_date\\next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\r\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.805091, "supported_languages": null}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_month_number.sql", "original_file_path": "macros\\calendar_date\\next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\r\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8060875, "supported_languages": null}, "macro.dbt_date.next_month_start_date": {"unique_id": "macro.dbt_date.next_month_start_date", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_month_start_date.sql", "original_file_path": "macros\\calendar_date\\next_month_start_date.sql", "name": "next_month_start_date", "macro_sql": "{%- macro next_month_start_date(tz=None) -%}\r\n{{ dbt_date.next_month(1, tz) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.807084, "supported_languages": null}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_week.sql", "original_file_path": "macros\\calendar_date\\next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\r\n{{ dbt_date.n_weeks_away(1, tz) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.807084, "supported_languages": null}, "macro.dbt_date.next_week_start_date": {"unique_id": "macro.dbt_date.next_week_start_date", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_week_start_date.sql", "original_file_path": "macros\\calendar_date\\next_week_start_date.sql", "name": "next_week_start_date", "macro_sql": "{%- macro next_week_start_date(tz=None) -%}\r\n{{ dbt_date.next_week(1, tz) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.next_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.808081, "supported_languages": null}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\now.sql", "original_file_path": "macros\\calendar_date\\now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\r\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8090901, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_days_ago.sql", "original_file_path": "macros\\calendar_date\\n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\r\n{%-set dt = date if date else dbt_date.today(tz) -%}\r\n{%- set n = n|int -%}\r\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8100739, "supported_languages": null}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_days_away.sql", "original_file_path": "macros\\calendar_date\\n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\r\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.811071, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_months_ago.sql", "original_file_path": "macros\\calendar_date\\n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\r\n{%- set n = n|int -%}\r\n{{ dbt_utils.date_trunc('month', \r\n    dbt_utils.dateadd('month', -1 * n, \r\n        dbt_date.today(tz)\r\n        )\r\n    ) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8120673, "supported_languages": null}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_months_away.sql", "original_file_path": "macros\\calendar_date\\n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\r\n{%- set n = n|int -%}\r\n{{ dbt_utils.date_trunc('month', \r\n    dbt_utils.dateadd('month', n, \r\n        dbt_date.today(tz)\r\n        )\r\n    ) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8130639, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_weeks_ago.sql", "original_file_path": "macros\\calendar_date\\n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\r\n{%- set n = n|int -%}\r\n{{ dbt_utils.date_trunc('week', \r\n    dbt_utils.dateadd('week', -1 * n, \r\n        dbt_date.today(tz)\r\n        )\r\n    ) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8140607, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_weeks_away.sql", "original_file_path": "macros\\calendar_date\\n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\r\n{%- set n = n|int -%}\r\n{{ dbt_utils.date_trunc('week', \r\n    dbt_utils.dateadd('week', n, \r\n        dbt_date.today(tz)\r\n        )\r\n    ) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8160539, "supported_languages": null}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\periods_since.sql", "original_file_path": "macros\\calendar_date\\periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\r\n{{ dbt_utils.datediff(date_col, dbt_date.today(tz), period_name) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8160539, "supported_languages": null}, "macro.dbt_date.this_week": {"unique_id": "macro.dbt_date.this_week", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\this_week.sql", "original_file_path": "macros\\calendar_date\\this_week.sql", "name": "this_week", "macro_sql": "{%- macro this_week(date=None, tz=None) -%}\r\n{{ dbt_utils.this_week_start(date, tz) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8170507, "supported_languages": null}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\today.sql", "original_file_path": "macros\\calendar_date\\today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\r\ncast({{ dbt_date.now(tz) }} as date)\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.818047, "supported_languages": null}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\tomorrow.sql", "original_file_path": "macros\\calendar_date\\tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\r\n{{ dbt_date.n_days_away(1, date, tz) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.818047, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\r\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8190439, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\r\n\r\n{%- macro default__to_unixtimestamp(timestamp) -%}\r\n    {{ dbt_date.date_part('epoch', timestamp) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8190439, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\r\n\r\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\r\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8200402, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\r\n\r\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\r\n    unix_seconds({{ timestamp }})\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8200402, "supported_languages": null}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\r\n{%-set dt = date if date else dbt_date.today(tz) -%}\r\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8210373, "supported_languages": null}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\r\n{{ dbt_utils.last_day(date, 'week') }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.822034, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "name": "snowflake__week_end", "macro_sql": "\r\n\r\n{%- macro snowflake__week_end(date) -%}\r\n{%- set dt = dbt_date.week_start(date) -%}\r\n{{ dbt_date.n_days_away(6, dt) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.822034, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "name": "postgres__week_end", "macro_sql": "\r\n\r\n{%- macro postgres__week_end(date) -%}\r\n{%- set dt = dbt_date.week_start(date) -%}\r\n{{ dbt_date.n_days_away(6, dt) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.822034, "supported_languages": null}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\r\n{%-set dt = date if date else dbt_date.today(tz) -%}\r\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8230305, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\r\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8240268, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\r\n\r\n{%- macro postgres__week_of_year(date) -%}\r\n{# postgresql 'week' returns isoweek. Use to_char instead.\r\n   WW = the first week starts on the first day of the year #}\r\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8240268, "supported_languages": null}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\r\n{%-set dt = date if date else dbt_date.today(tz) -%}\r\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8250237, "supported_languages": null}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\r\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8250237, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "name": "snowflake__week_start", "macro_sql": "\r\n\r\n{%- macro snowflake__week_start(date) -%}\r\n    {#\r\n        Get the day of week offset: e.g. if the date is a Sunday,\r\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\r\n    #}\r\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\r\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8260202, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "name": "postgres__week_start", "macro_sql": "\r\n\r\n{%- macro postgres__week_start(date) -%}\r\n-- Sunday as week start date\r\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8260202, "supported_languages": null}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\yesterday.sql", "original_file_path": "macros\\calendar_date\\yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\r\n{{ dbt_date.n_days_ago(1, date, tz) }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.827017, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\fiscal_date\\get_fiscal_periods.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\r\n{# \r\nThis macro requires you to pass in a ref to a date dimension, created via\r\ndbt_date.get_date_dimension()s\r\n#}\r\nwith fscl_year_dates_for_periods as (\r\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\r\n),\r\nfscl_year_w13 as (\r\n\r\n    select\r\n        f.*,\r\n        -- We count the weeks in a 13 week period\r\n        -- and separate the 4-5-4 week sequences\r\n        mod(cast(\r\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\r\n            ), 13) as w13_number,\r\n        -- Chop weeks into 13 week merch quarters\r\n        cast(\r\n            least(\r\n                floor((f.fiscal_week_of_year-1)/13.0)\r\n                , 3)\r\n            as {{ dbt_utils.type_int() }}) as quarter_number\r\n    from\r\n        fscl_year_dates_for_periods f\r\n\r\n),\r\nfscl_periods as (\r\n\r\n    select\r\n        f.date_day,\r\n        f.fiscal_year_number,\r\n        f.week_start_date,\r\n        f.week_end_date,\r\n        f.fiscal_week_of_year,\r\n        case \r\n            -- we move week 53 into the 3rd period of the quarter\r\n            when f.fiscal_week_of_year = 53 then 3\r\n            when f.w13_number between 0 and 3 then 1\r\n            when f.w13_number between 4 and 8 then 2\r\n            when f.w13_number between 9 and 12 then 3\r\n        end as period_of_quarter,\r\n        f.quarter_number\r\n    from\r\n        fscl_year_w13 f\r\n\r\n),\r\nfscl_periods_quarters as (\r\n\r\n    select\r\n        f.*,\r\n        cast((\r\n            (f.quarter_number * 3) + f.period_of_quarter\r\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\r\n    from\r\n        fscl_periods f\r\n\r\n)\r\nselect\r\n    date_day,\r\n    fiscal_year_number,\r\n    week_start_date,\r\n    week_end_date,\r\n    fiscal_week_of_year, \r\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\r\n    fiscal_period_number,\r\n    quarter_number+1 as fiscal_quarter_number,\r\n    period_of_quarter as fiscal_period_of_quarter\r\nfrom \r\n    fscl_periods_quarters \r\norder by 1,2\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8290102, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\r\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8310034, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\r\n-- this gets all the dates within a fiscal year\r\n-- determined by the given year-end-month\r\n-- ending on the saturday closest to that month's end date\r\nwith date_dimension as (\r\n    select * from {{ dates }}\r\n),\r\nyear_month_end as (\r\n\r\n    select\r\n       d.year_number-{{ shift_year }} as fiscal_year_number,\r\n       d.month_end_date\r\n    from\r\n        date_dimension d\r\n    where\r\n        d.month_of_year = {{ year_end_month }}\r\n    group by 1,2\r\n\r\n),\r\nweeks as (\r\n\r\n    select\r\n        d.year_number,\r\n        d.month_of_year,\r\n        d.date_day as week_start_date,\r\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\r\n    from\r\n        date_dimension d\r\n    where\r\n        d.day_of_week = {{ week_start_day }}\r\n\r\n),\r\n-- get all the weeks that start in the month the year ends\r\nyear_week_ends as (\r\n\r\n    select\r\n        d.year_number-{{ shift_year }} as fiscal_year_number,\r\n        d.week_end_date\r\n    from\r\n        weeks d\r\n    where\r\n        d.month_of_year = {{ year_end_month }}\r\n    group by\r\n        1,2\r\n\r\n),\r\n-- then calculate which Saturday is closest to month end\r\nweeks_at_month_end as (\r\n\r\n    select\r\n        d.fiscal_year_number,\r\n        d.week_end_date,\r\n        m.month_end_date,\r\n        rank() over\r\n            (partition by d.fiscal_year_number\r\n                order by\r\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\r\n\r\n            ) as closest_to_month_end\r\n    from\r\n        year_week_ends d\r\n        join\r\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\r\n),\r\nfiscal_year_range as (\r\n\r\n    select\r\n        w.fiscal_year_number,\r\n        cast(\r\n            {{ dbt_utils.dateadd('day', 1,\r\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\r\n            as date) as fiscal_year_start_date,\r\n        w.week_end_date as fiscal_year_end_date\r\n    from\r\n        weeks_at_month_end w\r\n    where\r\n        w.closest_to_month_end = 1\r\n\r\n),\r\nfiscal_year_dates as (\r\n\r\n    select\r\n        d.date_day,\r\n        m.fiscal_year_number,\r\n        m.fiscal_year_start_date,\r\n        m.fiscal_year_end_date,\r\n        w.week_start_date,\r\n        w.week_end_date,\r\n        -- we reset the weeks of the year starting with the merch year start date\r\n        dense_rank()\r\n            over(\r\n                partition by m.fiscal_year_number\r\n                order by w.week_start_date\r\n                ) as fiscal_week_of_year\r\n    from\r\n        date_dimension d\r\n        join\r\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\r\n        join\r\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\r\n\r\n)\r\nselect * from fiscal_year_dates order by 1\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8320003, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\r\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.832997, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\r\n\r\n    ln({{ x }})\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8339937, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\r\n\r\n    ln({{ x }})\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8339937, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\r\n\r\n    ln({{ x }})\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8339937, "supported_languages": null}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\math\\median.sql", "original_file_path": "macros\\math\\median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\r\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8370686, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\r\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8380687, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\r\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\r\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8391356, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\r\n    percentile_cont({{ field }}, {{ quantile }})\r\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8391356, "supported_languages": null}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\r\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.840131, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\r\n\r\n    rand()\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8411305, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\r\n\r\n    rand()\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8411305, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\r\n\r\n    uniform(0::float, 1::float, random())\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8411305, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\r\n\r\n    random()\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8411305, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\r\n\r\n    random()\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8421385, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\r\n\r\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\r\n        source_value, regexp, position, occurrence\r\n    ) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8430982, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\r\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8441195, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\r\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8441195, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\r\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8451161, "supported_languages": null}, "macro.dbt_expectations.spark__regexp_instr": {"unique_id": "macro.dbt_expectations.spark__regexp_instr", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\r\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8451161, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\r\n                                                                column_name,\r\n                                                                value,\r\n                                                                quote_values=False,\r\n                                                                group_by=None,\r\n                                                                row_condition=None\r\n                                                                ) %}\r\n{% set expression %}\r\ncount(distinct {{ column_name }}) > {{ value }}\r\n{% endset %}\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition)\r\n                                        }}\r\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.847045, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\r\n                                                    column_name,\r\n                                                    value,\r\n                                                    quote_values=False,\r\n                                                    group_by=None,\r\n                                                    row_condition=None\r\n                                                    ) %}\r\n{% set expression %}\r\ncount(distinct {{ column_name }}) = {{ value }}\r\n{% endset %}\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition)\r\n                                        }}\r\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.849104, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\r\n                                                                compare_model,\r\n                                                                column_name,\r\n                                                                compare_column_name,\r\n                                                                row_condition=None,\r\n                                                                compare_row_condition=None\r\n                                                                ) %}\r\n{%- set expression -%}\r\ncount(distinct {{ column_name }})\r\n{%- endset -%}\r\n{%- set compare_expression -%}\r\n{%- if compare_column_name -%}\r\ncount(distinct {{ compare_column_name }})\r\n{%- else -%}\r\n{{ expression }}\r\n{%- endif -%}\r\n{%- endset -%}\r\n{{ dbt_expectations.test_equal_expression(\r\n    model,\r\n    expression=expression,\r\n    compare_model=compare_model,\r\n    compare_expression=compare_expression,\r\n    row_condition=row_condition,\r\n    compare_row_condition=compare_row_condition,\r\n    return_difference=True\r\n) }}\r\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8500986, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\r\n                                                    value_set,\r\n                                                    quote_values=False,\r\n                                                    row_condition=None\r\n                                                    ) %}\r\n\r\nwith all_values as (\r\n\r\n    select distinct\r\n        {{ column_name }} as value_field\r\n\r\n    from {{ model }}\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n\r\n),\r\nset_values as (\r\n\r\n    {% for value in value_set -%}\r\n    select\r\n        {% if quote_values -%}\r\n        '{{ value }}'\r\n        {%- else -%}\r\n        {{ value }}\r\n        {%- endif %} as value_field\r\n    {% if not loop.last %}union all{% endif %}\r\n    {% endfor %}\r\n\r\n),\r\nunique_set_values as (\r\n\r\n    select distinct value_field\r\n    from\r\n        set_values\r\n\r\n),\r\nvalidation_errors as (\r\n    -- values from the model that are not in the set\r\n    select\r\n        v.value_field\r\n    from\r\n        all_values v\r\n        left join\r\n        unique_set_values s on v.value_field = s.value_field\r\n    where\r\n        s.value_field is null\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.852073, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\r\n                                                            value_set,\r\n                                                            quote_values=True,\r\n                                                            row_condition=None\r\n                                                            ) %}\r\n\r\nwith all_values as (\r\n\r\n    select distinct\r\n        {{ column_name }} as value_field\r\n\r\n    from {{ model }}\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n\r\n),\r\nset_values as (\r\n\r\n    {% for value in value_set -%}\r\n    select\r\n        {% if quote_values -%}\r\n        '{{ value }}'\r\n        {%- else -%}\r\n        {{ value }}\r\n        {%- endif %} as value_field\r\n    {% if not loop.last %}union all{% endif %}\r\n    {% endfor %}\r\n\r\n),\r\nunique_set_values as (\r\n\r\n    select distinct value_field\r\n    from\r\n        set_values\r\n\r\n),\r\nvalidation_errors as (\r\n    -- values in set that are not in the list of values from the model\r\n    select\r\n        s.value_field\r\n    from\r\n        unique_set_values s\r\n        left join\r\n        all_values v on s.value_field = v.value_field\r\n    where\r\n        v.value_field is null\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8540885, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\r\n                                                            value_set,\r\n                                                            quote_values=True,\r\n                                                            row_condition=None\r\n                                                            ) %}\r\n\r\nwith all_values as (\r\n\r\n    select distinct\r\n        {{ column_name }} as column_value\r\n\r\n    from {{ model }}\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n\r\n),\r\nset_values as (\r\n\r\n    {% for value in value_set -%}\r\n    select\r\n        {% if quote_values -%}\r\n        '{{ value }}'\r\n        {%- else -%}\r\n        {{ value }}\r\n        {%- endif %} as value_field\r\n    {% if not loop.last %}union all{% endif %}\r\n    {% endfor %}\r\n\r\n),\r\nunique_set_values as (\r\n\r\n    select distinct value_field\r\n    from\r\n        set_values\r\n\r\n),\r\nvalidation_errors as (\r\n\r\n    select\r\n        *\r\n    from\r\n        all_values v\r\n        full outer join\r\n        unique_set_values s on v.column_value = s.value_field\r\n    where\r\n        v.column_value is null or\r\n        s.value_field is null\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8560827, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\r\n                                                min_value=None,\r\n                                                max_value=None,\r\n                                                group_by=None,\r\n                                                row_condition=None,\r\n                                                strictly=False\r\n                                                ) %}\r\n{% set expression %}\r\nmax({{ column_name }})\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8570895, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\r\n                                                    min_value=None,\r\n                                                    max_value=None,\r\n                                                    group_by=None,\r\n                                                    row_condition=None,\r\n                                                    strictly=False\r\n                                                    ) %}\r\n{% set expression %}\r\navg({{ column_name }})\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8599975, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\r\n                                                    min_value=None,\r\n                                                    max_value=None,\r\n                                                    group_by=None,\r\n                                                    row_condition=None,\r\n                                                    strictly=False\r\n                                                    ) %}\r\n\r\n{% set expression %}\r\n{{ dbt_expectations.median(column_name) }}\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8620718, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\r\n                                                    min_value=None,\r\n                                                    max_value=None,\r\n                                                    group_by=None,\r\n                                                    row_condition=None,\r\n                                                    strictly=False\r\n                                                    ) %}\r\n{% set expression %}\r\nmin({{ column_name }})\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8640234, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\r\n                                                            value_set,\r\n                                                            top_n,\r\n                                                            quote_values=False,\r\n                                                            data_type=\"decimal\",\r\n                                                            row_condition=None\r\n                                                            ) -%}\r\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\r\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8679333, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\r\n                                                            value_set,\r\n                                                            top_n,\r\n                                                            quote_values,\r\n                                                            data_type,\r\n                                                            row_condition\r\n                                                            ) %}\r\n\r\nwith value_counts as (\r\n\r\n    select\r\n        {% if quote_values -%}\r\n        {{ column_name }}\r\n        {%- else -%}\r\n        cast({{ column_name }} as {{ data_type }})\r\n        {%- endif %} as value_field,\r\n        count(*) as value_count\r\n\r\n    from {{ model }}\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n\r\n    group by {% if quote_values -%}\r\n                {{ column_name }}\r\n            {%- else -%}\r\n                cast({{ column_name }} as {{ data_type }})\r\n            {%- endif %}\r\n\r\n),\r\nvalue_counts_ranked as (\r\n\r\n    select\r\n        *,\r\n        row_number() over(order by value_count desc) as value_count_rank\r\n    from\r\n        value_counts\r\n\r\n),\r\nvalue_count_top_n as (\r\n\r\n    select\r\n        value_field\r\n    from\r\n        value_counts_ranked\r\n    where\r\n        value_count_rank = {{ top_n }}\r\n\r\n),\r\nset_values as (\r\n\r\n    {% for value in value_set -%}\r\n    select\r\n        {% if quote_values -%}\r\n        '{{ value }}'\r\n        {%- else -%}\r\n        cast({{ value }} as {{ data_type }})\r\n        {%- endif %} as value_field\r\n    {% if not loop.last %}union all{% endif %}\r\n    {% endfor %}\r\n\r\n),\r\nunique_set_values as (\r\n\r\n    select distinct value_field\r\n    from\r\n        set_values\r\n\r\n),\r\nvalidation_errors as (\r\n    -- values from the model that are not in the set\r\n    select\r\n        value_field\r\n    from\r\n        value_count_top_n\r\n    where\r\n        value_field not in (select value_field from unique_set_values)\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.871003, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\r\n                                                            min_value=None,\r\n                                                            max_value=None,\r\n                                                            group_by=None,\r\n                                                            row_condition=None,\r\n                                                            strictly=False\r\n                                                            ) %}\r\n{% set expression %}\r\ncount(distinct {{ column_name }})/count({{ column_name }})\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.872637, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\r\n                                                            quantile,\r\n                                                            min_value=None,\r\n                                                            max_value=None,\r\n                                                            group_by=None,\r\n                                                            row_condition=None,\r\n                                                            strictly=False\r\n                                                            ) %}\r\n\r\n{% set expression %}\r\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8746293, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\r\n                                                    min_value=None,\r\n                                                    max_value=None,\r\n                                                    group_by=None,\r\n                                                    row_condition=None,\r\n                                                    strictly=False\r\n                                                    ) -%}\r\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\r\n                                                    model, column_name,\r\n                                                    min_value,\r\n                                                    max_value,\r\n                                                    group_by,\r\n                                                    row_condition,\r\n                                                    strictly\r\n                                                    ) }}\r\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8764966, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\r\n                                                    model, column_name,\r\n                                                    min_value,\r\n                                                    max_value,\r\n                                                    group_by,\r\n                                                    row_condition,\r\n                                                    strictly\r\n                                                    ) %}\r\n\r\n{% set expression %}\r\nstddev({{ column_name }})\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8774846, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\r\n                                                min_value=None,\r\n                                                max_value=None,\r\n                                                group_by=None,\r\n                                                row_condition=None,\r\n                                                strictly=False\r\n                                                ) %}\r\n{% set expression %}\r\nsum({{ column_name }})\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8784873, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\r\n                                                            min_value=None,\r\n                                                            max_value=None,\r\n                                                            group_by=None,\r\n                                                            row_condition=None,\r\n                                                            strictly=False\r\n                                                            ) %}\r\n{% set expression %}\r\ncount(distinct {{ column_name }})\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8804684, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\r\n                                                   min_value=None,\r\n                                                   max_value=None,\r\n                                                   row_condition=None,\r\n                                                   strictly=False\r\n                                                   ) %}\r\n\r\n{% set expression %}\r\n{{ column_name }}\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8814178, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\r\n                                                   sort_column=None,\r\n                                                   strictly=True,\r\n                                                   row_condition=None) %}\r\n\r\n{%- set sort_column = column_name if not sort_column else sort_column -%}\r\n{%- set operator = \"<\" if strictly else \"<=\" %}\r\nwith all_values as (\r\n\r\n    select\r\n        {{ sort_column }} as sort_column,\r\n        {{ column_name }} as value_field\r\n\r\n    from {{ model }}\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n\r\n),\r\nadd_lag_values as (\r\n\r\n    select\r\n        sort_column,\r\n        value_field,\r\n        lag(value_field) over(order by sort_column) as value_field_lag\r\n    from\r\n        all_values\r\n\r\n),\r\nvalidation_errors as (\r\n\r\n    select\r\n        *\r\n    from\r\n        add_lag_values\r\n    where\r\n        value_field_lag is not null\r\n        and\r\n        not (value_field {{ operator }} value_field_lag)\r\n\r\n)\r\nselect *\r\nfrom validation_errors\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8834574, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\r\n                                                   sort_column=None,\r\n                                                   strictly=True,\r\n                                                   row_condition=None) %}\r\n\r\n{%- set sort_column = column_name if not sort_column else sort_column -%}\r\n{%- set operator = \">\" if strictly else \">=\" %}\r\nwith all_values as (\r\n\r\n    select\r\n        {{ sort_column }} as sort_column,\r\n        {{ column_name }} as value_field\r\n\r\n    from {{ model }}\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n\r\n),\r\nadd_lag_values as (\r\n\r\n    select\r\n        sort_column,\r\n        value_field,\r\n        lag(value_field) over(order by sort_column) as value_field_lag\r\n    from\r\n        all_values\r\n\r\n),\r\nvalidation_errors as (\r\n\r\n    select\r\n        *\r\n    from\r\n        add_lag_values\r\n    where\r\n        value_field_lag is not null\r\n        and\r\n        not (value_field {{ operator }} value_field_lag)\r\n\r\n)\r\nselect *\r\nfrom validation_errors\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8854518, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\r\n                                                   value_set,\r\n                                                   quote_values=True,\r\n                                                   row_condition=None\r\n                                                   ) %}\r\n\r\nwith all_values as (\r\n\r\n    select\r\n        {{ column_name }} as value_field\r\n\r\n    from {{ model }}\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n\r\n),\r\nset_values as (\r\n\r\n    {% for value in value_set -%}\r\n    select\r\n        {% if quote_values -%}\r\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\r\n        {%- else -%}\r\n        {{ value }}\r\n        {%- endif %} as value_field\r\n    {% if not loop.last %}union all{% endif %}\r\n    {% endfor %}\r\n),\r\nvalidation_errors as (\r\n    -- values from the model that are not in the set\r\n    select\r\n        v.value_field\r\n    from\r\n        all_values v\r\n        left join\r\n        set_values s on v.value_field = s.value_field\r\n    where\r\n        s.value_field is null\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8871205, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\r\n{%- if execute -%}\r\n\r\n    {%- set column_name = column_name | upper -%}\r\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\r\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\r\n    with relation_columns as (\r\n\r\n        {% for column in columns_in_relation %}\r\n        select\r\n            cast('{{ column.name | upper }}' as {{ dbt_utils.type_string() }}) as relation_column,\r\n            cast('{{ column.dtype | upper }}' as {{ dbt_utils.type_string() }}) as relation_column_type\r\n        {% if not loop.last %}union all{% endif %}\r\n        {% endfor %}\r\n    ),\r\n    test_data as (\r\n\r\n        select\r\n            *\r\n        from\r\n            relation_columns\r\n        where\r\n            relation_column = '{{ column_name }}'\r\n            and\r\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\r\n\r\n    )\r\n    select *\r\n    from test_data\r\n\r\n{%- endif -%}\r\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8890462, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\r\n\r\n{% set expression = column_name ~ \" is null\" %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.890597, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\r\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\r\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8916318, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\r\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8925886, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\r\n                                                   value_set,\r\n                                                   quote_values=True,\r\n                                                   row_condition=None\r\n                                                   ) %}\r\n\r\nwith all_values as (\r\n\r\n    select\r\n        {{ column_name }} as value_field\r\n\r\n    from {{ model }}\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n\r\n),\r\nset_values as (\r\n\r\n    {% for value in value_set -%}\r\n    select\r\n        {% if quote_values -%}\r\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\r\n        {%- else -%}\r\n        {{ value }}\r\n        {%- endif %} as value_field\r\n    {% if not loop.last %}union all{% endif %}\r\n    {% endfor %}\r\n),\r\nvalidation_errors as (\r\n    -- values from the model that match the set\r\n    select\r\n        v.value_field\r\n    from\r\n        all_values v\r\n        join\r\n        set_values s on v.value_field = s.value_field\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.8936818, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\r\n\r\n{% set expression = column_name ~ \" is not null\" %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.894989, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\r\n\r\n{%- if take_logs %}\r\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\r\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\r\n{%- else -%}\r\ncoalesce({{ metric_column }}, 0)\r\n{%- endif %}\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9000754, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\r\n                                  column_name,\r\n                                  date_column_name,\r\n                                  period='day',\r\n                                  lookback_periods=1,\r\n                                  trend_periods=7,\r\n                                  test_periods=14,\r\n                                  sigma_threshold=3,\r\n                                  sigma_threshold_upper=None,\r\n                                  sigma_threshold_lower=None,\r\n                                  take_diffs=true,\r\n                                  take_logs=true\r\n                                ) -%}\r\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\r\n                                  column_name,\r\n                                  date_column_name,\r\n                                  period,\r\n                                  lookback_periods,\r\n                                  trend_periods,\r\n                                  test_periods,\r\n                                  sigma_threshold,\r\n                                  sigma_threshold_upper,\r\n                                  sigma_threshold_lower,\r\n                                  take_diffs,\r\n                                  take_logs\r\n                                ) }}\r\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9010663, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\r\n                                  column_name,\r\n                                  date_column_name,\r\n                                  period,\r\n                                  lookback_periods,\r\n                                  trend_periods,\r\n                                  test_periods,\r\n                                  sigma_threshold,\r\n                                  sigma_threshold_upper,\r\n                                  sigma_threshold_lower,\r\n                                  take_diffs,\r\n                                  take_logs\r\n                                ) %}\r\n\r\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\r\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\r\n\r\nwith metric_values as (\r\n\r\n    with grouped_metric_values as (\r\n\r\n        select\r\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\r\n            sum({{ column_name }}) as agg_metric_value\r\n        from\r\n            {{ model }}\r\n        group by\r\n            1\r\n\r\n    ),\r\n    {%- if take_diffs %}\r\n    grouped_metric_values_with_priors as (\r\n\r\n        select\r\n            *,\r\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\r\n    from\r\n        grouped_metric_values d\r\n\r\n    )\r\n    select\r\n        *,\r\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\r\n        -\r\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\r\n        as metric_test_value\r\n    from\r\n        grouped_metric_values_with_priors d\r\n\r\n    {%- else %}\r\n\r\n    select\r\n        *,\r\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\r\n    from\r\n        grouped_metric_values\r\n\r\n    {%- endif %}\r\n\r\n),\r\nmetric_moving_calcs as (\r\n\r\n    select\r\n        *,\r\n        avg(metric_test_value)\r\n            over(order by metric_period rows\r\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\r\n        stddev(metric_test_value)\r\n            over(order by metric_period rows\r\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\r\n    from\r\n        metric_values\r\n\r\n),\r\nmetric_sigma as (\r\n\r\n    select\r\n        *,\r\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\r\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\r\n    from\r\n        metric_moving_calcs\r\n\r\n)\r\nselect\r\n    *\r\nfrom\r\n    metric_sigma\r\nwhere\r\n\r\n    metric_period >= cast(\r\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\r\n            as {{ dbt_utils.type_timestamp() }})\r\n    and\r\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\r\n    and\r\n\r\n    not (\r\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\r\n        metric_test_sigma <= {{ sigma_threshold_upper }}\r\n    )\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9030557, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\r\n                                  column_name,\r\n                                  group_by=None,\r\n                                  sigma_threshold=3\r\n                                ) -%}\r\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\r\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.905363, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\r\n                                  column_name,\r\n                                  group_by,\r\n                                  sigma_threshold\r\n                                ) %}\r\nwith metric_values as (\r\n\r\n    {% if group_by -%}\r\n    select\r\n        {{ group_by }} as metric_date,\r\n        sum({{ column_name }}) as {{ column_name }}\r\n    from\r\n        {{ model }}\r\n    group by\r\n        1\r\n    {%- else -%}\r\n    select\r\n        {{ column_name }} as {{ column_name }}\r\n    from\r\n        {{ model }}\r\n    {%- endif %}\r\n\r\n),\r\nmetric_values_with_statistics as (\r\n\r\n    select\r\n        *,\r\n        avg({{ column_name }}) over() as {{ column_name }}_average,\r\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\r\n    from\r\n        metric_values\r\n\r\n),\r\nmetric_values_z_scores as (\r\n\r\n    select\r\n        *,\r\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\r\n    from\r\n        metric_values_with_statistics\r\n\r\n)\r\nselect\r\n    *\r\nfrom\r\n    metric_values_z_scores\r\nwhere\r\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.906357, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\r\n                                                                    date_col,\r\n                                                                    date_part=\"day\",\r\n                                                                    interval=None,\r\n                                                                    row_condition=None,\r\n                                                                    test_start_date=None,\r\n                                                                    test_end_date=None) -%}\r\n{% if not execute %}\r\n    {{ return('') }}\r\n{% endif %}\r\n\r\n{% if not test_start_date or not test_end_date %}\r\n    {% set sql %}\r\n\r\n        select\r\n            min({{ date_col }}) as start_{{ date_part }},\r\n            max({{ date_col }}) as end_{{ date_part }}\r\n        from {{ model }}\r\n        {% if row_condition %}\r\n        where {{ row_condition }}\r\n        {% endif %}\r\n\r\n    {% endset %}\r\n\r\n    {%- set dr = run_query(sql) -%}\r\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\r\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\r\n\r\n{% endif %}\r\n\r\n{% if not test_start_date %}\r\n{% set start_date = db_start_date %}\r\n{% else %}\r\n{% set start_date = test_start_date %}\r\n{% endif %}\r\n\r\n\r\n{% if not test_end_date %}\r\n{% set end_date = db_end_date %}\r\n{% else %}\r\n{% set end_date = test_end_date %}\r\n{% endif %}\r\nwith base_dates as (\r\n\r\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\r\n    {% if interval %}\r\n    {# \r\n        Filter the date spine created above down to the interval granularity using a modulo operation.\r\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \r\n        e.g. for 2-day interval from a starting Jan 1, 2020:\r\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\r\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\r\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\r\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\r\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\r\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\r\n    #}\r\n    where mod(\r\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\r\n            cast({{interval}} as {{ dbt_utils.type_int() }})\r\n        ) = 0\r\n    {% endif %}\r\n\r\n),\r\nmodel_data as (\r\n\r\n    select\r\n    {% if not interval %}\r\n\r\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\r\n\r\n    {% else %}\r\n        {# \r\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \r\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\r\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\r\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\r\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\r\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\r\n                all of which align with records from the interval-date spine\r\n        #}\r\n        {{dbt_utils.dateadd(\r\n            date_part, \r\n            \"mod(\r\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\r\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\r\n            ) * (-1)\", \r\n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\r\n        )}} as date_{{ date_part }},\r\n            \r\n    {% endif %}\r\n    \r\n        count(*) as row_cnt\r\n    from\r\n        {{ model }} f\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n    group by\r\n        date_{{date_part}}\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\r\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\r\n        coalesce(f.row_cnt, 0) as row_cnt\r\n    from\r\n        base_dates d\r\n        left join\r\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\r\n\r\n)\r\nselect\r\n    *\r\nfrom final\r\nwhere\r\n    row_cnt = 0\r\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.912351, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\r\n                                                                column_A,\r\n                                                                column_B,\r\n                                                                or_equal=False,\r\n                                                                row_condition=None\r\n                                                                ) %}\r\n\r\n{% set operator = \">=\" if or_equal else \">\" %}\r\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9143012, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\r\n                                                        column_A,\r\n                                                        column_B,\r\n                                                        row_condition=None\r\n                                                        ) %}\r\n\r\n{% set operator = \"=\" %}\r\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9163244, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\r\n                                                        column_A,\r\n                                                        column_B,\r\n                                                        value_pairs_set,\r\n                                                        row_condition=None\r\n                                                        ) %}\r\n\r\n{% set expression %}\r\n{% for pair in value_pairs_set %}\r\n{%- if (pair | length) == 2 %}\r\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\r\n{% else %}\r\n{{ exceptions.raise_compiler_error(\r\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\r\n        Got: '\" ~ pair ~ \"'.'\"\r\n    ) }}\r\n{% endif %}\r\n{% endfor %}\r\n{% endset %}\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.918318, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\r\n                                                    column_list,\r\n                                                    quote_columns=False,\r\n                                                    ignore_row_if=\"all_values_are_missing\",\r\n                                                    row_condition=None\r\n                                                    ) %}\r\n\r\n{% if not quote_columns %}\r\n    {%- set columns=column_list %}\r\n{% elif quote_columns %}\r\n    {%- set columns=[] %}\r\n        {% for column in column_list -%}\r\n            {% set columns = columns.append( adapter.quote(column) ) %}\r\n        {%- endfor %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n\r\n{% set row_condition_ext %}\r\n\r\n{% if row_condition  %}\r\n    {{ row_condition }} and\r\n{% endif %}\r\n\r\n{% if ignore_row_if == \"all_values_are_missing\" %}\r\n    (\r\n        {% for column in columns -%}\r\n        {{ column }} is not null{% if not loop.last %} and {% endif %}\r\n        {%- endfor %}\r\n    )\r\n{% elif ignore_row_if == \"any_value_is_missing\" %}\r\n    (\r\n        {% for column in columns -%}\r\n        {{ column }} is not null{% if not loop.last %} or {% endif %}\r\n        {%- endfor %}\r\n    )\r\n{% endif %}\r\n{% endset %}\r\n\r\nwith validation_errors as (\r\n\r\n    select\r\n        {% for column in columns -%}\r\n        {{ column }}{% if not loop.last %},{% endif %}\r\n        {%- endfor %}\r\n    from {{ model }}\r\n    where 1=1\r\n    {% if row_condition %}\r\n        and {{ row_condition }}\r\n    {% endif %}\r\n    group by\r\n        {% for column in columns -%}\r\n        {{ column }}{% if not loop.last %},{% endif %}\r\n        {%- endfor %}\r\n    having count(*) > 1\r\n\r\n)\r\nselect * from validation_errors\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9223084, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\r\n                                                column_list,\r\n                                                sum_total,\r\n                                                group_by=None,\r\n                                                row_condition=None\r\n                                                ) %}\r\n\r\n{% set operator = \"=\" %}\r\n{% set expression %}\r\n{% for column in column_list %}\r\nsum({{ column }}){% if not loop.last %} + {% endif %}\r\n{% endfor %} = {{ sum_total }}\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9248643, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\r\n                                                    column_list,\r\n                                                    quote_columns=False,\r\n                                                    ignore_row_if=\"all_values_are_missing\",\r\n                                                    row_condition=None\r\n                                                    )  -%}\r\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\r\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.926858, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\r\n                                                    column_list,\r\n                                                    quote_columns,\r\n                                                    ignore_row_if,\r\n                                                    row_condition\r\n                                                    ) %}\r\n\r\n{% if not quote_columns %}\r\n    {%- set columns=column_list %}\r\n{% elif quote_columns %}\r\n    {%- set columns=[] %}\r\n        {% for column in column_list -%}\r\n            {% set columns = columns.append( adapter.quote(column) ) %}\r\n        {%- endfor %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n\r\nwith column_values as (\r\n\r\n    select\r\n        row_number() over(order by 1) as row_index,\r\n        {% for column in columns -%}\r\n        {{ column }}{% if not loop.last %},{% endif %}\r\n        {%- endfor %}\r\n    from {{ model }}\r\n    where 1=1\r\n    {% if row_condition %}\r\n        and {{ row_condition }}\r\n    {% endif %}\r\n    {% if ignore_row_if == \"all_values_are_missing\" %}\r\n        and\r\n        (\r\n            {% for column in columns -%}\r\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\r\n            {%- endfor %}\r\n        )\r\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\r\n        and\r\n        (\r\n            {% for column in columns -%}\r\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\r\n            {%- endfor %}\r\n        )\r\n    {% endif %}\r\n\r\n),\r\nunpivot_columns as (\r\n\r\n    {% for column in columns %}\r\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\r\n    {% if not loop.last %}union all{% endif %}\r\n    {% endfor %}\r\n),\r\nvalidation_errors as (\r\n\r\n    select\r\n        row_index,\r\n        count(distinct column_value) as column_values\r\n    from unpivot_columns\r\n    group by 1\r\n    having count(distinct column_value) < {{ columns | length }}\r\n\r\n)\r\nselect * from validation_errors\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9307745, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\r\n                                                    like_pattern,\r\n                                                    row_condition=None\r\n                                                    ) %}\r\n\r\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9316084, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\r\n                                                    like_pattern_list,\r\n                                                    match_on=\"any\",\r\n                                                    row_condition=None\r\n                                                    ) %}\r\n\r\n{% set expression %}\r\n    {% for like_pattern in like_pattern_list %}\r\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\r\n    {%- if not loop.last %}\r\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\r\n    {% endif -%}\r\n    {% endfor %}\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9339397, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\r\n                                                    regex,\r\n                                                    row_condition=None\r\n                                                    ) %}\r\n\r\n{% set expression %}\r\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9354858, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\r\n                                                    regex_list,\r\n                                                    match_on=\"any\",\r\n                                                    row_condition=None\r\n                                                    ) %}\r\n\r\n{% set expression %}\r\n    {% for regex in regex_list %}\r\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\r\n    {%- if not loop.last %}\r\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\r\n    {% endif -%}\r\n    {% endfor %}\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9375846, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\r\n                                                    like_pattern,\r\n                                                    row_condition=None\r\n                                                    ) %}\r\n\r\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.938715, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\r\n                                                    like_pattern_list,\r\n                                                    match_on=\"any\",\r\n                                                    row_condition=None\r\n                                                    ) %}\r\n\r\n{% set expression %}\r\n    {% for like_pattern in like_pattern_list %}\r\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\r\n    {%- if not loop.last %}\r\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\r\n    {% endif -%}\r\n    {% endfor %}\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9408073, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\r\n                                                    regex,\r\n                                                    row_condition=None\r\n                                                    ) %}\r\n\r\n{% set expression %}\r\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.941712, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\r\n                                                    regex_list,\r\n                                                    match_on=\"any\",\r\n                                                    row_condition=None\r\n                                                    ) %}\r\n\r\n{% set expression %}\r\n{% for regex in regex_list %}\r\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\r\n{%- if not loop.last %}\r\n{{ \" and \" if match_on == \"all\" else \" or \"}}\r\n{% endif -%}\r\n{% endfor %}\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9438016, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\r\n                                                         min_value=None,\r\n                                                         max_value=None,\r\n                                                         row_condition=None,\r\n                                                         strictly=False\r\n                                                      ) %}\r\n{% set expression %}\r\n{{ dbt_utils.length(column_name) }}\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9451203, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\r\n                                                    value,\r\n                                                    row_condition=None\r\n                                                    ) %}\r\n\r\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9472044, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "original_file_path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\r\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9478712, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\r\n{%- if execute -%}\r\n\r\n    {%- set column_name = column_name | map(transform) | join -%}\r\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\r\n\r\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\r\n\r\n    {%- if column_index -%}\r\n\r\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\r\n\r\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\r\n\r\n    {%- else -%}\r\n\r\n        {%- set column_index_matches = true -%}\r\n\r\n    {%- endif %}\r\n\r\n    with test_data as (\r\n\r\n        select\r\n            cast('{{ column_name }}' as {{ dbt_utils.type_string() }}) as column_name,\r\n            {{ matching_column_index }} as matching_column_index,\r\n            {{ column_index_matches }} as column_index_matches\r\n\r\n    )\r\n    select *\r\n    from test_data\r\n    where\r\n        not(matching_column_index >= 0 and column_index_matches)\r\n\r\n{%- endif -%}\r\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9508805, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\r\n                                                        group_by,\r\n                                                        timestamp_column,\r\n                                                        datepart,\r\n                                                        interval,\r\n                                                        row_condition=None) %}\r\n\r\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\r\n                                                                                                group_by,\r\n                                                                                                timestamp_column,\r\n                                                                                                datepart,\r\n                                                                                                interval,\r\n                                                                                                row_condition) }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9556596, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\r\n                                                                        group_by,\r\n                                                                        timestamp_column,\r\n                                                                        datepart,\r\n                                                                        interval,\r\n                                                                        row_condition) %}\r\nwith latest_grouped_timestamps as (\r\n\r\n    select\r\n        {%- for g in group_by %}\r\n        {{ g }},\r\n        {%- endfor %}\r\n        max(1) as join_key,\r\n        max({{ timestamp_column }}) as latest_timestamp_column\r\n    from\r\n        {{ model }}\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n\r\n    {{ dbt_utils.group_by(group_by | length )}}\r\n\r\n),\r\ntotal_row_counts as (\r\n\r\n    select\r\n        max(1) as join_key,\r\n        count(*) as row_count\r\n    from\r\n        latest_grouped_timestamps\r\n\r\n),\r\noutdated_grouped_timestamps as (\r\n\r\n    select *\r\n    from\r\n        latest_grouped_timestamps\r\n    where\r\n        latest_timestamp_column < {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\r\n\r\n),\r\nvalidation_errors as (\r\n\r\n    select\r\n        r.row_count,\r\n        t.*\r\n    from\r\n        total_row_counts r\r\n        left join\r\n        outdated_grouped_timestamps t\r\n        on r.join_key = t.join_key\r\n    where\r\n        -- fail if either no rows were returned due to row_condition,\r\n        -- or the recency test returned failed rows\r\n        r.row_count = 0\r\n        or\r\n        t.join_key is not null\r\n\r\n)\r\nselect * from validation_errors\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.dateadd", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9586613, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\r\n                                                column_name,\r\n                                                datepart,\r\n                                                interval,\r\n                                                row_condition=None) %}\r\n\r\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\r\n                                                                                        column_name,\r\n                                                                                        datepart,\r\n                                                                                        interval,\r\n                                                                                        row_condition) }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9636316, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\r\n{%- set default_start_date = '1970-01-01' -%}\r\nwith max_recency as (\r\n\r\n    select max({{ column_name }} ) as max_date\r\n    from\r\n        {{ model }}\r\n    where\r\n        {{ column_name }} <= {{ dbt_date.today() }}\r\n        {% if row_condition %}\r\n        and {{ row_condition }}\r\n        {% endif %}\r\n)\r\nselect\r\n    *\r\nfrom\r\n    max_recency\r\nwhere\r\n    -- if the row_condition excludes all row, we need to compare against a default date\r\n    -- to avoid false negatives\r\n    coalesce(max_date, '{{ default_start_date }}')\r\n        < {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9645627, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\r\n{%- if execute -%}\r\n    {%- set column_list = column_list | map(transform) | list -%}\r\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\r\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\r\n    with relation_columns as (\r\n\r\n        {% for col_name in relation_column_names %}\r\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\r\n        {% if not loop.last %}union all{% endif %}\r\n        {% endfor %}\r\n    ),\r\n    input_columns as (\r\n\r\n        {% for col_name in column_list %}\r\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\r\n        {% if not loop.last %}union all{% endif %}\r\n        {% endfor %}\r\n    )\r\n    select *\r\n    from\r\n        input_columns i\r\n        left join\r\n        relation_columns r on r.relation_column = i.input_column\r\n    where\r\n        -- catch any column in input list that is not in the list of table columns\r\n        r.relation_column is null\r\n{%- endif -%}\r\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9686296, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\r\n{%- if execute -%}\r\n    {%- set column_list = column_list | map(transform) | list -%}\r\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\r\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\r\n    with relation_columns as (\r\n\r\n        {% for col_name in relation_column_names %}\r\n        select\r\n            {{ loop.index }} as relation_column_idx,\r\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\r\n        {% if not loop.last %}union all{% endif %}\r\n        {% endfor %}\r\n    ),\r\n    input_columns as (\r\n\r\n        {% for col_name in column_list %}\r\n        select\r\n            {{ loop.index }} as input_column_idx,\r\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\r\n        {% if not loop.last %}union all{% endif %}\r\n        {% endfor %}\r\n    )\r\n    select *\r\n    from\r\n        relation_columns r\r\n        full outer join\r\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\r\n    where\r\n        -- catch any column in input list that is not in the sequence of table columns\r\n        -- or any table column that is not in the input sequence\r\n        r.relation_column is null or\r\n        i.input_column is null\r\n\r\n{%- endif -%}\r\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.971606, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\r\n{%- if execute -%}\r\n    {%- set column_list = column_list | map(transform) | list -%}\r\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\r\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\r\n    with relation_columns as (\r\n\r\n        {% for col_name in relation_column_names %}\r\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\r\n        {% if not loop.last %}union all{% endif %}\r\n        {% endfor %}\r\n    ),\r\n    input_columns as (\r\n\r\n        {% for col_name in column_list %}\r\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\r\n        {% if not loop.last %}union all{% endif %}\r\n        {% endfor %}\r\n    )\r\n    select *\r\n    from\r\n        relation_columns r\r\n        full outer join\r\n        input_columns i on r.relation_column = i.input_column\r\n    where\r\n        -- catch any column in input list that is not in the list of table columns\r\n        -- or any table column that is not in the input list\r\n        r.relation_column is null or\r\n        i.input_column is null\r\n\r\n{%- endif -%}\r\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.974606, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\r\n                                                        min_value=None,\r\n                                                        max_value=None\r\n                                                        ) -%}\r\n{%- if min_value is none and max_value is none -%}\r\n{{ exceptions.raise_compiler_error(\r\n    \"You have to provide either a min_value, max_value or both.\"\r\n) }}\r\n{%- endif -%}\r\n{%- if execute -%}\r\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\r\n\r\n{%- set expression %}\r\n( 1=1\r\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\r\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\r\n)\r\n{% endset -%}\r\n\r\nwith test_data as (\r\n\r\n    select\r\n        {{ number_actual_columns }} as number_actual_columns,\r\n        {{ min_value if min_value else 0 }} as min_value,\r\n        {{ max_value if max_value else 0 }} as max_value\r\n\r\n)\r\nselect *\r\nfrom test_data\r\nwhere\r\n    not {{ expression }}\r\n{%- endif -%}\r\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.975594, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\r\n{%- if execute -%}\r\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\r\nwith test_data as (\r\n\r\n    select\r\n        {{ number_actual_columns }} as number_actual_columns,\r\n        {{ value }} as value\r\n\r\n)\r\nselect *\r\nfrom test_data\r\nwhere\r\n    number_actual_columns != value\r\n{%- endif -%}\r\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9775643, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\r\n{%- if execute -%}\r\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\r\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\r\nwith test_data as (\r\n\r\n    select\r\n        {{ number_columns }} as number_columns,\r\n        {{ compare_number_columns }} as compare_number_columns\r\n\r\n)\r\nselect *\r\nfrom test_data\r\nwhere\r\n    number_columns != compare_number_columns\r\n{%- endif -%}\r\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.978581, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\r\n                                                    min_value=None,\r\n                                                    max_value=None,\r\n                                                    group_by=None,\r\n                                                    row_condition=None,\r\n                                                    strictly=False\r\n                                                    ) -%}\r\n{% set expression %}\r\ncount(*)\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9795115, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\r\n                                                value,\r\n                                                group_by=None,\r\n                                                row_condition=None\r\n                                                ) -%}\r\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\r\n                        'dbt_expectations') (model,\r\n                                                                        value,\r\n                                                                        group_by,\r\n                                                                        row_condition\r\n                                                                        ) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9815016, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\r\n\r\n\r\n\r\n{%- macro default__test_expect_table_row_count_to_equal(model,\r\n                                                value,\r\n                                                group_by,\r\n                                                row_condition\r\n                                                ) -%}\r\n{% set expression %}\r\ncount(*) = {{ value }}\r\n{% endset %}\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition)\r\n                                        }}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9815016, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\r\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\r\n    compare_model=compare_model,\r\n    compare_expression=\"count(*) * \" + factor|string,\r\n    row_condition=row_condition,\r\n    compare_row_condition=compare_row_condition,\r\n    return_difference=True\r\n) }}\r\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.983545, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\r\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\r\n    factor=factor,\r\n    row_condition=row_condition,\r\n    compare_row_condition=compare_row_condition\r\n) }}\r\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.984562, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\r\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\r\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\r\n{%- do return(relation_column_names) -%}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.985491, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\r\n{%- set matching_items = [] -%}\r\n{%- for itm in list1 -%}\r\n    {%- if itm in list2 -%}\r\n        {%- do matching_items.append(itm) -%}\r\n    {%- endif -%}\r\n{%- endfor -%}\r\n{%- do return(matching_items) -%}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9865544, "supported_languages": null}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\r\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9935417, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "name": "default__get_select", "macro_sql": "\r\n\r\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\r\n    select\r\n        {% if group_by %}\r\n        {% for g in group_by -%}\r\n            {{ g }} as col_{{ loop.index }},\r\n        {% endfor -%}\r\n        {% endif %}\r\n        {{ expression }} as expression\r\n    from\r\n        {{ model }}\r\n    {%- if row_condition %}\r\n    where\r\n        {{ row_condition }}\r\n    {% endif %}\r\n    {% if group_by %}\r\n    group by\r\n        {% for g in group_by -%}\r\n            {{ loop.index }}{% if not loop.last %},{% endif %}\r\n        {% endfor %}\r\n    {% endif %}\r\n{% endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9945414, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\r\n                                compare_model=None,\r\n                                compare_expression=None,\r\n                                group_by=None,\r\n                                compare_group_by=None,\r\n                                row_condition=None,\r\n                                compare_row_condition=None,\r\n                                tolerance=0.0,\r\n                                tolerance_percent=None,\r\n                                return_difference=False\r\n                                ) -%}\r\n\r\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\r\n                                model, expression,\r\n                                compare_model,\r\n                                compare_expression,\r\n                                group_by,\r\n                                compare_group_by,\r\n                                row_condition,\r\n                                compare_row_condition,\r\n                                tolerance,\r\n                                tolerance_percent,\r\n                                return_difference) }}\r\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.9955254, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\r\n\r\n{%- macro default__test_equal_expression(\r\n                                model, expression,\r\n                                compare_model,\r\n                                compare_expression,\r\n                                group_by,\r\n                                compare_group_by,\r\n                                row_condition,\r\n                                compare_row_condition,\r\n                                tolerance,\r\n                                tolerance_percent,\r\n                                return_difference) -%}\r\n\r\n    {%- set compare_model = model if not compare_model else compare_model -%}\r\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\r\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\r\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\r\n\r\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\r\n    with a as (\r\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\r\n    ),\r\n    b as (\r\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\r\n    ),\r\n    final as (\r\n\r\n        select\r\n            {% for i in range(1, n_cols + 1) -%}\r\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\r\n            {% endfor %}\r\n            a.expression,\r\n            b.expression as compare_expression,\r\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\r\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\r\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\r\n        from\r\n        {% if n_cols > 0 %}\r\n            a\r\n            full outer join\r\n            b on\r\n            {% for i in range(1, n_cols + 1) -%}\r\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\r\n            {% endfor -%}\r\n        {% else %}\r\n            a cross join b\r\n        {% endif %}\r\n    )\r\n    -- DEBUG:\r\n    -- select * from final\r\n    select\r\n        *\r\n    from final\r\n    where\r\n        {% if tolerance_percent %}\r\n        expression_difference_percent > {{ tolerance_percent }}\r\n        {% else %}\r\n        expression_difference > {{ tolerance }}\r\n        {% endif %}\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.997451, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\r\n                                 expression,\r\n                                 min_value=None,\r\n                                 max_value=None,\r\n                                 group_by_columns=None,\r\n                                 row_condition=None,\r\n                                 strictly=False\r\n                                 ) %}\r\n\r\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546307.999521, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\r\n                            expression,\r\n                            min_value,\r\n                            max_value,\r\n                            group_by_columns,\r\n                            row_condition,\r\n                            strictly\r\n                            ) %}\r\n\r\n{%- if min_value is none and max_value is none -%}\r\n{{ exceptions.raise_compiler_error(\r\n    \"You have to provide either a min_value, max_value or both.\"\r\n) }}\r\n{%- endif -%}\r\n\r\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\r\n\r\n{% set expression_min_max %}\r\n( 1=1\r\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\r\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\r\n)\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression_min_max,\r\n                                        group_by_columns=group_by_columns,\r\n                                        row_condition=row_condition)\r\n                                        }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0015073, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\r\n                                 expression,\r\n                                 test_condition=\"= true\",\r\n                                 group_by_columns=None,\r\n                                 row_condition=None\r\n                                 ) %}\r\n\r\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0035005, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\r\n                                 expression,\r\n                                 test_condition=\"= true\",\r\n                                 group_by_columns=None,\r\n                                 row_condition=None\r\n                                 ) %}\r\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0035005, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\r\nwith grouped_expression as (\r\n    select\r\n        {% if group_by_columns %}\r\n        {% for group_by_column in group_by_columns -%}\r\n        {{ group_by_column }} as col_{{ loop.index }},\r\n        {% endfor -%}\r\n        {% endif %}\r\n        {{ dbt_expectations.truth_expression(expression) }}\r\n    from {{ model }}\r\n     {%- if row_condition %}\r\n    where\r\n        {{ row_condition }}\r\n    {% endif %}\r\n    {% if group_by_columns %}\r\n    group by\r\n    {% for group_by_column in group_by_columns -%}\r\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\r\n    {% endfor %}\r\n    {% endif %}\r\n\r\n),\r\nvalidation_errors as (\r\n\r\n    select\r\n        *\r\n    from\r\n        grouped_expression\r\n    where\r\n        not(expression {{ test_condition }})\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n\r\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.004495, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\r\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.005493, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\r\n  {{ expression }} as expression\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.005493, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\r\n    timestamp without time zone\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0064638, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "type_datetime", "macro_sql": "\r\n\r\n\r\n\r\n{%- macro type_datetime() -%}\r\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0064638, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\r\n    datetime\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0064638, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\r\n    timestamp_ntz\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0064638, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\r\n    timestamp without time zone\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.007499, "supported_languages": null}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\r\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.007499, "supported_languages": null}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\r\n    cast({{ field }} as {{ dbt_utils.type_string() }})\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.008484, "supported_languages": null}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\r\n    case\r\n        when {{ field }} is true then 'true'\r\n        when {{ field }} is false then 'false'\r\n    end::text\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.008484, "supported_languages": null}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\concat.sql", "original_file_path": "macros\\cross_db_utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\r\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0094786, "supported_languages": null}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\concat.sql", "original_file_path": "macros\\cross_db_utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\r\n    {{ fields|join(' || ') }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0094786, "supported_languages": null}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\r\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0104766, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\r\n    current_timestamp::{{dbt_utils.type_timestamp()}}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0114715, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\r\n    getdate()\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0114715, "supported_languages": null}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\r\n    current_timestamp\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0114715, "supported_languages": null}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\r\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0114715, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\r\n    {{dbt_utils.current_timestamp()}}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0114715, "supported_languages": null}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\r\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0124683, "supported_languages": null}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\r\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0124683, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\r\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0124683, "supported_languages": null}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_string", "macro_sql": "\r\n\r\n{%- macro type_string() -%}\r\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0144763, "supported_languages": null}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\r\n    string\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0144763, "supported_languages": null}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "redshift__type_string", "macro_sql": "\r\n\r\n{%- macro redshift__type_string() -%}\r\n    varchar\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0144763, "supported_languages": null}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\r\n    varchar\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0144763, "supported_languages": null}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\r\n    varchar\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0144763, "supported_languages": null}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_timestamp", "macro_sql": "\r\n\r\n{%- macro type_timestamp() -%}\r\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0153904, "supported_languages": null}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\r\n    timestamp\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0153904, "supported_languages": null}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\r\n    timestamp_ntz\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0153904, "supported_languages": null}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_float", "macro_sql": "\r\n\r\n{%- macro type_float() -%}\r\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0153904, "supported_languages": null}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\r\n    float\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.016468, "supported_languages": null}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\r\n    float64\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.016468, "supported_languages": null}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_numeric", "macro_sql": "\r\n\r\n{%- macro type_numeric() -%}\r\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.016468, "supported_languages": null}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\r\n    numeric(28, 6)\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.016468, "supported_languages": null}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\r\n    numeric\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.016468, "supported_languages": null}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_bigint", "macro_sql": "\r\n\r\n{%- macro type_bigint() -%}\r\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.017454, "supported_languages": null}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\r\n    bigint\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.017454, "supported_languages": null}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\r\n    int64\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.017454, "supported_languages": null}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_int", "macro_sql": "\r\n\r\n{%- macro type_int() -%}\r\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.017454, "supported_languages": null}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\r\n    int\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.017454, "supported_languages": null}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\r\n    int64\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.017454, "supported_languages": null}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\r\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0194595, "supported_languages": null}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\r\n\r\n    dateadd(\r\n        {{ datepart }},\r\n        {{ interval }},\r\n        {{ from_date_or_timestamp }}\r\n        )\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0194595, "supported_languages": null}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\r\n\r\n        datetime_add(\r\n            cast( {{ from_date_or_timestamp }} as datetime),\r\n        interval {{ interval }} {{ datepart }}\r\n        )\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0194595, "supported_languages": null}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\r\n\r\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0204434, "supported_languages": null}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\r\n\r\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0204434, "supported_languages": null}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\r\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0244296, "supported_languages": null}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\r\n\r\n    datediff(\r\n        {{ datepart }},\r\n        {{ first_date }},\r\n        {{ second_date }}\r\n        )\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0244296, "supported_languages": null}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\r\n\r\n    datetime_diff(\r\n        cast({{second_date}} as datetime),\r\n        cast({{first_date}} as datetime),\r\n        {{datepart}}\r\n    )\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0244296, "supported_languages": null}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\r\n\r\n    {% if datepart == 'year' %}\r\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\r\n    {% elif datepart == 'quarter' %}\r\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\r\n    {% elif datepart == 'month' %}\r\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\r\n    {% elif datepart == 'day' %}\r\n        (({{second_date}})::date - ({{first_date}})::date)\r\n    {% elif datepart == 'week' %}\r\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\r\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\r\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\r\n            else\r\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\r\n        end)\r\n    {% elif datepart == 'hour' %}\r\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\r\n    {% elif datepart == 'minute' %}\r\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\r\n    {% elif datepart == 'second' %}\r\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\r\n    {% elif datepart == 'millisecond' %}\r\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\r\n    {% elif datepart == 'microsecond' %}\r\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\r\n    {% else %}\r\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\r\n    {% endif %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0284214, "supported_languages": null}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\r\n\r\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0284214, "supported_languages": null}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\r\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0294108, "supported_languages": null}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\r\n    date_trunc('{{datepart}}', {{date}})\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0303404, "supported_languages": null}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\r\n    timestamp_trunc(\r\n        cast({{date}} as timestamp),\r\n        {{datepart}}\r\n    )\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0303404, "supported_languages": null}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\r\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.031233, "supported_languages": null}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\r\n\r\n    except\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.031233, "supported_languages": null}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\r\n\r\n    except distinct\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.031233, "supported_languages": null}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\r\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0323286, "supported_languages": null}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\r\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0323286, "supported_languages": null}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\r\n    to_hex({{dbt_utils.default__hash(field)}})\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0323286, "supported_languages": null}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\r\n  {%- set error_message = '\r\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\r\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\r\n    '.format(model.package_name, model.name) -%}\r\n  {%- do exceptions.warn(error_message) -%}\r\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0342417, "supported_languages": null}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\r\n    \"{{ value }}\"\t\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0342417, "supported_languages": null}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\r\n    `{{ value }}`\t\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0342417, "supported_languages": null}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\r\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0353196, "supported_languages": null}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\r\n\r\n    intersect\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0353196, "supported_languages": null}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\r\n\r\n    intersect distinct\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0353196, "supported_languages": null}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\r\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0366151, "supported_languages": null}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\r\n\r\n\r\n{%- macro default_last_day(date, datepart) -%}\r\n    cast(\r\n        {{dbt_utils.dateadd('day', '-1',\r\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\r\n        )}}\r\n        as date)\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0366151, "supported_languages": null}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\r\n    {{dbt_utils.default_last_day(date, datepart)}}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0366151, "supported_languages": null}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\r\n\r\n    {%- if datepart == 'quarter' -%}\r\n    -- postgres dateadd does not support quarter interval.\r\n    cast(\r\n        {{dbt_utils.dateadd('day', '-1',\r\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\r\n        )}}\r\n        as date)\r\n    {%- else -%}\r\n    {{dbt_utils.default_last_day(date, datepart)}}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0377104, "supported_languages": null}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\r\n\r\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.038707, "supported_languages": null}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\r\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.038707, "supported_languages": null}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\r\n    \r\n    length(\r\n        {{ expression }}\r\n    )\r\n    \r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0397034, "supported_languages": null}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\r\n\r\n    len(\r\n        {{ expression }}\r\n    )\r\n    \r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0397034, "supported_languages": null}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\literal.sql", "original_file_path": "macros\\cross_db_utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\r\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0406237, "supported_languages": null}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\literal.sql", "original_file_path": "macros\\cross_db_utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\r\n    '{{ value }}'\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0406237, "supported_languages": null}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\r\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0417075, "supported_languages": null}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\r\n\r\n    position(\r\n        {{ substring_text }} in {{ string_text }}\r\n    )\r\n    \r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0417075, "supported_languages": null}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\r\n\r\n    strpos(\r\n        {{ string_text }},\r\n        {{ substring_text }}\r\n        \r\n    )\r\n    \r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0417075, "supported_languages": null}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\replace.sql", "original_file_path": "macros\\cross_db_utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\r\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0426507, "supported_languages": null}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\replace.sql", "original_file_path": "macros\\cross_db_utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\r\n\r\n    replace(\r\n        {{ field }},\r\n        {{ old_chars }},\r\n        {{ new_chars }}\r\n    )\r\n    \r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0436828, "supported_languages": null}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\r\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0446868, "supported_languages": null}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\r\n\r\n    right(\r\n        {{ string_text }},\r\n        {{ length_expression }}\r\n    )\r\n    \r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0446868, "supported_languages": null}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\r\n\r\n    case when {{ length_expression }} = 0 \r\n        then ''\r\n    else \r\n        substr(\r\n            {{ string_text }},\r\n            -1 * ({{ length_expression }})\r\n        )\r\n    end\r\n\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0446868, "supported_languages": null}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\r\n\r\n    case when {{ length_expression }} = 0 \r\n        then ''\r\n    else \r\n        right(\r\n            {{ string_text }},\r\n            {{ length_expression }}\r\n        )\r\n    end\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0446868, "supported_languages": null}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\r\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0466483, "supported_languages": null}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\r\n    {# most databases don't support this function yet\r\n    so we just need to use cast #}\r\n    cast({{field}} as {{type}})\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0466483, "supported_languages": null}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\r\n    try_cast({{field}} as {{type}})\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0466483, "supported_languages": null}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\r\n    safe_cast({{field}} as {{type}})\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0466483, "supported_languages": null}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\r\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0486665, "supported_languages": null}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\r\n\r\n    split_part(\r\n        {{ string_text }},\r\n        {{ delimiter_text }},\r\n        {{ part_number }}\r\n        )\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0486665, "supported_languages": null}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\r\n\r\n    split(\r\n        {{ string_text }},\r\n        {{ delimiter_text }}\r\n        )[safe_offset({{ part_number - 1 }})]\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0486665, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\r\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0516543, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\r\n\r\n    {% set bin_size -%}\r\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\r\n    {%- endset %}\r\n    (\r\n        -- to break ties when the amount is eaxtly at the bucket egde\r\n        case\r\n            when\r\n                mod(\r\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\r\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\r\n                ) = 0\r\n            then 1\r\n            else 0\r\n        end\r\n    ) +\r\n      -- Anything over max_value goes the N+1 bucket\r\n    least(\r\n        ceil(\r\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\r\n        ),\r\n        {{ num_buckets }} + 1\r\n    )\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0526497, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\r\n\r\n    {% set bin_size -%}\r\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\r\n    {%- endset %}\r\n    (\r\n        -- to break ties when the amount is exactly at the bucket edge\r\n        case\r\n            when\r\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\r\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\r\n                 = 0\r\n            then 1\r\n            else 0\r\n        end\r\n    ) +\r\n      -- Anything over max_value goes the N+1 bucket\r\n    least(\r\n        ceil(\r\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\r\n        ),\r\n        {{ num_buckets }} + 1\r\n    )\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0526497, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\r\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0536458, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\_is_ephemeral.sql", "original_file_path": "macros\\cross_db_utils\\_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\r\n    {%- if obj.is_cte -%}\r\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\r\n        {% if obj.name.startswith(ephemeral_prefix) %}\r\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\r\n        {% else %}\r\n            {% set model_name = obj.name %}\r\n        {%- endif -%}\r\n        {% set error_message %}\r\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\r\n\r\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\r\n        {% endset %}\r\n        {%- do exceptions.raise_compiler_error(error_message) -%}\r\n    {%- endif -%}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0546436, "supported_languages": null}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\_is_relation.sql", "original_file_path": "macros\\cross_db_utils\\_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\r\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\r\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\r\n    {%- endif -%}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.056598, "supported_languages": null}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\r\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.056598, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\r\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0576434, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\r\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0585897, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\r\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0585897, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\r\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0595593, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\r\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0595593, "supported_languages": null}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\r\n\r\n{#- Lower case the string -#}\r\n{% set string = string | lower %}\r\n{#- Replace spaces and dashes with underscores -#}\r\n{% set string = modules.re.sub('[ -]+', '_', string) %}\r\n{#- Only take letters, numbers, and underscores -#}\r\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\r\n\r\n{{ return(string) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0605643, "supported_languages": null}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\r\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0696027, "supported_languages": null}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n  {% call statement('period_boundaries', fetch_result=True) -%}\r\n    with data as (\r\n      select\r\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\r\n          coalesce(\r\n            {{dbt_utils.dateadd('millisecond',\r\n                                -1,\r\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\r\n            {{dbt_utils.current_timestamp()}}\r\n          ) as stop_timestamp\r\n      from \"{{target_schema}}\".\"{{target_table}}\"\r\n    )\r\n\r\n    select\r\n      start_timestamp,\r\n      stop_timestamp,\r\n      {{dbt_utils.datediff('start_timestamp',\r\n                           'stop_timestamp',\r\n                           period)}}  + 1 as num_periods\r\n    from data\r\n  {%- endcall %}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.070589, "supported_languages": null}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0715692, "supported_languages": null}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n\r\n  {%- set period_filter -%}\r\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\r\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\r\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\r\n  {%- endset -%}\r\n\r\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\r\n\r\n  select\r\n    {{target_cols_csv}}\r\n  from (\r\n    {{filtered_sql}}\r\n  )\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0715692, "supported_languages": null}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\r\n  {%- set timestamp_field = config.require('timestamp_field') -%}\r\n  {%- set start_date = config.require('start_date') -%}\r\n  {%- set stop_date = config.get('stop_date') or '' -%}}\r\n  {%- set period = config.get('period') or 'week' -%}\r\n\r\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\r\n    {%- set error_message -%}\r\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\r\n    {%- endset -%}\r\n    {{ exceptions.raise_compiler_error(error_message) }}\r\n  {%- endif -%}\r\n\r\n  {%- set identifier = model['name'] -%}\r\n\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\r\n\r\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\r\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\r\n\r\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\r\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\r\n\r\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\r\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\r\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\r\n\r\n  -- setup\r\n  {% if old_relation is none -%}\r\n    -- noop\r\n  {%- elif should_truncate -%}\r\n    {{adapter.truncate_relation(old_relation)}}\r\n  {%- elif should_drop -%}\r\n    {{adapter.drop_relation(old_relation)}}\r\n    {%- set old_relation = none -%}\r\n  {%- endif %}\r\n\r\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\r\n\r\n  -- `begin` happens here, so `commit` after it to finish the transaction\r\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\r\n  {% call statement() -%}\r\n    begin; -- make extra sure we've closed out the transaction\r\n    commit;\r\n  {%- endcall %}\r\n\r\n  -- build model\r\n  {% if force_create or old_relation is none -%}\r\n    {# Create an empty target table -#}\r\n    {% call statement('main') -%}\r\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\r\n      {{create_table_as(False, target_relation, empty_sql)}}\r\n    {%- endcall %}\r\n  {%- endif %}\r\n\r\n  {% set _ = dbt_utils.get_period_boundaries(schema,\r\n                                              identifier,\r\n                                              timestamp_field,\r\n                                              start_date,\r\n                                              stop_date,\r\n                                              period) %}\r\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\r\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\r\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\r\n\r\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\r\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\r\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\r\n\r\n  -- commit each period as a separate transaction\r\n  {% for i in range(num_periods) -%}\r\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\r\n    {{ dbt_utils.log_info(msg) }}\r\n\r\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\r\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\r\n                                               schema=schema, type='table') -%}\r\n    {% call statement() -%}\r\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\r\n                                                       sql,\r\n                                                       timestamp_field,\r\n                                                       period,\r\n                                                       start_timestamp,\r\n                                                       stop_timestamp,\r\n                                                       i) %}\r\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\r\n    {%- endcall %}\r\n\r\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\r\n                                         to_relation=target_relation)}}\r\n    {%- set name = 'main-' ~ i -%}\r\n    {% call statement(name, fetch_result=True) -%}\r\n      insert into {{target_relation}} ({{target_cols_csv}})\r\n      (\r\n          select\r\n              {{target_cols_csv}}\r\n          from {{tmp_relation.include(schema=False)}}\r\n      );\r\n    {%- endcall %}\r\n    {% set result = load_result('main-' ~ i) %}\r\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\r\n        {% set rows_inserted = result['response']['rows_affected'] %}\r\n    {% else %} {# older versions #}\r\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\r\n    {% endif %}\r\n    \r\n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\r\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\r\n\r\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\r\n    {{ dbt_utils.log_info(msg) }}\r\n\r\n  {%- endfor %}\r\n\r\n  {% call statement() -%}\r\n    begin;\r\n  {%- endcall %}\r\n\r\n  {{run_hooks(post_hooks, inside_transaction=True)}}\r\n\r\n  {% call statement() -%}\r\n    commit;\r\n  {%- endcall %}\r\n\r\n  {{run_hooks(post_hooks, inside_transaction=False)}}\r\n\r\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\r\n\r\n  {% call noop_statement('main', status_string) -%}\r\n    -- no-op\r\n  {%- endcall %}\r\n\r\n  -- Return the relations created in this materialization\r\n  {{ return({'relations': [target_relation]}) }}  \r\n\r\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0815518, "supported_languages": ["sql"]}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\accepted_range.sql", "original_file_path": "macros\\schema_tests\\accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\r\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0834763, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\accepted_range.sql", "original_file_path": "macros\\schema_tests\\accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\r\n\r\nwith meet_condition as(\r\n  select *\r\n  from {{ model }}\r\n),\r\n\r\nvalidation_errors as (\r\n  select *\r\n  from meet_condition\r\n  where\r\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\r\n    1 = 2\r\n\r\n  {%- if min_value is not none %}\r\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\r\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\r\n  {%- endif %}\r\n\r\n  {%- if max_value is not none %}\r\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\r\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\r\n  {%- endif %}\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0845423, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\at_least_one.sql", "original_file_path": "macros\\schema_tests\\at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\r\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0855393, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\at_least_one.sql", "original_file_path": "macros\\schema_tests\\at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\r\n\r\nselect *\r\nfrom (\r\n    select\r\n        {# In TSQL, subquery aggregate columns need aliases #}\r\n        {# thus: a filler col name, 'filler_column' #}\r\n      count({{ column_name }}) as filler_column\r\n\r\n    from {{ model }}\r\n\r\n    having count({{ column_name }}) = 0\r\n\r\n) validation_errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0855393, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\cardinality_equality.sql", "original_file_path": "macros\\schema_tests\\cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\r\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0874684, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\cardinality_equality.sql", "original_file_path": "macros\\schema_tests\\cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\r\n\r\n{# T-SQL does not let you use numbers as aliases for columns #}\r\n{# Thus, no \"GROUP BY 1\" #}\r\n\r\nwith table_a as (\r\nselect\r\n  {{ column_name }},\r\n  count(*) as num_rows\r\nfrom {{ model }}\r\ngroup by {{ column_name }}\r\n),\r\n\r\ntable_b as (\r\nselect\r\n  {{ field }},\r\n  count(*) as num_rows\r\nfrom {{ to }}\r\ngroup by {{ field }}\r\n),\r\n\r\nexcept_a as (\r\n  select *\r\n  from table_a\r\n  {{ dbt_utils.except() }}\r\n  select *\r\n  from table_b\r\n),\r\n\r\nexcept_b as (\r\n  select *\r\n  from table_b\r\n  {{ dbt_utils.except() }}\r\n  select *\r\n  from table_a\r\n),\r\n\r\nunioned as (\r\n  select *\r\n  from except_a\r\n  union all\r\n  select *\r\n  from except_b\r\n)\r\n\r\nselect *\r\nfrom unioned\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0874684, "supported_languages": null}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\equality.sql", "original_file_path": "macros\\schema_tests\\equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\r\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0895383, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\equality.sql", "original_file_path": "macros\\schema_tests\\equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\r\n\r\n{% set set_diff %}\r\n    count(*) + coalesce(abs(\r\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\r\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\r\n    ), 0)\r\n{% endset %}\r\n\r\n{#-- Needs to be set at parse time, before we return '' below --#}\r\n{{ config(fail_calc = set_diff) }}\r\n\r\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n{%- if not execute -%}\r\n    {{ return('') }}\r\n{% endif %}\r\n\r\n-- setup\r\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\r\n\r\n{#-\r\nIf the compare_cols arg is provided, we can run this test without querying the\r\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\r\n-#}\r\n\r\n{%- if not compare_columns -%}\r\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\r\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\r\n{%- endif -%}\r\n\r\n{% set compare_cols_csv = compare_columns | join(', ') %}\r\n\r\nwith a as (\r\n\r\n    select * from {{ model }}\r\n\r\n),\r\n\r\nb as (\r\n\r\n    select * from {{ compare_model }}\r\n\r\n),\r\n\r\na_minus_b as (\r\n\r\n    select {{compare_cols_csv}} from a\r\n    {{ dbt_utils.except() }}\r\n    select {{compare_cols_csv}} from b\r\n\r\n),\r\n\r\nb_minus_a as (\r\n\r\n    select {{compare_cols_csv}} from b\r\n    {{ dbt_utils.except() }}\r\n    select {{compare_cols_csv}} from a\r\n\r\n),\r\n\r\nunioned as (\r\n\r\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\r\n    union all\r\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\r\n\r\n)\r\n\r\nselect * from unioned\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0905225, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\equal_rowcount.sql", "original_file_path": "macros\\schema_tests\\equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\r\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0924492, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\equal_rowcount.sql", "original_file_path": "macros\\schema_tests\\equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\r\n\r\n{#-- Needs to be set at parse time, before we return '' below --#}\r\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\r\n\r\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n{%- if not execute -%}\r\n    {{ return('') }}\r\n{% endif %}\r\n\r\nwith a as (\r\n\r\n    select count(*) as count_a from {{ model }}\r\n\r\n),\r\nb as (\r\n\r\n    select count(*) as count_b from {{ compare_model }}\r\n\r\n),\r\nfinal as (\r\n\r\n    select\r\n        count_a,\r\n        count_b,\r\n        abs(count_a - count_b) as diff_count\r\n    from a\r\n    cross join b\r\n\r\n)\r\n\r\nselect * from final\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0924492, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\r\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\r\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\r\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0935142, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\r\n\r\nwith meet_condition as (\r\n    select * from {{ model }} where {{ condition }}\r\n)\r\n\r\nselect\r\n    *\r\nfrom meet_condition\r\n{% if column_name is none %}\r\nwhere not({{ expression }})\r\n{%- else %}\r\nwhere not({{ column_name }} {{ expression }})\r\n{%- endif %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0945086, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\fewer_rows_than.sql", "original_file_path": "macros\\schema_tests\\fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\r\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0954359, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\fewer_rows_than.sql", "original_file_path": "macros\\schema_tests\\fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\r\n\r\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\r\n\r\nwith a as (\r\n\r\n    select count(*) as count_our_model from {{ model }}\r\n\r\n),\r\nb as (\r\n\r\n    select count(*) as count_comparison_model from {{ compare_model }}\r\n\r\n),\r\ncounts as (\r\n\r\n    select\r\n        count_our_model,\r\n        count_comparison_model\r\n    from a\r\n    cross join b\r\n\r\n),\r\nfinal as (\r\n\r\n    select *,\r\n        case\r\n            -- fail the test if we have more rows than the reference model and return the row count delta\r\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\r\n            -- fail the test if they are the same number\r\n            when count_our_model = count_comparison_model then 1\r\n            -- pass the test if the delta is positive (i.e. return the number 0)\r\n            else 0\r\n    end as row_count_delta\r\n    from counts\r\n\r\n)\r\n\r\nselect * from final\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.0954359, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\schema_tests\\mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\r\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.100505, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\schema_tests\\mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\r\n{% if gaps == 'not_allowed' %}\r\n    {% set allow_gaps_operator='=' %}\r\n    {% set allow_gaps_operator_in_words='equal_to' %}\r\n{% elif gaps == 'allowed' %}\r\n    {% set allow_gaps_operator='<=' %}\r\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\r\n{% elif gaps == 'required' %}\r\n    {% set allow_gaps_operator='<' %}\r\n    {% set allow_gaps_operator_in_words='less_than' %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n{% if not zero_length_range_allowed %}\r\n    {% set allow_zero_length_operator='<' %}\r\n    {% set allow_zero_length_operator_in_words='less_than' %}\r\n{% elif zero_length_range_allowed %}\r\n    {% set allow_zero_length_operator='<=' %}\r\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n\r\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\r\n\r\nwith window_functions as (\r\n\r\n    select\r\n        {% if partition_by %}\r\n        {{ partition_by }} as partition_by_col,\r\n        {% endif %}\r\n        {{ lower_bound_column }} as lower_bound,\r\n        {{ upper_bound_column }} as upper_bound,\r\n\r\n        lead({{ lower_bound_column }}) over (\r\n            {{ partition_clause }}\r\n            order by {{ lower_bound_column }}\r\n        ) as next_lower_bound,\r\n\r\n        row_number() over (\r\n            {{ partition_clause }}\r\n            order by {{ lower_bound_column }} desc\r\n        ) = 1 as is_last_record\r\n\r\n    from {{ model }}\r\n\r\n),\r\n\r\ncalc as (\r\n    -- We want to return records where one of our assumptions fails, so we'll use\r\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\r\n    select\r\n        *,\r\n\r\n        -- For each record: lower_bound should be < upper_bound.\r\n        -- Coalesce it to return an error on the null case (implicit assumption\r\n        -- these columns are not_null)\r\n        coalesce(\r\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\r\n            false\r\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\r\n\r\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\r\n        -- Coalesce it to handle null cases for the last record.\r\n        coalesce(\r\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\r\n            is_last_record,\r\n            false\r\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\r\n\r\n    from window_functions\r\n\r\n),\r\n\r\nvalidation_errors as (\r\n\r\n    select\r\n        *\r\n    from calc\r\n\r\n    where not(\r\n        -- THE FOLLOWING SHOULD BE TRUE --\r\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\r\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\r\n    )\r\n)\r\n\r\nselect * from validation_errors\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1034787, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\not_accepted_values.sql", "original_file_path": "macros\\schema_tests\\not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\r\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1044395, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\not_accepted_values.sql", "original_file_path": "macros\\schema_tests\\not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\r\nwith all_values as (\r\n\r\n    select distinct\r\n        {{ column_name }} as value_field\r\n\r\n    from {{ model }}\r\n\r\n),\r\n\r\nvalidation_errors as (\r\n\r\n    select\r\n        value_field\r\n\r\n    from all_values\r\n    where value_field in (\r\n        {% for value in values -%}\r\n            {% if quote -%}\r\n            '{{ value }}'\r\n            {%- else -%}\r\n            {{ value }}\r\n            {%- endif -%}\r\n            {%- if not loop.last -%},{%- endif %}\r\n        {%- endfor %}\r\n        )\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1054723, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\not_constant.sql", "original_file_path": "macros\\schema_tests\\not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\r\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.10647, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\not_constant.sql", "original_file_path": "macros\\schema_tests\\not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\r\n\r\n\r\nselect\r\n    {# In TSQL, subquery aggregate columns need aliases #}\r\n    {# thus: a filler col name, 'filler_column' #}\r\n    count(distinct {{ column_name }}) as filler_column\r\n\r\nfrom {{ model }}\r\n\r\nhaving count(distinct {{ column_name }}) = 1\r\n\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.10647, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\not_null_proportion.sql", "original_file_path": "macros\\schema_tests\\not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\r\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1084282, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\not_null_proportion.sql", "original_file_path": "macros\\schema_tests\\not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\r\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\r\n\r\nwith validation as (\r\n  select\r\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\r\n  from {{ model }}\r\n),\r\nvalidation_errors as (\r\n  select\r\n    not_null_proportion\r\n  from validation\r\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\r\n)\r\nselect\r\n  *\r\nfrom validation_errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1084282, "supported_languages": null}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\recency.sql", "original_file_path": "macros\\schema_tests\\recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\r\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1094677, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\recency.sql", "original_file_path": "macros\\schema_tests\\recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\r\n\r\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\r\n\r\nwith recency as (\r\n\r\n    select max({{field}}) as most_recent\r\n    from {{ model }}\r\n\r\n)\r\n\r\nselect\r\n\r\n    most_recent,\r\n    {{ threshold }} as threshold\r\n\r\nfrom recency\r\nwhere most_recent < {{ threshold }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.11046, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\relationships_where.sql", "original_file_path": "macros\\schema_tests\\relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\r\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.111386, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\relationships_where.sql", "original_file_path": "macros\\schema_tests\\relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\r\n\r\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\r\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\r\n\r\nwith left_table as (\r\n\r\n  select\r\n    {{column_name}} as id\r\n\r\n  from {{model}}\r\n\r\n  where {{column_name}} is not null\r\n    and {{from_condition}}\r\n\r\n),\r\n\r\nright_table as (\r\n\r\n  select\r\n    {{field}} as id\r\n\r\n  from {{to}}\r\n\r\n  where {{field}} is not null\r\n    and {{to_condition}}\r\n\r\n),\r\n\r\nexceptions as (\r\n\r\n  select\r\n    left_table.id,\r\n    right_table.id as right_id\r\n\r\n  from left_table\r\n\r\n  left join right_table\r\n         on left_table.id = right_table.id\r\n\r\n  where right_table.id is null\r\n\r\n)\r\n\r\nselect * from exceptions\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1124496, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\sequential_values.sql", "original_file_path": "macros\\schema_tests\\sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\r\n\r\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1134489, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\sequential_values.sql", "original_file_path": "macros\\schema_tests\\sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\r\n\r\nwith windowed as (\r\n\r\n    select\r\n        {{ column_name }},\r\n        lag({{ column_name }}) over (\r\n            order by {{ column_name }}\r\n        ) as previous_{{ column_name }}\r\n    from {{ model }}\r\n),\r\n\r\nvalidation_errors as (\r\n    select\r\n        *\r\n    from windowed\r\n    {% if datepart %}\r\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\r\n    {% else %}\r\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\r\n    {% endif %}\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1153712, "supported_languages": null}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\test_not_null_where.sql", "original_file_path": "macros\\schema_tests\\test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1164205, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\test_not_null_where.sql", "original_file_path": "macros\\schema_tests\\test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1164205, "supported_languages": null}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\test_unique_where.sql", "original_file_path": "macros\\schema_tests\\test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1174319, "supported_languages": null}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\test_unique_where.sql", "original_file_path": "macros\\schema_tests\\test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1184385, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\schema_tests\\unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\r\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1193557, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\schema_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\schema_tests\\unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\r\n\r\n{% if not quote_columns %}\r\n    {%- set column_list=combination_of_columns %}\r\n{% elif quote_columns %}\r\n    {%- set column_list=[] %}\r\n        {% for column in combination_of_columns -%}\r\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\r\n        {%- endfor %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n\r\n{%- set columns_csv=column_list | join(', ') %}\r\n\r\n\r\nwith validation_errors as (\r\n\r\n    select\r\n        {{ columns_csv }}\r\n    from {{ model }}\r\n    group by {{ columns_csv }}\r\n    having count(*) > 1\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.121436, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\r\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1234236, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\r\n    {%- call statement('get_intervals_between', fetch_result=True) %}\r\n\r\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set value_list = load_result('get_intervals_between') -%}\r\n\r\n    {%- if value_list and value_list['data'] -%}\r\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\r\n        {{ return(values[0]) }}\r\n    {%- else -%}\r\n        {{ return(1) }}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.124429, "supported_languages": null}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\r\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.124429, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    {{dbt_utils.generate_series(\r\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\r\n    )}}\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        {{\r\n            dbt_utils.dateadd(\r\n                datepart,\r\n                \"row_number() over (order by 1) - 1\",\r\n                start_date\r\n            )\r\n        }}\r\n    ) as date_{{datepart}}\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_{{datepart}} <= {{ end_date }}\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1254156, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\r\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.126753, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\r\n\r\n    {% if upper_bound <= 0 %}\r\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\r\n    {% endif %}\r\n\r\n    {% for _ in range(1, 100) %}\r\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\r\n    {% endfor %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1280582, "supported_languages": null}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\r\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1280582, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\r\n\r\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    {% for i in range(n) %}\r\n    p{{i}}.generated_number * power(2, {{i}})\r\n    {% if not loop.last %} + {% endif %}\r\n    {% endfor %}\r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    {% for i in range(n) %}\r\n    p as p{{i}}\r\n    {% if not loop.last %} cross join {% endif %}\r\n    {% endfor %}\r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= {{upper_bound}}\r\n    order by generated_number\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1290548, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\r\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1320376, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\r\n{% if default is none %}\r\n    {% set default = [] %}\r\n{% endif %}\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {{ return(default) }}\r\n    {% endif %}\r\n\r\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\r\n    {# TODO: Change the method signature in a future 0.x.0 release #}\r\n    {%- set target_relation = table -%}\r\n\r\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\r\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\r\n\r\n    {%- call statement('get_column_values', fetch_result=true) %}\r\n\r\n        {%- if not relation_exists and default is none -%}\r\n\r\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\r\n\r\n        {%- elif not relation_exists and default is not none -%}\r\n\r\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\r\n\r\n          {{ return(default) }}\r\n\r\n        {%- else -%}\r\n\r\n\r\n            select\r\n                {{ column }} as value\r\n\r\n            from {{ target_relation }}\r\n            group by {{ column }}\r\n            order by {{ order_by }}\r\n\r\n            {% if max_records is not none %}\r\n            limit {{ max_records }}\r\n            {% endif %}\r\n\r\n        {% endif %}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set value_list = load_result('get_column_values') -%}\r\n\r\n    {%- if value_list and value_list['data'] -%}\r\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\r\n        {{ return(values) }}\r\n    {%- else -%}\r\n        {{ return(default) }}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1340382, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\r\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1360228, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\r\n\r\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\r\n\r\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\r\n\r\n        {{ query }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {% set sql_results={} %}\r\n\r\n    {%- if execute -%}\r\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\r\n        {% for column_name, column in sql_results_table.items() %}\r\n            {% do sql_results.update({column_name: column.values()}) %}\r\n        {% endfor %}\r\n    {%- endif -%}\r\n\r\n    {{ return(sql_results) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1370182, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1380155, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n\r\n    {%- call statement('get_tables', fetch_result=True) %}\r\n\r\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set table_list = load_result('get_tables') -%}\r\n\r\n    {%- if table_list and table_list['table'] -%}\r\n        {%- set tbl_relations = [] -%}\r\n        {%- for row in table_list['table'] -%}\r\n            {%- set tbl_relation = api.Relation.create(\r\n                database=database,\r\n                schema=row.table_schema,\r\n                identifier=row.table_name,\r\n                type=row.table_type\r\n            ) -%}\r\n            {%- do tbl_relations.append(tbl_relation) -%}\r\n        {%- endfor -%}\r\n\r\n        {{ return(tbl_relations) }}\r\n    {%- else -%}\r\n        {{ return([]) }}\r\n    {%- endif -%}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1400094, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\r\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1409354, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\r\n\r\n    {%- call statement('get_tables', fetch_result=True) %}\r\n\r\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set table_list = load_result('get_tables') -%}\r\n\r\n    {%- if table_list and table_list['table'] -%}\r\n        {%- set tbl_relations = [] -%}\r\n        {%- for row in table_list['table'] -%}\r\n            {%- set tbl_relation = api.Relation.create(\r\n                database=database,\r\n                schema=row.table_schema,\r\n                identifier=row.table_name,\r\n                type=row.table_type\r\n            ) -%}\r\n            {%- do tbl_relations.append(tbl_relation) -%}\r\n        {%- endfor -%}\r\n\r\n        {{ return(tbl_relations) }}\r\n    {%- else -%}\r\n        {{ return([]) }}\r\n    {%- endif -%}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1430032, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\r\n        (schema_pattern, table_pattern, exclude, database)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1449933, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n\r\n        select distinct\r\n            table_schema as \"table_schema\",\r\n            table_name as \"table_name\",\r\n            case table_type\r\n                when 'BASE TABLE' then 'table'\r\n                when 'EXTERNAL TABLE' then 'external'\r\n                when 'MATERIALIZED VIEW' then 'materializedview'\r\n                else lower(table_type)\r\n            end as \"table_type\"\r\n        from {{ database }}.information_schema.tables\r\n        where table_schema ilike '{{ schema_pattern }}'\r\n        and table_name ilike '{{ table_pattern }}'\r\n        and table_name not ilike '{{ exclude }}'\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1459854, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n\r\n    {% if '%' in schema_pattern %}\r\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\r\n    {% else %}\r\n        {% set schemata=[schema_pattern] %}\r\n    {% endif %}\r\n\r\n    {% set sql %}\r\n        {% for schema in schemata %}\r\n            select distinct\r\n                table_schema,\r\n                table_name,\r\n                case table_type\r\n                    when 'BASE TABLE' then 'table'\r\n                    else lower(table_type)\r\n                end as table_type\r\n\r\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\r\n            where lower(table_name) like lower ('{{ table_pattern }}')\r\n                and lower(table_name) not like lower ('{{ exclude }}')\r\n\r\n            {% if not loop.last %} union all {% endif %}\r\n\r\n        {% endfor %}\r\n    {% endset %}\r\n\r\n    {{ return(sql) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1469831, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\r\n    {% if execute %}\r\n\r\n        {% set sql %}\r\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\r\n        where lower(schema_name) like lower('{{ schema_pattern }}')\r\n        {% endset %}\r\n\r\n        {% set results=run_query(sql) %}\r\n\r\n        {% set schemata=results.columns['schema_name'].values() %}\r\n\r\n        {{ return(schemata) }}\r\n\r\n    {% else %}\r\n\r\n        {{ return([]) }}\r\n\r\n    {% endif %}\r\n\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1479087, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\r\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.149905, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\r\n\r\n    {{ dbt_utils.get_tables_by_pattern_sql(\r\n        schema_pattern = schema,\r\n        table_pattern = prefix ~ '%',\r\n        exclude = exclude,\r\n        database = database\r\n    ) }}\r\n    \r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.149905, "supported_languages": null}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\r\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1509032, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "default__group_by", "macro_sql": "\r\n\r\n{%- macro default__group_by(n) -%}\r\n\r\n  group by {% for i in range(1, n + 1) -%}\r\n      {{ i }}{{ ',' if not loop.last }}   \r\n   {%- endfor -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1518958, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\r\n    acos(-1) * {{degrees}} / 180\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1548877, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\r\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1559546, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\r\n{%- if unit == 'mi' %}\r\n    {% set conversion_rate = 1 %}\r\n{% elif unit == 'km' %}\r\n    {% set conversion_rate = 1.60934 %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\r\n{% endif %}\r\n\r\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\r\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\r\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.156952, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\r\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\r\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\r\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\r\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\r\n{%- if unit == 'mi' %}\r\n    {% set conversion_rate = 1 %}\r\n{% elif unit == 'km' %}\r\n    {% set conversion_rate = 1.60934 %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\r\n{% endif %}\r\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\r\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\r\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.157883, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\r\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.158872, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\r\n{%- for col in cols %}\r\n\r\n    {% if col.is_string() -%}\r\n\r\n    nullif({{col.name}},'') as {{col.name}}\r\n\r\n    {%- else -%}\r\n\r\n    {{col.name}}\r\n\r\n    {%- endif -%}\r\n\r\n{%- if not loop.last -%} , {%- endif -%}\r\n\r\n{%- endfor -%}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.159949, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\r\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1611948, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\r\n\r\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\r\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\r\n  {% set cols = adapter.get_columns_in_relation(relation) %}\r\n\r\n  select {{ dbt_utils.nullcheck(cols) }}\r\n  from {{relation}}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1611948, "supported_languages": null}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\r\n               values,\r\n               alias=True,\r\n               agg='sum',\r\n               cmp='=',\r\n               prefix='',\r\n               suffix='',\r\n               then_value=1,\r\n               else_value=0,\r\n               quote_identifiers=True,\r\n               distinct=False) %}\r\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1632082, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\r\n               values,\r\n               alias=True,\r\n               agg='sum',\r\n               cmp='=',\r\n               prefix='',\r\n               suffix='',\r\n               then_value=1,\r\n               else_value=0,\r\n               quote_identifiers=True,\r\n               distinct=False) %}\r\n  {% for v in values %}\r\n    {{ agg }}(\r\n      {% if distinct %} distinct {% endif %}\r\n      case\r\n      when {{ column }} {{ cmp }} '{{ v }}'\r\n        then {{ then_value }}\r\n      else {{ else_value }}\r\n      end\r\n    )\r\n    {% if alias %}\r\n      {% if quote_identifiers %}\r\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\r\n      {% else %}\r\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\r\n      {% endif %}\r\n    {% endif %}\r\n    {% if not loop.last %},{% endif %}\r\n  {% endfor %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1652827, "supported_languages": null}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\r\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\r\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\r\n    {% set frustrating_jinja_feature = varargs %}\r\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1663735, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "default__safe_add", "macro_sql": "\r\n\r\n{%- macro default__safe_add() -%}\r\n\r\n{% set fields = [] %}\r\n\r\n{%- for field in varargs -%}\r\n\r\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\r\n\r\n{%- endfor -%}\r\n\r\n{{ fields|join(' +\\n  ') }}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1663735, "supported_languages": null}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1684735, "supported_languages": null}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {{ return('') }}\r\n    {% endif %}\r\n\r\n    {%- set include_cols = [] %}\r\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\r\n    {%- set except = except | map(\"lower\") | list %}\r\n    {%- for col in cols -%}\r\n\r\n        {%- if col.column|lower not in except -%}\r\n            {% do include_cols.append(col.column) %}\r\n\r\n        {%- endif %}\r\n    {%- endfor %}\r\n\r\n    {%- for col in include_cols %}\r\n\r\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }}\r\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\r\n\r\n    {%- endfor -%}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1704614, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\r\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\r\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\r\n    {% set frustrating_jinja_feature = varargs %}\r\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1713755, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\r\n\r\n{%- macro default__surrogate_key(field_list) -%}\r\n\r\n{%- if varargs|length >= 1 or field_list is string %}\r\n\r\n{%- set error_message = '\r\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\r\nmultiple string arguments. Support for multiple string arguments will be \\\r\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\r\n'.format(model.package_name, model.name) -%}\r\n\r\n{%- do exceptions.warn(error_message) -%}\r\n\r\n{# first argument is not included in varargs, so add first element to field_list_xf #}\r\n{%- set field_list_xf = [field_list] -%}\r\n\r\n{%- for field in varargs %}\r\n{%- set _ = field_list_xf.append(field) -%}\r\n{%- endfor -%}\r\n\r\n{%- else -%}\r\n\r\n{# if using list, just set field_list_xf as field_list #}\r\n{%- set field_list_xf = field_list -%}\r\n\r\n{%- endif -%}\r\n\r\n\r\n{%- set fields = [] -%}\r\n\r\n{%- for field in field_list_xf -%}\r\n\r\n    {%- set _ = fields.append(\r\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\r\n    ) -%}\r\n\r\n    {%- if not loop.last %}\r\n        {%- set _ = fields.append(\"'-'\") -%}\r\n    {%- endif -%}\r\n\r\n{%- endfor -%}\r\n\r\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.173439, "supported_languages": null}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\r\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1764297, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "default__union_relations", "macro_sql": "\r\n\r\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\r\n\r\n    {%- if exclude and include -%}\r\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\r\n    {%- endif -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\r\n    {%- if not execute %}\r\n        {{ return('') }}\r\n    {% endif -%}\r\n\r\n    {%- set column_override = column_override if column_override is not none else {} -%}\r\n\r\n    {%- set relation_columns = {} -%}\r\n    {%- set column_superset = {} -%}\r\n\r\n    {%- for relation in relations -%}\r\n\r\n        {%- do relation_columns.update({relation: []}) -%}\r\n\r\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\r\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\r\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\r\n        {%- for col in cols -%}\r\n\r\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\r\n        {%- if exclude and col.column in exclude -%}\r\n\r\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\r\n        {%- elif include and col.column not in include -%}\r\n\r\n        {#- Otherwise add the column to the column superset -#}\r\n        {%- else -%}\r\n\r\n            {#- update the list of columns in this relation -#}\r\n            {%- do relation_columns[relation].append(col.column) -%}\r\n\r\n            {%- if col.column in column_superset -%}\r\n\r\n                {%- set stored = column_superset[col.column] -%}\r\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\r\n\r\n                    {%- do column_superset.update({col.column: col}) -%}\r\n\r\n                {%- endif %}\r\n\r\n            {%- else -%}\r\n\r\n                {%- do column_superset.update({col.column: col}) -%}\r\n\r\n            {%- endif -%}\r\n\r\n        {%- endif -%}\r\n\r\n        {%- endfor -%}\r\n    {%- endfor -%}\r\n\r\n    {%- set ordered_column_names = column_superset.keys() -%}\r\n\r\n    {%- for relation in relations %}\r\n\r\n        (\r\n            select\r\n\r\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\r\n                {% for col_name in ordered_column_names -%}\r\n\r\n                    {%- set col = column_superset[col_name] %}\r\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\r\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\r\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\r\n\r\n                {%- endfor %}\r\n\r\n            from {{ relation }}\r\n        )\r\n\r\n        {% if not loop.last -%}\r\n            union all\r\n        {% endif -%}\r\n\r\n    {%- endfor -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1820905, "supported_languages": null}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\r\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1858976, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\r\n\r\n    {% if table %}\r\n        {%- set error_message = '\r\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\r\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\r\n            The {}.{} model triggered this warning. \\\r\n            '.format(model.package_name, model.name) -%}\r\n        {%- do exceptions.warn(error_message) -%}\r\n    {% endif %}\r\n\r\n    {% if relation and table %}\r\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\r\n    {% elif not relation and table %}\r\n        {% set relation=table %}\r\n    {% elif not relation and not table %}\r\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\r\n    {% endif %}\r\n\r\n  {%- set exclude = exclude if exclude is not none else [] %}\r\n  {%- set remove = remove if remove is not none else [] %}\r\n\r\n  {%- set include_cols = [] %}\r\n\r\n  {%- set table_columns = {} %}\r\n\r\n  {%- do table_columns.update({relation: []}) %}\r\n\r\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\r\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\r\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\r\n\r\n  {%- for col in cols -%}\r\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\r\n      {% do include_cols.append(col) %}\r\n    {%- endif %}\r\n  {%- endfor %}\r\n\r\n\r\n  {%- for col in include_cols -%}\r\n    select\r\n      {%- for exclude_col in exclude %}\r\n        {{ exclude_col }},\r\n      {%- endfor %}\r\n\r\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\r\n      cast(  {% if col.data_type == 'boolean' %}\r\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\r\n             {% else %}\r\n           {{ col.column }}\r\n             {% endif %}\r\n           as {{ cast_to }}) as {{ value_name }}\r\n\r\n    from {{ relation }}\r\n\r\n    {% if not loop.last -%}\r\n      union all\r\n    {% endif -%}\r\n  {%- endfor -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1898835, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\r\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.19088, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\r\n\r\n{%- set parsed =\r\n    dbt_utils.split_part(\r\n        dbt_utils.split_part(\r\n            dbt_utils.replace(\r\n                dbt_utils.replace(\r\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\r\n                    ), \"'http://'\", \"''\"\r\n                ), \"'https://'\", \"''\"\r\n            ), \"'/'\", 1\r\n        ), \"'?'\", 1\r\n    )\r\n\r\n-%}\r\n\r\n\r\n    {{ dbt_utils.safe_cast(\r\n        parsed,\r\n        dbt_utils.type_string()\r\n        )}}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.191877, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\r\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1928735, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\r\n\r\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\r\n\r\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\r\n\r\nnullif({{ split }},'')\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1938703, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\r\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1948671, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\r\n\r\n    {%- set stripped_url = \r\n        dbt_utils.replace(\r\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\r\n    -%}\r\n\r\n    {%- set first_slash_pos -%}\r\n        coalesce(\r\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\r\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\r\n            )\r\n    {%- endset -%}\r\n\r\n    {%- set parsed_path =\r\n        dbt_utils.split_part(\r\n            dbt_utils.right(\r\n                stripped_url, \r\n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\r\n                ), \r\n            \"'?'\", 1\r\n            )\r\n    -%}\r\n\r\n    {{ dbt_utils.safe_cast(\r\n        parsed_path,\r\n        dbt_utils.type_string()\r\n    )}}\r\n    \r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.196931, "supported_languages": null}, "macro.dbt_labs_materialized_views.bigquery_options": {"unique_id": "macro.dbt_labs_materialized_views.bigquery_options", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\bigquery\\adapters.sql", "original_file_path": "macros\\bigquery\\adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options() %}\r\n  {%- set opts = kwargs -%}\r\n  {%- set options -%}\r\n    OPTIONS({% for opt_key, opt_val in kwargs.items() if opt_val is not none %}\r\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\r\n    {%- endfor -%})\r\n  {%- endset %}\r\n  {%- do return(options) -%}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1988556, "supported_languages": null}, "macro.dbt_labs_materialized_views.bigquery__create_materialized_view_as": {"unique_id": "macro.dbt_labs_materialized_views.bigquery__create_materialized_view_as", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\bigquery\\adapters.sql", "original_file_path": "macros\\bigquery\\adapters.sql", "name": "bigquery__create_materialized_view_as", "macro_sql": "{% macro bigquery__create_materialized_view_as(relation, sql, config) -%}\r\n\r\n    {%- set enable_refresh = config.get('auto_refresh', none) -%}\r\n    {%- set refresh_interval_minutes = config.get('refresh_interval_minutes', none) -%}\r\n    {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n    {{ sql_header if sql_header is not none }}\r\n\r\n    create materialized view {{relation}}\r\n    {{ dbt_labs_materialized_views.bigquery_options(\r\n        enable_refresh=enable_refresh, \r\n        refresh_interval_minutes=refresh_interval_minutes\r\n    ) }}\r\n    as (\r\n        {{sql}}\r\n    )\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_labs_materialized_views.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.1999238, "supported_languages": null}, "macro.dbt_labs_materialized_views.bigquery__refresh_materialized_view": {"unique_id": "macro.dbt_labs_materialized_views.bigquery__refresh_materialized_view", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\bigquery\\adapters.sql", "original_file_path": "macros\\bigquery\\adapters.sql", "name": "bigquery__refresh_materialized_view", "macro_sql": "{% macro bigquery__refresh_materialized_view(relation, config) -%}\r\n    \r\n    {%- set is_auto_refresh = config.get('auto_refresh', true) %}\r\n    \r\n    {%- if is_auto_refresh == false -%} {# manual refresh #}\r\n    \r\n        {% set refresh_command %}\r\n        call bq.refresh_materialized_view('{{relation|replace(\"`\",\"\")}}')\r\n        {% endset %}\r\n        \r\n        {%- do return(refresh_command) -%}\r\n    \r\n    {%- else -%} {# automatic refresh #}\r\n    \r\n        {%- do log(\"Skipping materialized view \" ~ relation ~ \" because it is set\r\n            to refresh automatically\") -%}\r\n            \r\n        {%- do return(none) -%}\r\n    \r\n    {%- endif -%}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.2009273, "supported_languages": null}, "macro.dbt_labs_materialized_views.materialization_materialized_view_bigquery": {"unique_id": "macro.dbt_labs_materialized_views.materialization_materialized_view_bigquery", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\bigquery\\materialized_view.sql", "original_file_path": "macros\\bigquery\\materialized_view.sql", "name": "materialization_materialized_view_bigquery", "macro_sql": "{% materialization materialized_view, adapter='bigquery' -%}\r\n\r\n  {% set full_refresh_mode = (should_full_refresh()) %}\r\n\r\n  {% set target_relation = this %}\r\n  {% set existing_relation = load_relation(this) %}\r\n  {% set tmp_relation = make_temp_relation(this) %}\r\n\r\n  {{ run_hooks(pre_hooks) }}\r\n\r\n  {% if existing_relation is none %}\r\n      {% set build_sql = dbt_labs_materialized_views.create_materialized_view_as(target_relation, sql, config) %}\r\n  {% elif existing_relation.is_view or existing_relation.is_table %}\r\n      {#-- Can't overwrite a view with a table - we must drop --#}\r\n      {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a \" ~ existing_relation.type ~ \" and this model is a materialized view.\") }}\r\n      {% do adapter.drop_relation(existing_relation) %}\r\n      {% set build_sql = dbt_labs_materialized_views.create_materialized_view_as(target_relation, sql, config) %}\r\n  {% elif full_refresh_mode %}\r\n      {#-- create or replace not yet supported for materialized views --#}\r\n      {{ log(\"Dropping relation \" ~ target_relation ~ \" because replacing an existing materialized view is not supported.\") }}\r\n      {% do adapter.drop_relation(existing_relation) %}\r\n      {% set build_sql = dbt_labs_materialized_views.create_materialized_view_as(target_relation, sql, config) %}\r\n  {% else %}\r\n      {% set build_sql = dbt_labs_materialized_views.refresh_materialized_view(target_relation, config) %}\r\n  {% endif %}\r\n\r\n  {% if build_sql %}\r\n      {% call statement(\"main\") %}\r\n          {{ build_sql }}\r\n      {% endcall %}\r\n  {% else %}\r\n    {{ store_result('main', 'SKIP') }}\r\n  {% endif %}\r\n\r\n  {{ run_hooks(post_hooks) }}\r\n  \r\n  {% do persist_docs(target_relation, model) %}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt_labs_materialized_views.create_materialized_view_as", "macro.dbt_labs_materialized_views.refresh_materialized_view", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.2049065, "supported_languages": ["sql"]}, "macro.dbt_labs_materialized_views.create_materialized_view_as": {"unique_id": "macro.dbt_labs_materialized_views.create_materialized_view_as", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\default\\adapters.sql", "original_file_path": "macros\\default\\adapters.sql", "name": "create_materialized_view_as", "macro_sql": "{% macro create_materialized_view_as(relation, sql, config) %}\r\n    {{ return(adapter.dispatch('create_materialized_view_as', macro_namespace = 'dbt_labs_materialized_views')(relation, sql, config)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_labs_materialized_views.bigquery__create_materialized_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.2068303, "supported_languages": null}, "macro.dbt_labs_materialized_views.default__create_materialized_view_as": {"unique_id": "macro.dbt_labs_materialized_views.default__create_materialized_view_as", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\default\\adapters.sql", "original_file_path": "macros\\default\\adapters.sql", "name": "default__create_materialized_view_as", "macro_sql": "{% macro default__create_materialized_view_as(relation, sql, config) -%}\r\n\r\n    create materialized view {{relation}} as (\r\n        {{sql}}\r\n    )\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.2068303, "supported_languages": null}, "macro.dbt_labs_materialized_views.refresh_materialized_view": {"unique_id": "macro.dbt_labs_materialized_views.refresh_materialized_view", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\default\\adapters.sql", "original_file_path": "macros\\default\\adapters.sql", "name": "refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation, config) %}\r\n    {{ return(adapter.dispatch('refresh_materialized_view', macro_namespace = 'dbt_labs_materialized_views')(relation, config)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_labs_materialized_views.bigquery__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.2078962, "supported_languages": null}, "macro.dbt_labs_materialized_views.default__refresh_materialized_view": {"unique_id": "macro.dbt_labs_materialized_views.default__refresh_materialized_view", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\default\\adapters.sql", "original_file_path": "macros\\default\\adapters.sql", "name": "default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation, config) -%}\r\n\r\n    refresh materialized view {{relation}}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.2078962, "supported_languages": null}, "macro.dbt_labs_materialized_views.drop_relation": {"unique_id": "macro.dbt_labs_materialized_views.drop_relation", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\default\\adapters.sql", "original_file_path": "macros\\default\\adapters.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\r\n  {% set relation_type = 'materialized view' if relation.type == 'materializedview' else relation.type %}\r\n  {% call statement('drop_relation', auto_begin=False) -%}\r\n    drop {{ relation_type }} if exists {{ relation }} cascade\r\n  {%- endcall %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.2078962, "supported_languages": null}, "macro.dbt_labs_materialized_views.materialization_materialized_view_default": {"unique_id": "macro.dbt_labs_materialized_views.materialization_materialized_view_default", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\default\\materialized_view.sql", "original_file_path": "macros\\default\\materialized_view.sql", "name": "materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default -%}\r\n\r\n  {% set full_refresh_mode = (should_full_refresh()) %}\r\n\r\n  {% set target_relation = this %}\r\n  {% set existing_relation = load_relation(this) %}\r\n  {% set tmp_relation = make_temp_relation(this) %}\r\n  \r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  {% set to_drop = [] %}\r\n  \r\n  {% if existing_relation is none %}\r\n      {% set build_sql = dbt_labs_materialized_views.create_materialized_view_as(target_relation, sql, config) %}\r\n  \r\n  {% elif full_refresh_mode or existing_relation.type != 'materializedview' %}\r\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\r\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\r\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\r\n      {% do adapter.drop_relation(backup_relation) %}\r\n\r\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\r\n      {% set build_sql = dbt_labs_materialized_views.create_materialized_view_as(target_relation, sql, config) %}\r\n      {% do to_drop.append(backup_relation) %}\r\n  \r\n  {% else %}\r\n      {% set build_sql = dbt_labs_materialized_views.refresh_materialized_view(target_relation, config) %}\r\n  {% endif %}\r\n\r\n  {% if build_sql %}\r\n\r\n      {% call statement(\"main\") %}\r\n          {{ build_sql }}\r\n      {% endcall %}\r\n      \r\n      {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n      \r\n      {% do persist_docs(target_relation, model) %}\r\n\r\n      -- `COMMIT` happens here\r\n      {% do adapter.commit() %}\r\n \r\n  {% else %}\r\n\r\n    {{ store_result('main', 'SKIP') }}\r\n\r\n  {% endif %}  \r\n\r\n  {% for rel in to_drop %}\r\n      {% do adapter.drop_relation(rel) %}\r\n  {% endfor %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt_labs_materialized_views.create_materialized_view_as", "macro.dbt_labs_materialized_views.refresh_materialized_view", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.2138064, "supported_languages": ["sql"]}, "macro.dbt_labs_materialized_views.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_labs_materialized_views.postgres__list_relations_without_caching", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\postgres\\adapters.sql", "original_file_path": "macros\\postgres\\adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\r\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\r\n    select\r\n      '{{ schema_relation.database }}' as database,\r\n      tablename as name,\r\n      schemaname as schema,\r\n      'table' as type\r\n    from pg_tables\r\n    where schemaname ilike '{{ schema_relation.schema }}'\r\n    union all\r\n    select\r\n      '{{ schema_relation.database }}' as database,\r\n      viewname as name,\r\n      schemaname as schema,\r\n      'view' as type\r\n    from pg_views\r\n    where schemaname ilike '{{ schema_relation.schema }}'\r\n    union all\r\n    select\r\n        '{{ schema_relation.database }}' as database,\r\n        matviewname as name,\r\n        schemaname as schema,\r\n        'materializedview' as type\r\n    from pg_matviews\r\n    where schemaname ilike '{{ schema_relation.schema }}'\r\n  {% endcall %}\r\n  {{ return(load_result('list_relations_without_caching').table) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.2158716, "supported_languages": null}, "macro.dbt_labs_materialized_views.postgres_get_relations": {"unique_id": "macro.dbt_labs_materialized_views.postgres_get_relations", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\postgres\\adapters.sql", "original_file_path": "macros\\postgres\\adapters.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\r\n\r\n  {#\r\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\r\n      --  > a pg_depend entry indicates that the referenced object cannot be\r\n      --  > dropped without also dropping the dependent object.\r\n  #}\r\n\r\n  {%- call statement('relations', fetch_result=True) -%}\r\n    with relation as (\r\n        select\r\n            pg_rewrite.ev_class as class,\r\n            pg_rewrite.oid as id\r\n        from pg_rewrite\r\n    ),\r\n    class as (\r\n        select\r\n            oid as id,\r\n            relname as name,\r\n            relnamespace as schema,\r\n            relkind as kind\r\n        from pg_class\r\n    ),\r\n    dependency as (\r\n        select\r\n            pg_depend.objid as id,\r\n            pg_depend.refobjid as ref\r\n        from pg_depend\r\n    ),\r\n    schema as (\r\n        select\r\n            pg_namespace.oid as id,\r\n            pg_namespace.nspname as name\r\n        from pg_namespace\r\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\r\n    ),\r\n    referenced as (\r\n        select\r\n            relation.id AS id,\r\n            referenced_class.name ,\r\n            referenced_class.schema ,\r\n            referenced_class.kind\r\n        from relation\r\n        join class as referenced_class on relation.class=referenced_class.id\r\n        where referenced_class.kind in ('r', 'v', 'm')\r\n    ),\r\n    relationships as (\r\n        select\r\n            referenced.name as referenced_name,\r\n            referenced.schema as referenced_schema_id,\r\n            dependent_class.name as dependent_name,\r\n            dependent_class.schema as dependent_schema_id,\r\n            referenced.kind as kind\r\n        from referenced\r\n        join dependency on referenced.id=dependency.id\r\n        join class as dependent_class on dependency.ref=dependent_class.id\r\n        where\r\n            (referenced.name != dependent_class.name or\r\n             referenced.schema != dependent_class.schema)\r\n    )\r\n\r\n    select\r\n        referenced_schema.name as referenced_schema,\r\n        relationships.referenced_name as referenced_name,\r\n        dependent_schema.name as dependent_schema,\r\n        relationships.dependent_name as dependent_name\r\n    from relationships\r\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\r\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\r\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\r\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\r\n\r\n  {%- endcall -%}\r\n\r\n  {{ return(load_result('relations').table) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.216864, "supported_languages": null}, "macro.dbt_labs_materialized_views.redshift__create_materialized_view_as": {"unique_id": "macro.dbt_labs_materialized_views.redshift__create_materialized_view_as", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\redshift\\adapters.sql", "original_file_path": "macros\\redshift\\adapters.sql", "name": "redshift__create_materialized_view_as", "macro_sql": "{% macro redshift__create_materialized_view_as(relation, sql, config) -%}\r\n\r\n  {%- set _dist = config.get('dist') -%}\r\n  {%- set _sort_type = config.get(\r\n          'sort_type',\r\n          validator=validation.any['compound', 'interleaved']) -%}\r\n  {%- set _sort = config.get(\r\n          'sort',\r\n          validator=validation.any[list, basestring]) -%}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n  {%- set auto_refresh = 'yes' if config.get('auto_refresh', false) else 'no' %}\r\n\r\n  {{ sql_header if sql_header is not none }}\r\n\r\n  create materialized view {{ relation }}\r\n    {{ dist(_dist) }}\r\n    {{ sort(_sort_type, _sort) }}\r\n    auto refresh {{ auto_refresh }}\r\n  as (\r\n    {{ sql }}\r\n  );\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.2188575, "supported_languages": null}, "macro.dbt_labs_materialized_views.redshift__refresh_materialized_view": {"unique_id": "macro.dbt_labs_materialized_views.redshift__refresh_materialized_view", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\redshift\\adapters.sql", "original_file_path": "macros\\redshift\\adapters.sql", "name": "redshift__refresh_materialized_view", "macro_sql": "{% macro redshift__refresh_materialized_view(relation, config) -%}\r\n\r\n    {%- set is_auto_refresh = config.get('auto_refresh', true) %}\r\n\r\n    {%- if is_auto_refresh == false -%} {# manual refresh #}\r\n\r\n        refresh materialized view {{relation}}\r\n    \r\n    {%- else -%} {# automatic refresh #}\r\n    \r\n        {%- do log(\"Skipping materialized view \" ~ relation ~ \" because it is set\r\n            to refresh automatically\") -%}\r\n            \r\n        {%- do return(none) -%}\r\n    \r\n    {%- endif -%}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.219854, "supported_languages": null}, "macro.dbt_labs_materialized_views.redshift__list_relations_without_caching": {"unique_id": "macro.dbt_labs_materialized_views.redshift__list_relations_without_caching", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\redshift\\adapters.sql", "original_file_path": "macros\\redshift\\adapters.sql", "name": "redshift__list_relations_without_caching", "macro_sql": "{% macro redshift__list_relations_without_caching(schema_relation) %}\r\n  {#\r\n    pretty silly, but this is the best Redshift has given us.\r\n    we effectively can't join stv_mv_info here,\r\n    because they're different types of sytem tables (pg_ vs. stv_)\r\n  #}\r\n\r\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\r\n    select\r\n      '{{ schema_relation.database }}' as database,\r\n      tablename as name,\r\n      schemaname as schema,\r\n      'table' as type\r\n    from pg_tables\r\n    where schemaname ilike '{{ schema_relation.schema }}'\r\n    union all\r\n    select\r\n      '{{ schema_relation.database }}' as database,\r\n      viewname as name,\r\n      schemaname as schema,\r\n      case when definition ilike '%create materialized view%'\r\n        then 'materializedview'\r\n        else 'view'\r\n        end as type\r\n    from pg_views\r\n    where schemaname ilike '{{ schema_relation.schema }}'\r\n  {% endcall %}\r\n  \r\n  {{ return(load_result('list_relations_without_caching').table) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.2208502, "supported_languages": null}, "macro.dbt_labs_materialized_views.redshift_load_relation_or_mv": {"unique_id": "macro.dbt_labs_materialized_views.redshift_load_relation_or_mv", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\redshift\\adapters.sql", "original_file_path": "macros\\redshift\\adapters.sql", "name": "redshift_load_relation_or_mv", "macro_sql": "{% macro redshift_load_relation_or_mv(relation) %}\r\n  \r\n  {% set rel = adapter.get_relation(\r\n    database=relation.database,\r\n    schema=relation.schema,\r\n    identifier=relation.identifier\r\n  ) -%}\r\n  \r\n  {% if rel.type == 'materializedview' and execute %}\r\n  \r\n    {# materialized views are not properly registered in pg_depend,\r\n       so the cache can miss that they've been dropped\r\n       https://github.com/awslabs/amazon-redshift-utils/issues/499 #}\r\n\r\n    {% set hard_check_mv_sql %}\r\n\r\n        select count(*) from stv_mv_info\r\n        where schema = '{{ rel.schema }}'\r\n        and name = '{{ rel.identifier }}'\r\n\r\n    {% endset %}\r\n\r\n    {% set result = run_query(hard_check_mv_sql)[0][0] %}\r\n    {% set mv_rel = rel if result > 0 else none %}\r\n    {% do return(mv_rel) %}\r\n  \r\n  {% else %}\r\n  \r\n    {% do return(rel) %}\r\n  \r\n  {% endif %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.221847, "supported_languages": null}, "macro.dbt_labs_materialized_views.snowflake__create_materialized_view_as": {"unique_id": "macro.dbt_labs_materialized_views.snowflake__create_materialized_view_as", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\snowflake\\adapters.sql", "original_file_path": "macros\\snowflake\\adapters.sql", "name": "snowflake__create_materialized_view_as", "macro_sql": "{% macro snowflake__create_materialized_view_as(relation, sql, config) -%}\r\n    {%- set secure = config.get('secure', default=false) -%}\r\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\r\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\r\n    {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\r\n        {%- set cluster_by_keys = [cluster_by_keys] -%}\r\n    {%- endif -%}\r\n    {%- if cluster_by_keys is not none -%}\r\n        {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\r\n    {% else %}\r\n        {%- set cluster_by_string = none -%}\r\n    {%- endif -%}\r\n\r\n    {{ sql_header if sql_header is not none }}\r\n\r\n    create or replace \r\n        {% if secure -%} secure {%- endif %} \r\n        materialized view {{relation}}\r\n    as (\r\n        {{sql}}\r\n    );\r\n    \r\n    {% if cluster_by_string is not none and not temporary -%}\r\n      alter materialized view {{relation}} cluster by ({{cluster_by_string}});\r\n    {%- endif -%}\r\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\r\n      alter materialized view {{relation}} resume recluster;\r\n    {%- endif -%}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.2248423, "supported_languages": null}, "macro.dbt_labs_materialized_views.materialization_materialized_view_snowflake": {"unique_id": "macro.dbt_labs_materialized_views.materialization_materialized_view_snowflake", "package_name": "dbt_labs_materialized_views", "root_path": "C:\\Users\\user2376\\RW_projects\\Perekrestok-dbt\\perekrestokvprok-dbt\\dbt_packages\\materialized-views", "path": "macros\\snowflake\\materialized_view.sql", "original_file_path": "macros\\snowflake\\materialized_view.sql", "name": "materialization_materialized_view_snowflake", "macro_sql": "{% materialization materialized_view, adapter='snowflake' -%}\r\n\r\n  {% set original_query_tag = set_query_tag() %}\r\n\r\n  {% set full_refresh_mode = (should_full_refresh()) %}\r\n\r\n  {% set target_relation = this %}\r\n  {% set existing_relation = load_relation(this) %}\r\n  {% set tmp_relation = make_temp_relation(this) %}\r\n\r\n  {{ run_hooks(pre_hooks) }}\r\n\r\n  {% if (existing_relation is none or full_refresh_mode) %}\r\n      {% set build_sql = dbt_labs_materialized_views.create_materialized_view_as(target_relation, sql, config) %}\r\n  {% elif existing_relation.is_view or existing_relation.is_table %}\r\n      {#-- Can't overwrite a view with a table - we must drop --#}\r\n      {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a \" ~ existing_relation.type ~ \" and this model is a materialized view.\") }}\r\n      {% do adapter.drop_relation(existing_relation) %}\r\n      {% set build_sql = dbt_labs_materialized_views.create_materialized_view_as(target_relation, sql, config) %}\r\n  {% else %}\r\n      {# noop #}\r\n  {% endif %}\r\n  \r\n  {% if build_sql %}\r\n      {% call statement(\"main\") %}\r\n          {{ build_sql }}\r\n      {% endcall %}\r\n  {% else %}\r\n    {{ store_result('main', 'SKIP') }}\r\n  {% endif %}\r\n\r\n  {{ run_hooks(post_hooks) }}\r\n  \r\n  {% do persist_docs(target_relation, model) %}\r\n  \r\n  {% do unset_query_tag(original_query_tag) %}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt_labs_materialized_views.create_materialized_view_as", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1676546308.2288299, "supported_languages": ["sql"]}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "C:\\Users\\user2376\\Miniconda3\\envs\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.perekrestokvprok.my_first_dbt_model": [], "model.perekrestokvprok.my_second_dbt_model": ["model.perekrestokvprok.my_first_dbt_model"], "model.perekrestokvprok.dim_client_promo": ["model.perekrestokvprok.stg_promo_sheets", "model.perekrestokvprok.stg_promocode_client_data"], "model.perekrestokvprok.dim_media": ["model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta", "model.perekrestokvprok.int_google_dcm_activity_meta", "model.perekrestokvprok.int_google_dcm_reach", "model.perekrestokvprok.stg_af_for_media", "model.perekrestokvprok.stg_placement_dict"], "model.perekrestokvprok.dim_plan_budget": ["model.perekrestokvprok.stg_budget_and_plan"], "model.perekrestokvprok.dim_ret": ["model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.int_vk_cab_meta", "model.perekrestokvprok.int_yandex_cab_meta", "model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_appnext_cost", "model.perekrestokvprok.stg_asa_cab_sheets", "model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.stg_facebook_cab_sheets", "model.perekrestokvprok.stg_google_cab_sheets", "model.perekrestokvprok.stg_partner_limits", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_tiktok_cab_meta", "model.perekrestokvprok.stg_twitter_cab_sheets"], "model.perekrestokvprok.dim_ret_crm": ["model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_promo_sheets", "model.perekrestokvprok.stg_promocode_client_data"], "model.perekrestokvprok.dim_rtg_agg": ["model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.int_vk_cab_meta", "model.perekrestokvprok.int_yandex_cab_meta", "model.perekrestokvprok.stg_af_rtg_partners_by_date", "model.perekrestokvprok.stg_asa_cab_sheets", "model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.stg_facebook_cab_sheets", "model.perekrestokvprok.stg_google_cab_sheets", "model.perekrestokvprok.stg_partner_limits", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_tiktok_cab_meta", "model.perekrestokvprok.stg_twitter_cab_sheets"], "model.perekrestokvprok.dim_ua": ["model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.int_vk_cab_meta", "model.perekrestokvprok.int_yandex_cab_meta", "model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_appnext_cost", "model.perekrestokvprok.stg_asa_cab_sheets", "model.perekrestokvprok.stg_campaign_limits", "model.perekrestokvprok.stg_crm_orders", "model.perekrestokvprok.stg_crm_orders_realwebcpa", "model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.stg_facebook_cab_sheets", "model.perekrestokvprok.stg_google_cab_sheets", "model.perekrestokvprok.stg_huawei_cab_sheets", "model.perekrestokvprok.stg_partner_limits", "model.perekrestokvprok.stg_partner_limits", "model.perekrestokvprok.stg_partner_limits", "model.perekrestokvprok.stg_partner_limits", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_promo_dict_sheets", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_tiktok_cab_meta", "model.perekrestokvprok.stg_vk_beta_sheet", "model.perekrestokvprok.stg_zen_data_sheets", "source.perekrestokvprok.agg_data.vk_manual_cost", "source.perekrestokvprok.agg_data.vk_manual_data"], "model.perekrestokvprok.dim_ua_agg": ["model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.int_asa_cab_meta", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.int_mytarget_cab_meta", "model.perekrestokvprok.int_yandex_cab_meta", "model.perekrestokvprok.stg_af_ua_partners_by_date", "model.perekrestokvprok.stg_asa_cab_sheets", "model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.stg_facebook_cab_sheets", "model.perekrestokvprok.stg_google_cab_sheets", "model.perekrestokvprok.stg_partner_limits", "model.perekrestokvprok.stg_rate_info", "model.perekrestokvprok.stg_tiktok_cab_meta"], "model.perekrestokvprok.dim_ua_crm": ["model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_promo_sheets", "model.perekrestokvprok.stg_promocode_client_data"], "model.perekrestokvprok.int_partner_limits": ["model.perekrestokvprok.stg_partner_limits"], "model.perekrestokvprok.int_rate_for_inside": ["model.perekrestokvprok.stg_rate_info"], "model.perekrestokvprok.int_asa_cab_meta": ["source.perekrestokvprok.MetaCustom.apple_search_ads_ASA_cost"], "model.perekrestokvprok.int_google_cab_sheets": ["model.perekrestokvprok.stg_google_cab_sheets", "source.perekrestokvprok.sheets_data.google_ads_costs_and_installs"], "model.perekrestokvprok.int_google_dbm_dv360_cost": ["source.perekrestokvprok.MetaCustom.google_dbm_google_dv360_cost_5807131"], "model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta": ["model.perekrestokvprok.stg_google_dbm", "source.perekrestokvprok.DCM.google_dbm_existed_dbm_report_293044"], "model.perekrestokvprok.int_google_dcm_activity_meta": ["source.perekrestokvprok.DCM.google_dcm_activitiIO"], "model.perekrestokvprok.int_google_dcm_reach": ["source.perekrestokvprok.DCM_impression_reach.google_dbm_existed_dbm_report_293044"], "model.perekrestokvprok.int_mytarget_cab_meta": ["source.perekrestokvprok.MetaCustom.mytarget_banner_stat_d0927adb05_agency_client"], "model.perekrestokvprok.int_twitter_cab": ["model.perekrestokvprok.stg_twitter_cab_sheets", "source.perekrestokvprok.sheets_data.twitter_sheets"], "model.perekrestokvprok.int_vk_cab_meta": ["source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1605495720", "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1607141417"], "model.perekrestokvprok.int_yandex_cab_meta": ["source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_perek_vprok_sf", "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_x5perek_direct"], "model.perekrestokvprok.stg_af_client_data": ["source.perekrestokvprok.agg_data.AF_client_data", "source.perekrestokvprok.agg_data.AF_client_data", "source.perekrestokvprok.agg_data.AF_smartbanners_may_2022"], "model.perekrestokvprok.stg_af_for_media": ["source.perekrestokvprok.AF_data.af_atr_data_for_media_ads_TABLE"], "model.perekrestokvprok.stg_af_rtg_partners_by_date": ["source.perekrestokvprok.AF_data.android_rtg_partners_by_date_report_*", "source.perekrestokvprok.AF_data.ios_rtg_partners_by_date_report_*"], "model.perekrestokvprok.stg_af_ua_partners_by_date": ["source.perekrestokvprok.AF_data.android_ua_partners_by_date_report_*", "source.perekrestokvprok.AF_data.ios_ua_partners_by_date_report_*"], "model.perekrestokvprok.stg_appnext_cost": [], "model.perekrestokvprok.stg_asa_cab_sheets": ["model.perekrestokvprok.int_asa_cab_meta", "source.perekrestokvprok.sheets_data.Asa_cost"], "model.perekrestokvprok.stg_budget_and_plan": ["source.perekrestokvprok.sheets_data.budget_and_plan"], "model.perekrestokvprok.stg_campaign_limits": ["source.perekrestokvprok.sheets_data.campaign_limits"], "model.perekrestokvprok.stg_crm_orders": ["source.perekrestokvprok.sheets_data.crm_redeem_first_orders", "source.perekrestokvprok.sheets_data.crm_redeem_first_orders"], "model.perekrestokvprok.stg_crm_orders_realwebcpa": ["source.perekrestokvprok.sheets_data.crm_redeem_first_orders", "source.perekrestokvprok.sheets_data.crm_redeem_first_orders_realwebcpa"], "model.perekrestokvprok.stg_facebook_cab_meta": ["source.perekrestokvprok.sheets_data.FBNEW_data", "source.perekrestokvprok.test2.facebook_ads_ad_stat_minimal_134923481805102"], "model.perekrestokvprok.stg_facebook_cab_sheets": ["source.perekrestokvprok.sheets_data.FBNEW_data", "source.perekrestokvprok.sheets_data.fb_spreadsheets_data"], "model.perekrestokvprok.stg_google_cab_sheets": ["source.perekrestokvprok.agg_data.google_ads_costs_and_installs_sum", "source.perekrestokvprok.sheets_data.google_ads_costs_and_installs"], "model.perekrestokvprok.stg_google_dbm": ["source.perekrestokvprok.test2.google_dbm_existed_dbm_report_123"], "model.perekrestokvprok.stg_huawei_cab_sheets": ["source.perekrestokvprok.sheets_data.huawei_data"], "model.perekrestokvprok.stg_mistake_cmp": ["source.perekrestokvprok.sheets_data.mistake_cmp"], "model.perekrestokvprok.stg_partner_limits": ["source.perekrestokvprok.sheets_data.limits_sheet"], "model.perekrestokvprok.stg_placement_dict": ["source.perekrestokvprok.DCM.Placemant_dict"], "model.perekrestokvprok.stg_promocode_client_data": ["source.perekrestokvprok.agg_data.promocod_client_data"], "model.perekrestokvprok.stg_promo_dict_sheets": ["source.perekrestokvprok.sheets_data.promo_dict_sheets"], "model.perekrestokvprok.stg_promo_sheets": ["source.perekrestokvprok.sheets_data.promo_sheets"], "model.perekrestokvprok.stg_rate_info": ["source.perekrestokvprok.sheets_data._rates"], "model.perekrestokvprok.stg_tiktok_cab_meta": ["source.perekrestokvprok.sheets_data.TIKTOK_table", "source.perekrestokvprok.test2.tiktok_perek_settings_6952834783391023106"], "model.perekrestokvprok.stg_twitter_cab_sheets": ["source.perekrestokvprok.sheets_data.twitter_data", "source.perekrestokvprok.sheets_data.twitter_sheets"], "model.perekrestokvprok.stg_vk_beta_sheet": ["source.perekrestokvprok.sheets_data.vk_beta_sheet"], "model.perekrestokvprok.stg_zen_data_sheets": ["source.perekrestokvprok.sheets_data.zen_sheets"], "test.perekrestokvprok.freshness_stg_tiktok_cab_meta_date.2e7fade306": ["model.perekrestokvprok.stg_tiktok_cab_meta"], "test.perekrestokvprok.freshness_stg_google_dbm_date__2.045c65720f": ["model.perekrestokvprok.stg_google_dbm"], "test.perekrestokvprok.freshness_stg_google_cab_sheets_date.ea19a30b02": ["model.perekrestokvprok.stg_google_cab_sheets"], "test.perekrestokvprok.freshness_stg_af_for_media_date.4abd88be82": ["model.perekrestokvprok.stg_af_for_media"], "test.perekrestokvprok.freshness_stg_af_client_data_date.e3578f41c6": ["model.perekrestokvprok.stg_af_client_data"], "test.perekrestokvprok.freshness_int_yandex_cab_meta_date.f0993cbb4f": ["model.perekrestokvprok.int_yandex_cab_meta"], "test.perekrestokvprok.freshness_int_mytarget_cab_meta_date.b7126cd27f": ["model.perekrestokvprok.int_mytarget_cab_meta"], "test.perekrestokvprok.freshness_int_google_dcm_reach_date__2.6f5c233395": ["model.perekrestokvprok.int_google_dcm_reach"], "test.perekrestokvprok.freshness_int_google_dcm_activity_meta_interaction_date.16b18e3b1a": ["model.perekrestokvprok.int_google_dcm_activity_meta"], "test.perekrestokvprok.freshness_int_google_dbm_impressions_clicks_revenue_meta_date__2.c25c2d8459": ["model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta"], "test.perekrestokvprok.freshness_int_google_dbm_dv360_cost_date.0b71809b70": ["model.perekrestokvprok.int_google_dbm_dv360_cost"], "test.perekrestokvprok.freshness_int_asa_cab_meta_date.4c0f53d67b": ["model.perekrestokvprok.int_asa_cab_meta"], "test.perekrestokvprok.freshness_stg_asa_cab_sheets_date.118a491372": ["model.perekrestokvprok.stg_asa_cab_sheets"], "test.perekrestokvprok.freshness_stg_facebook_cab_sheets_date.602c75baed": ["model.perekrestokvprok.stg_facebook_cab_sheets"], "test.perekrestokvprok.freshness_stg_huawei_cab_sheets_date.c76e31a5e5": ["model.perekrestokvprok.stg_huawei_cab_sheets"], "source.perekrestokvprok.sheets_data.limits_sheet": [], "source.perekrestokvprok.sheets_data.TIKTOK_table": [], "source.perekrestokvprok.sheets_data.tiktok_sheets_campaign_cost_purchases": [], "source.perekrestokvprok.sheets_data.FBNEW_data": [], "source.perekrestokvprok.sheets_data.fb_spreadsheets_data": [], "source.perekrestokvprok.sheets_data.twitter_sheets": [], "source.perekrestokvprok.sheets_data.twitter_data": [], "source.perekrestokvprok.sheets_data.rate_data_for_inside": [], "source.perekrestokvprok.sheets_data.mistake_cmp": [], "source.perekrestokvprok.sheets_data.promo_dict_sheets": [], "source.perekrestokvprok.sheets_data.promo_dict_data": [], "source.perekrestokvprok.sheets_data.rate_info": [], "source.perekrestokvprok.sheets_data.budget_and_plan": [], "source.perekrestokvprok.sheets_data.promo_sheets": [], "source.perekrestokvprok.sheets_data.google_ads_costs_and_installs": [], "source.perekrestokvprok.sheets_data.google_ads_costs_27_30_dec_2021": [], "source.perekrestokvprok.sheets_data.Asa_cost": [], "source.perekrestokvprok.sheets_data.huawei_data": [], "source.perekrestokvprok.sheets_data.zen_sheets": [], "source.perekrestokvprok.sheets_data.vk_beta_sheet": [], "source.perekrestokvprok.sheets_data.campaign_limits": [], "source.perekrestokvprok.sheets_data._rates": [], "source.perekrestokvprok.sheets_data.crm_redeem_first_orders": [], "source.perekrestokvprok.sheets_data.crm_redeem_first_orders_realwebcpa": [], "source.perekrestokvprok.sheets_data.appnext_cost": [], "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1605495720": [], "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1607141417": [], "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_x5perek_direct": [], "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_perek_vprok_sf": [], "source.perekrestokvprok.MetaCustom.mytarget_banner_stat_d0927adb05_agency_client": [], "source.perekrestokvprok.MetaCustom.apple_search_ads_ASA_cost": [], "source.perekrestokvprok.MetaCustom.google_dbm_google_dv360_cost_5807131": [], "source.perekrestokvprok.MetaCustom.google_adwords_campaign_stat_4284985623": [], "source.perekrestokvprok.MetaCustom.google_adwords_campaign_label_4284985623": [], "source.perekrestokvprok.agg_data.AF_client_data": [], "source.perekrestokvprok.agg_data.AF_smartbanners_may_2022": [], "source.perekrestokvprok.agg_data.promocod_client_data": [], "source.perekrestokvprok.agg_data.google_ads_costs_and_installs_sum": [], "source.perekrestokvprok.agg_data.vk_manual_data": [], "source.perekrestokvprok.agg_data.vk_manual_cost": [], "source.perekrestokvprok.DCM_impression_reach.google_dbm_existed_dbm_report_293044": [], "source.perekrestokvprok.DCM.google_dbm_existed_dbm_report_293044": [], "source.perekrestokvprok.DCM.Placemant_dict": [], "source.perekrestokvprok.DCM.google_dcm_activitiIO": [], "source.perekrestokvprok.AF_data.af_atr_data_for_media_ads_TABLE": [], "source.perekrestokvprok.AF_data.android_ua_partners_by_date_report_*": [], "source.perekrestokvprok.AF_data.ios_ua_partners_by_date_report_*": [], "source.perekrestokvprok.AF_data.ios_rtg_partners_by_date_report_*": [], "source.perekrestokvprok.AF_data.android_rtg_partners_by_date_report_*": [], "source.perekrestokvprok.test2.google_dbm_existed_dbm_report_123": [], "source.perekrestokvprok.test2.facebook_ads_ad_stat_minimal_134923481805102": [], "source.perekrestokvprok.test2.tiktok_perek_settings_6952834783391023106": []}, "child_map": {"model.perekrestokvprok.my_first_dbt_model": ["model.perekrestokvprok.my_second_dbt_model"], "model.perekrestokvprok.my_second_dbt_model": [], "model.perekrestokvprok.dim_client_promo": [], "model.perekrestokvprok.dim_media": [], "model.perekrestokvprok.dim_plan_budget": [], "model.perekrestokvprok.dim_ret": [], "model.perekrestokvprok.dim_ret_crm": [], "model.perekrestokvprok.dim_rtg_agg": [], "model.perekrestokvprok.dim_ua": [], "model.perekrestokvprok.dim_ua_agg": [], "model.perekrestokvprok.dim_ua_crm": [], "model.perekrestokvprok.int_partner_limits": [], "model.perekrestokvprok.int_rate_for_inside": [], "model.perekrestokvprok.int_asa_cab_meta": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "model.perekrestokvprok.dim_ua_agg", "model.perekrestokvprok.stg_asa_cab_sheets", "test.perekrestokvprok.freshness_int_asa_cab_meta_date.4c0f53d67b"], "model.perekrestokvprok.int_google_cab_sheets": [], "model.perekrestokvprok.int_google_dbm_dv360_cost": ["test.perekrestokvprok.freshness_int_google_dbm_dv360_cost_date.0b71809b70"], "model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta": ["model.perekrestokvprok.dim_media", "test.perekrestokvprok.freshness_int_google_dbm_impressions_clicks_revenue_meta_date__2.c25c2d8459"], "model.perekrestokvprok.int_google_dcm_activity_meta": ["model.perekrestokvprok.dim_media", "test.perekrestokvprok.freshness_int_google_dcm_activity_meta_interaction_date.16b18e3b1a"], "model.perekrestokvprok.int_google_dcm_reach": ["model.perekrestokvprok.dim_media", "test.perekrestokvprok.freshness_int_google_dcm_reach_date__2.6f5c233395"], "model.perekrestokvprok.int_mytarget_cab_meta": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "model.perekrestokvprok.dim_ua_agg", "test.perekrestokvprok.freshness_int_mytarget_cab_meta_date.b7126cd27f"], "model.perekrestokvprok.int_twitter_cab": [], "model.perekrestokvprok.int_vk_cab_meta": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua"], "model.perekrestokvprok.int_yandex_cab_meta": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "test.perekrestokvprok.freshness_int_yandex_cab_meta_date.f0993cbb4f"], "model.perekrestokvprok.stg_af_client_data": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret_crm", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_crm", "test.perekrestokvprok.freshness_stg_af_client_data_date.e3578f41c6"], "model.perekrestokvprok.stg_af_for_media": ["model.perekrestokvprok.dim_media", "test.perekrestokvprok.freshness_stg_af_for_media_date.4abd88be82"], "model.perekrestokvprok.stg_af_rtg_partners_by_date": ["model.perekrestokvprok.dim_rtg_agg"], "model.perekrestokvprok.stg_af_ua_partners_by_date": ["model.perekrestokvprok.dim_ua_agg"], "model.perekrestokvprok.stg_appnext_cost": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ua"], "model.perekrestokvprok.stg_asa_cab_sheets": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "test.perekrestokvprok.freshness_stg_asa_cab_sheets_date.118a491372"], "model.perekrestokvprok.stg_budget_and_plan": ["model.perekrestokvprok.dim_plan_budget"], "model.perekrestokvprok.stg_campaign_limits": ["model.perekrestokvprok.dim_ua"], "model.perekrestokvprok.stg_crm_orders": ["model.perekrestokvprok.dim_ua"], "model.perekrestokvprok.stg_crm_orders_realwebcpa": ["model.perekrestokvprok.dim_ua"], "model.perekrestokvprok.stg_facebook_cab_meta": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg"], "model.perekrestokvprok.stg_facebook_cab_sheets": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "test.perekrestokvprok.freshness_stg_facebook_cab_sheets_date.602c75baed"], "model.perekrestokvprok.stg_google_cab_sheets": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "model.perekrestokvprok.int_google_cab_sheets", "test.perekrestokvprok.freshness_stg_google_cab_sheets_date.ea19a30b02"], "model.perekrestokvprok.stg_google_dbm": ["model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta", "test.perekrestokvprok.freshness_stg_google_dbm_date__2.045c65720f"], "model.perekrestokvprok.stg_huawei_cab_sheets": ["model.perekrestokvprok.dim_ua", "test.perekrestokvprok.freshness_stg_huawei_cab_sheets_date.c76e31a5e5"], "model.perekrestokvprok.stg_mistake_cmp": [], "model.perekrestokvprok.stg_partner_limits": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "model.perekrestokvprok.int_partner_limits"], "model.perekrestokvprok.stg_placement_dict": ["model.perekrestokvprok.dim_media"], "model.perekrestokvprok.stg_promocode_client_data": ["model.perekrestokvprok.dim_client_promo", "model.perekrestokvprok.dim_ret_crm", "model.perekrestokvprok.dim_ua_crm"], "model.perekrestokvprok.stg_promo_dict_sheets": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua"], "model.perekrestokvprok.stg_promo_sheets": ["model.perekrestokvprok.dim_client_promo", "model.perekrestokvprok.dim_ret_crm", "model.perekrestokvprok.dim_ua_crm"], "model.perekrestokvprok.stg_rate_info": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "model.perekrestokvprok.int_rate_for_inside"], "model.perekrestokvprok.stg_tiktok_cab_meta": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.dim_ua", "model.perekrestokvprok.dim_ua_agg", "test.perekrestokvprok.freshness_stg_tiktok_cab_meta_date.2e7fade306"], "model.perekrestokvprok.stg_twitter_cab_sheets": ["model.perekrestokvprok.dim_ret", "model.perekrestokvprok.dim_rtg_agg", "model.perekrestokvprok.int_twitter_cab"], "model.perekrestokvprok.stg_vk_beta_sheet": ["model.perekrestokvprok.dim_ua"], "model.perekrestokvprok.stg_zen_data_sheets": ["model.perekrestokvprok.dim_ua"], "test.perekrestokvprok.freshness_stg_tiktok_cab_meta_date.2e7fade306": [], "test.perekrestokvprok.freshness_stg_google_dbm_date__2.045c65720f": [], "test.perekrestokvprok.freshness_stg_google_cab_sheets_date.ea19a30b02": [], "test.perekrestokvprok.freshness_stg_af_for_media_date.4abd88be82": [], "test.perekrestokvprok.freshness_stg_af_client_data_date.e3578f41c6": [], "test.perekrestokvprok.freshness_int_yandex_cab_meta_date.f0993cbb4f": [], "test.perekrestokvprok.freshness_int_mytarget_cab_meta_date.b7126cd27f": [], "test.perekrestokvprok.freshness_int_google_dcm_reach_date__2.6f5c233395": [], "test.perekrestokvprok.freshness_int_google_dcm_activity_meta_interaction_date.16b18e3b1a": [], "test.perekrestokvprok.freshness_int_google_dbm_impressions_clicks_revenue_meta_date__2.c25c2d8459": [], "test.perekrestokvprok.freshness_int_google_dbm_dv360_cost_date.0b71809b70": [], "test.perekrestokvprok.freshness_int_asa_cab_meta_date.4c0f53d67b": [], "test.perekrestokvprok.freshness_stg_asa_cab_sheets_date.118a491372": [], "test.perekrestokvprok.freshness_stg_facebook_cab_sheets_date.602c75baed": [], "test.perekrestokvprok.freshness_stg_huawei_cab_sheets_date.c76e31a5e5": [], "source.perekrestokvprok.sheets_data.limits_sheet": ["model.perekrestokvprok.stg_partner_limits"], "source.perekrestokvprok.sheets_data.TIKTOK_table": ["model.perekrestokvprok.stg_tiktok_cab_meta"], "source.perekrestokvprok.sheets_data.tiktok_sheets_campaign_cost_purchases": [], "source.perekrestokvprok.sheets_data.FBNEW_data": ["model.perekrestokvprok.stg_facebook_cab_meta", "model.perekrestokvprok.stg_facebook_cab_sheets"], "source.perekrestokvprok.sheets_data.fb_spreadsheets_data": ["model.perekrestokvprok.stg_facebook_cab_sheets"], "source.perekrestokvprok.sheets_data.twitter_sheets": ["model.perekrestokvprok.int_twitter_cab", "model.perekrestokvprok.stg_twitter_cab_sheets"], "source.perekrestokvprok.sheets_data.twitter_data": ["model.perekrestokvprok.stg_twitter_cab_sheets"], "source.perekrestokvprok.sheets_data.rate_data_for_inside": [], "source.perekrestokvprok.sheets_data.mistake_cmp": ["model.perekrestokvprok.stg_mistake_cmp"], "source.perekrestokvprok.sheets_data.promo_dict_sheets": ["model.perekrestokvprok.stg_promo_dict_sheets"], "source.perekrestokvprok.sheets_data.promo_dict_data": [], "source.perekrestokvprok.sheets_data.rate_info": [], "source.perekrestokvprok.sheets_data.budget_and_plan": ["model.perekrestokvprok.stg_budget_and_plan"], "source.perekrestokvprok.sheets_data.promo_sheets": ["model.perekrestokvprok.stg_promo_sheets"], "source.perekrestokvprok.sheets_data.google_ads_costs_and_installs": ["model.perekrestokvprok.int_google_cab_sheets", "model.perekrestokvprok.stg_google_cab_sheets"], "source.perekrestokvprok.sheets_data.google_ads_costs_27_30_dec_2021": [], "source.perekrestokvprok.sheets_data.Asa_cost": ["model.perekrestokvprok.stg_asa_cab_sheets"], "source.perekrestokvprok.sheets_data.huawei_data": ["model.perekrestokvprok.stg_huawei_cab_sheets"], "source.perekrestokvprok.sheets_data.zen_sheets": ["model.perekrestokvprok.stg_zen_data_sheets"], "source.perekrestokvprok.sheets_data.vk_beta_sheet": ["model.perekrestokvprok.stg_vk_beta_sheet"], "source.perekrestokvprok.sheets_data.campaign_limits": ["model.perekrestokvprok.stg_campaign_limits"], "source.perekrestokvprok.sheets_data._rates": ["model.perekrestokvprok.stg_rate_info"], "source.perekrestokvprok.sheets_data.crm_redeem_first_orders": ["model.perekrestokvprok.stg_crm_orders", "model.perekrestokvprok.stg_crm_orders", "model.perekrestokvprok.stg_crm_orders_realwebcpa"], "source.perekrestokvprok.sheets_data.crm_redeem_first_orders_realwebcpa": ["model.perekrestokvprok.stg_crm_orders_realwebcpa"], "source.perekrestokvprok.sheets_data.appnext_cost": [], "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1605495720": ["model.perekrestokvprok.int_vk_cab_meta"], "source.perekrestokvprok.MetaCustom.vk_campaign_stat_1900013586_1607141417": ["model.perekrestokvprok.int_vk_cab_meta"], "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_x5perek_direct": ["model.perekrestokvprok.int_yandex_cab_meta"], "source.perekrestokvprok.MetaCustom.yandex_direct_ad_keyword_stat_perek_vprok_sf": ["model.perekrestokvprok.int_yandex_cab_meta"], "source.perekrestokvprok.MetaCustom.mytarget_banner_stat_d0927adb05_agency_client": ["model.perekrestokvprok.int_mytarget_cab_meta"], "source.perekrestokvprok.MetaCustom.apple_search_ads_ASA_cost": ["model.perekrestokvprok.int_asa_cab_meta"], "source.perekrestokvprok.MetaCustom.google_dbm_google_dv360_cost_5807131": ["model.perekrestokvprok.int_google_dbm_dv360_cost"], "source.perekrestokvprok.MetaCustom.google_adwords_campaign_stat_4284985623": [], "source.perekrestokvprok.MetaCustom.google_adwords_campaign_label_4284985623": [], "source.perekrestokvprok.agg_data.AF_client_data": ["model.perekrestokvprok.stg_af_client_data", "model.perekrestokvprok.stg_af_client_data"], "source.perekrestokvprok.agg_data.AF_smartbanners_may_2022": ["model.perekrestokvprok.stg_af_client_data"], "source.perekrestokvprok.agg_data.promocod_client_data": ["model.perekrestokvprok.stg_promocode_client_data"], "source.perekrestokvprok.agg_data.google_ads_costs_and_installs_sum": ["model.perekrestokvprok.stg_google_cab_sheets"], "source.perekrestokvprok.agg_data.vk_manual_data": ["model.perekrestokvprok.dim_ua"], "source.perekrestokvprok.agg_data.vk_manual_cost": ["model.perekrestokvprok.dim_ua"], "source.perekrestokvprok.DCM_impression_reach.google_dbm_existed_dbm_report_293044": ["model.perekrestokvprok.int_google_dcm_reach"], "source.perekrestokvprok.DCM.google_dbm_existed_dbm_report_293044": ["model.perekrestokvprok.int_google_dbm_impressions_clicks_revenue_meta"], "source.perekrestokvprok.DCM.Placemant_dict": ["model.perekrestokvprok.stg_placement_dict"], "source.perekrestokvprok.DCM.google_dcm_activitiIO": ["model.perekrestokvprok.int_google_dcm_activity_meta"], "source.perekrestokvprok.AF_data.af_atr_data_for_media_ads_TABLE": ["model.perekrestokvprok.stg_af_for_media"], "source.perekrestokvprok.AF_data.android_ua_partners_by_date_report_*": ["model.perekrestokvprok.stg_af_ua_partners_by_date"], "source.perekrestokvprok.AF_data.ios_ua_partners_by_date_report_*": ["model.perekrestokvprok.stg_af_ua_partners_by_date"], "source.perekrestokvprok.AF_data.ios_rtg_partners_by_date_report_*": ["model.perekrestokvprok.stg_af_rtg_partners_by_date"], "source.perekrestokvprok.AF_data.android_rtg_partners_by_date_report_*": ["model.perekrestokvprok.stg_af_rtg_partners_by_date"], "source.perekrestokvprok.test2.google_dbm_existed_dbm_report_123": ["model.perekrestokvprok.stg_google_dbm"], "source.perekrestokvprok.test2.facebook_ads_ad_stat_minimal_134923481805102": ["model.perekrestokvprok.stg_facebook_cab_meta"], "source.perekrestokvprok.test2.tiktok_perek_settings_6952834783391023106": ["model.perekrestokvprok.stg_tiktok_cab_meta"]}}